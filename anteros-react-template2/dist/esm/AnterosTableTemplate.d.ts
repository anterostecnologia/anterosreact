import { Component, ReactNode } from "react";
import { AnterosRemoteDatasource, AnterosDatasource } from "@anterostecnologia/anteros-react-datasource";
import { AnterosButton } from "@anterostecnologia/anteros-react-buttons";
import { UserData, IAnterosRemoteResource, AnterosEntity } from "@anterostecnologia/anteros-react-api2";
import { RouteComponentProps } from "react-router";
interface AnterosTableTemplateProps<T extends AnterosEntity, TypeID> {
    caption: string;
    openDataSourceFilter: boolean;
    openMainDataSource: boolean;
    dataSource: AnterosDatasource | undefined;
    messageLoading: string;
    withFilter: boolean;
    fieldsToForceLazy: string;
    defaultSortFields: string;
    filterName: string;
    version: string;
    viewName: string;
    user: UserData;
    pageSize: number;
    currentFilter: any;
    needRefresh: boolean;
    columns: ReactNode | undefined;
    routes: any;
    fieldsFilter: ReactNode | undefined;
    userActions?: ReactNode | undefined;
    positionUserActions?: string | undefined;
    remoteResource?: IAnterosRemoteResource<T, TypeID>;
    labelButtonAdd: string;
    labelButtonEdit: string;
    labelButtonRemove: string;
    labelButtonSelect: string;
    labelButtonView: string;
    allowRemove: boolean;
    alertIsOpen: boolean;
    alertMessage: string | undefined;
    loading: boolean;
    setDatasource(dataSource: AnterosDatasource): void;
    setFilter(filter: any, activeFilterIndex: number): void;
    hideTour(): void;
    getModals?(): ReactNode;
    history: RouteComponentProps["history"];
    activeFilterIndex: number;
    onButtonClick?: Function;
    onDidMount?(): void;
    onWillUnmount?(): void;
    onBeforeInsert?(): void;
    onBeforePost?(): boolean;
    onAfterInsert?(): void;
    onBeforeEdit?(): boolean;
    onBeforeRemove?(): boolean;
    onCustomCreateDatasource?(): AnterosDatasource;
    onCustomActionView?(route: string): boolean;
    onCustomActionAdd?(route: string): boolean;
    onCustomActionEdit?(router: string): boolean;
    onCustomFindWithFilter?(filter: string, page: number, pageSize: number, sort: string, fieldsToForceLazy: string): any | undefined;
    onCustomFindAll?(page: number, pageSize: number, sort: string, fieldsToForceLazy: string): any | undefined;
    onCustomFindMultipleFields?(filter: string, fields: string, page: number, pageSize: number, sort: string, fieldsToForceLazy: string): any | undefined;
    onCustomDoubleClick?(data: any): void;
    onCustomUser?(): UserData;
    onSelectRecord?(row: any, data: any, tableId: string): void;
    onUnselectRecord?(row: any, data: any, tableId: string): void;
    onSelectAllRecords?(records: any[], tableId: string): void;
    onUnselectAllRecords?(tableId: any): void;
    getCustomLoader?(): ReactNode | undefined;
    getCustomMessageLoading?(): string | undefined;
}
interface AnterosTableTemplateState {
    dataSource: AnterosDatasource;
    alertIsOpen: boolean;
    alertMessage: string;
    loading: boolean;
    width: any;
    newHeight: any;
    filterExpanded: boolean;
    update: number;
}
declare class AnterosTableTemplate<T extends AnterosEntity, TypeID> extends Component<AnterosTableTemplateProps<T, TypeID>, AnterosTableTemplateState> {
    private _dataSource;
    private _dataSourceFilter;
    private _cardRef;
    private _tableRef;
    private _filterRef;
    static defaultProps: {
        openDataSourceFilter: boolean;
        openMainDataSource: boolean;
        messageLoading: string;
        withFilter: boolean;
        fieldsToForceLazy: string;
        defaultSortFields: string;
        labelButtonAdd: string;
        labelButtonEdit: string;
        labelButtonRemove: string;
        labelButtonSelect: string;
        labelButtonView: string;
        positionUserActions: string;
        userActions: undefined;
        allowRemove: boolean;
        alertIsOpen: boolean;
        alertMessage: undefined;
        loading: boolean;
    };
    constructor(props: AnterosTableTemplateProps<T, TypeID>);
    createDataSourceFilter(props: AnterosTableTemplateProps<T, TypeID>): AnterosRemoteDatasource;
    getUser(): UserData;
    createMainDataSource(): void;
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: any): void;
    componentWillUnmount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): any;
    onFilterChanged(filter: any, activeFilterIndex: any, callback?: any): void;
    onToggleExpandedFilter(expanded: any): void;
    onSelectedFilter(filter: any, index: any): void;
    onBeforePageChanged(_currentPage: any, _newPage: any): void;
    handlePageChanged(_newPage: any): void;
    getSortFields(): any;
    onDatasourceEvent(event: any, error: any): void;
    onButtonClick(event: any, button: AnterosButton): void;
    onSearchByFilter(): void;
    getData(currentFilter: any, page: number): any;
    getDataWithFilter(currentFilter: any, page: any): any;
    getDataWithoutFilter(page: any): any;
    getDataWithQuickFilter(currentFilter: any, page: any): any;
    onDoubleClickTable(data: any): void;
    pageConfigHandler(page: any): any;
    onCloseAlert(): void;
    onShowHideLoad(show: any): void;
    handleOnSelectRecord(row: any, data: any, tableId: any): void;
    handleOnUnselectRecord(row: any, data: any, tableId: any): void;
    handleOnSelectAllRecords(records: any, tableId: any): void;
    handleOnUnselectAllRecords(tableId: any): void;
    onResize(width: any, height: any): void;
    changeState(state: any, callback: any): void;
    render(): JSX.Element;
}
export declare class TableTemplateActions extends Component {
    render(): JSX.Element;
}
export { AnterosTableTemplate };
