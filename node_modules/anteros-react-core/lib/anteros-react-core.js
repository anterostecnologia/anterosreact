(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("lodash"), require("prop-types"), require("react-transition-group"));
	else if(typeof define === 'function' && define.amd)
		define("anteros-react-core", ["react", "lodash", "prop-types", "react-transition-group"], factory);
	else if(typeof exports === 'object')
		exports["anteros-react-core"] = factory(require("react"), require("lodash"), require("prop-types"), require("react-transition-group"));
	else
		root["anteros-react-core"] = factory(root["react"], root["lodash"], root["prop-types"], root["react-transition-group"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_19__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 17);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnterosUtils = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = __webpack_require__(16);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var tetherAttachements = ['top', 'bottom', 'left', 'right', 'top left', 'top center', 'top right', 'right top', 'right middle', 'right bottom', 'bottom right', 'bottom center', 'bottom left', 'left top', 'left middle', 'left bottom'];

var AnterosUtils = function () {
  function AnterosUtils() {
    _classCallCheck(this, AnterosUtils);
  }

  _createClass(AnterosUtils, [{
    key: 'isArray',
    value: function isArray(input) {
      return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }
  }, {
    key: 'isObject',
    value: function isObject(input) {
      // IE8 will treat undefined and null as object if it wasn't for
      // input != null
      return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }
  }, {
    key: 'isNumber',
    value: function isNumber(input) {
      return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }
  }, {
    key: 'isUndefined',
    value: function isUndefined(input) {
      return input === void 0;
    }
  }, {
    key: 'zeroFill',
    value: function zeroFill(number, targetLength, forceSign) {
      var absNumber = '' + Math.abs(number),
          zerosToFill = targetLength - absNumber.length,
          sign = number >= 0;
      return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
  }, {
    key: 'parseNumber',
    value: function parseNumber(value) {
      if (value instanceof Number) return value;
      if (this.isUndefined(value)) return 0;
      var value = new String(value) || "";
      var decimal = '.';
      value = value.replace(/[^0-9$.,]/g, '');
      if (value.indexOf(',') > value.indexOf('.')) decimal = ',';
      if ((value.match(new RegExp("\\" + decimal, "g")) || []).length > 1) decimal = "";
      if (decimal != "" && value.length - value.indexOf(decimal) - 1 == 3) decimal = "";
      value = value.replace(new RegExp("[^0-9$" + decimal + "]", "g"), "");
      value = value.replace(',', '.');
      return parseFloat(value);
    }
  }, {
    key: 'formatNumber',
    value: function formatNumber(value, mask) {
      if (this.isUndefined(value)) value = 0;

      if (!mask || isNaN(+value)) {
        return value; // return as it is.
      }

      var isNegative,
          result,
          decimal,
          group,
          posLeadZero,
          posTrailZero,
          posSeparator,
          part,
          szSep,
          integer,


      // find prefix/suffix
      len = mask.length,
          start = mask.search(/[0-9\-\+#]/),
          prefix = start > 0 ? mask.substring(0, start) : '',

      // reverse string: not an ideal method if there are surrogate pairs
      str = mask.split('').reverse().join(''),
          end = str.search(/[0-9\-\+#]/),
          offset = len - end,
          substr = mask.substring(offset, offset + 1),
          indx = offset + (substr === '.' || substr === ',' ? 1 : 0),
          suffix = end > 0 ? mask.substring(indx, len) : '';

      // mask with prefix & suffix removed
      mask = mask.substring(start, indx);

      // convert any string to number according to formation sign.
      value = mask.charAt(0) === '-' ? -value : +value;
      isNegative = value < 0 ? value = -value : 0; // process only abs(), and turn on flag.

      // search for separator for grp & decimal, anything not digit, not +/- sign, not #.
      result = mask.match(/[^\d\-\+#]/g);
      decimal = result && result[result.length - 1] || '.'; // treat the right most symbol as decimal
      group = result && result[1] && result[0] || ','; // treat the left most symbol as group separator

      // split the decimal for the format string if any.
      mask = mask.split(decimal);
      // Fix the decimal first, toFixed will auto fill trailing zero.
      value = value.toFixed(mask[1] && mask[1].length);
      value = +value + ''; // convert number to string to trim off *all* trailing decimal zero(es)

      // fill back any trailing zero according to format
      posTrailZero = mask[1] && mask[1].lastIndexOf('0'); // look for last zero in format
      part = value.split('.');
      // integer will get !part[1]
      if (!part[1] || part[1] && part[1].length <= posTrailZero) {
        value = (+value).toFixed(posTrailZero + 1);
      }
      szSep = mask[0].split(group); // look for separator
      mask[0] = szSep.join(''); // join back without separator for counting the pos of any leading 0.

      posLeadZero = mask[0] && mask[0].indexOf('0');
      if (posLeadZero > -1) {
        while (part[0].length < mask[0].length - posLeadZero) {
          part[0] = '0' + part[0];
        }
      } else if (+part[0] === 0) {
        part[0] = '';
      }

      value = value.split('.');
      value[0] = part[0];

      // process the first group separator from decimal (.) only, the rest ignore.
      // get the length of the last slice of split result.
      posSeparator = szSep[1] && szSep[szSep.length - 1].length;
      if (posSeparator) {
        integer = value[0];
        str = '';
        offset = integer.length % posSeparator;
        len = integer.length;
        for (indx = 0; indx < len; indx++) {
          str += integer.charAt(indx); // ie6 only support charAt for sz.
          // -posSeparator so that won't trail separator on full length
          /*jshint -W018 */
          if (!((indx - offset + 1) % posSeparator) && indx < len - posSeparator) {
            str += group;
          }
        }
        value[0] = str;
      }
      value[1] = mask[1] && value[1] ? decimal + value[1] : '';

      // remove negative sign if result is zero
      result = value.join('');
      if (result === '0' || result === '') {
        // remove negative sign if result is zero
        isNegative = false;
      }

      // put back any negation, combine integer and fraction, and add back prefix & suffix
      return prefix + ((isNegative ? '-' : '') + result) + suffix;
    }
  }, {
    key: 'round',
    value: function round(number, decimalPlaces) {
      if (number[1] && decimalPlaces >= 0 && number[1].length > decimalPlaces) {
        //truncate to correct number of decimal places
        var decim = number[1].slice(0, decimalPlaces);
        //if next digit was >= 5 we need to round up
        if (+number[1].substr(decimalPlaces, 1) >= 5) {
          //But first count leading zeros as converting to a number will loose them
          var leadingzeros = "";
          while (decim.charAt(0) === "0") {
            leadingzeros = leadingzeros + "0";
            decim = decim.substr(1);
          }
          //Then we can change decim to a number and add 1 before replacing leading zeros
          decim = +decim + 1 + '';
          decim = leadingzeros + decim;
          if (decim.length > decimalPlaces) {
            //adding one has made it longer
            number[0] = +number[0] + +decim.charAt(0) + ''; //add value of firstchar to the integer part
            decim = decim.substring(1); //ignore the 1st char at the beginning which is the carry to the integer part
          }
        }
        number[1] = decim;
      }
      return number;
    }
  }, {
    key: 'buildClassNames',
    value: function buildClassNames() {
      var classes = [];

      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        if (!arg) continue;

        var argType = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);

        if (argType === 'string' || argType === 'number') {
          classes.push(arg);
        } else if (Array.isArray(arg)) {
          classes.push(_classnames2.default.apply(null, arg));
        } else if (argType === 'object') {
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes.push(key);
            }
          }
        }
      }

      return classes.join(' ');
    }
  }, {
    key: 'getTetherAttachments',
    value: function getTetherAttachments(placement) {
      var attachments = {};
      switch (placement) {
        case 'top':
        case 'top center':
          attachments = {
            attachment: 'bottom center',
            targetAttachment: 'top center'
          };
          break;
        case 'bottom':
        case 'bottom center':
          attachments = {
            attachment: 'top center',
            targetAttachment: 'bottom center'
          };
          break;
        case 'left':
        case 'left center':
          attachments = {
            attachment: 'middle right',
            targetAttachment: 'middle left'
          };
          break;
        case 'right':
        case 'right center':
          attachments = {
            attachment: 'middle left',
            targetAttachment: 'middle right'
          };
          break;
        case 'top left':
          attachments = {
            attachment: 'bottom left',
            targetAttachment: 'top left'
          };
          break;
        case 'top right':
          attachments = {
            attachment: 'bottom right',
            targetAttachment: 'top right'
          };
          break;
        case 'bottom left':
          attachments = {
            attachment: 'top left',
            targetAttachment: 'bottom left'
          };
          break;
        case 'bottom right':
          attachments = {
            attachment: 'top right',
            targetAttachment: 'bottom right'
          };
          break;
        case 'right top':
          attachments = {
            attachment: 'top left',
            targetAttachment: 'top right'
          };
          break;
        case 'right bottom':
          attachments = {
            attachment: 'bottom left',
            targetAttachment: 'bottom right'
          };
          break;
        case 'left top':
          attachments = {
            attachment: 'top right',
            targetAttachment: 'top left'
          };
          break;
        case 'left bottom':
          attachments = {
            attachment: 'bottom right',
            targetAttachment: 'bottom left'
          };
          break;
        default:
          attachments = {
            attachment: 'top center',
            targetAttachment: 'bottom center'
          };
      }

      return attachments;
    }

    // https://github.com/twbs/bootstrap/blob/v4.0.0-alpha.4/js/src/modal.js#L436-L443

  }, {
    key: 'getScrollbarWidth',
    value: function getScrollbarWidth() {
      var scrollDiv = document.createElement('div');
      // .modal-scrollbar-measure styles // https://github.com/twbs/bootstrap/blob/v4.0.0-alpha.4/scss/_modal.scss#L106-L113
      scrollDiv.style.position = 'absolute';
      scrollDiv.style.top = '-9999px';
      scrollDiv.style.width = '50px';
      scrollDiv.style.height = '50px';
      scrollDiv.style.overflow = 'scroll';
      document.body.appendChild(scrollDiv);
      var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarWidth;
    }
  }, {
    key: 'setScrollbarWidth',
    value: function setScrollbarWidth(padding) {
      document.body.style.paddingRight = padding > 0 ? padding + 'px' : null;
    }
  }, {
    key: 'isBodyOverflowing',
    value: function isBodyOverflowing() {
      return document.body.clientWidth < window.innerWidth;
    }
  }, {
    key: 'getOriginalBodyPadding',
    value: function getOriginalBodyPadding() {
      return parseInt(window.getComputedStyle(document.body, null).getPropertyValue('padding-right') || 0, 10);
    }
  }, {
    key: 'conditionallyUpdateScrollbar',
    value: function conditionallyUpdateScrollbar() {
      var scrollbarWidth = this.getScrollbarWidth();
      // https://github.com/twbs/bootstrap/blob/v4.0.0-alpha.4/js/src/modal.js#L420
      var fixedContent = document.querySelectorAll('.navbar-fixed-top, .navbar-fixed-bottom, .is-fixed')[0];
      var bodyPadding = fixedContent ? parseInt(fixedContent.style.paddingRight || 0, 10) : 0;

      if (this.isBodyOverflowing()) {
        this.setScrollbarWidth(bodyPadding + scrollbarWidth);
      }
    }
  }, {
    key: 'mapToCssModules',
    value: function mapToCssModules(className, cssModule) {
      if (!cssModule) return className;
      return className.split(' ').map(function (c) {
        return cssModule[c] || c;
      }).join(' ');
    }

    /**
    *  createRequest
    *
    *  Creates necessary XHR to use with AJAX apps if possible.
    *  Supports all browsers.
    *
    *  @return XMLHTTPRequest || null
    */

  }, {
    key: 'createRequest',
    value: function createRequest() {
      try {
        request = new XMLHttpRequest();
      } catch (tryMS) {
        try {
          request = new ActiveXObject("Msxml2.XMLHTTP");
        } catch (otherMS) {
          try {
            request = new ActiveXObject("Microsoft.XMLHTTP");
          } catch (failed) {
            request = null;
          }
        }
      }

      return request;
    }

    /**
    *  addEventHandler
    *
    *  Attach event handlers the way your browser likes.
    *  NOTE: IE 9 supports DOM Level 2.
    *
    *  @param obj          object to attach to
    *  @param eventName    name of the event
    *  @param handler      handler to run
    *  @return void
    */

  }, {
    key: 'addEventHandler',
    value: function addEventHandler(obj, eventName, handler) {
      if (document.attachEvent) {
        /* For browsers that don't support DOM Level 2. */
        obj.attachEvent("on" + eventName, handler);
      } else if (document.addEventListener) {
        /* For modern browsers. */
        obj.addEventListener(eventName, handler, false);
      }
    }
  }, {
    key: 'objectType',
    value: function objectType(obj) {
      return Object.prototype.toString.call(obj).slice(8, -1);
    }
  }, {
    key: 'isDefined',
    value: function isDefined(param) {
      return typeof param != "undefined";
    }
  }, {
    key: 'isUndefined',
    value: function isUndefined(param) {
      return typeof param == "undefined";
    }
  }, {
    key: 'isFunction',
    value: function isFunction(param) {
      return typeof param == "function";
    }
  }, {
    key: 'isNumber',
    value: function isNumber(param) {
      return typeof param == "number" && !isNaN(param);
    }
  }, {
    key: 'isString',
    value: function isString(str) {
      return this.objectType(str) === "String";
    }
  }, {
    key: 'closest',
    value: function closest(target, selector) {
      // closest(e.target, '.field')
      while (target) {
        if (target.matches && target.matches(selector)) return target;
        target = target.parentNode;
      }
      return null;
    }
  }, {
    key: 'getOffsetRect',
    value: function getOffsetRect(elem) {
      // (1)
      var box = elem.getBoundingClientRect();

      var body = document.body;
      var docElem = document.documentElement;

      // (2)
      var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;
      var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;

      // (3)
      var clientTop = docElem.clientTop || body.clientTop || 0;
      var clientLeft = docElem.clientLeft || body.clientLeft || 0;

      // (4)
      var top = box.top + scrollTop - clientTop;
      var left = box.left + scrollLeft - clientLeft;

      return { top: Math.round(top), left: Math.round(left) };
    }
  }, {
    key: 'getTransformProps',
    value: function getTransformProps(x, y) {
      return {
        transform: 'translate(' + x + 'px, ' + y + 'px)'
      };
    }
  }, {
    key: 'listWithChildren',
    value: function listWithChildren(list, childrenProp) {
      var _this = this;

      return list.map(function (item) {
        return _extends({}, item, _defineProperty({}, childrenProp, item[childrenProp] ? _this.listWithChildren(item[childrenProp], childrenProp) : []));
      });
    }
  }, {
    key: 'getAllNonEmptyNodesIds',
    value: function getAllNonEmptyNodesIds(items, childrenProp) {
      var _this2 = this;

      var childrenIds = [];
      var ids = items.filter(function (item) {
        return item[childrenProp].length;
      }).map(function (item) {
        childrenIds = childrenIds.concat(_this2.getAllNonEmptyNodesIds(item[childrenProp], childrenProp));
        return item.id;
      });

      return ids.concat(childrenIds);
    }
  }]);

  return AnterosUtils;
}();

var instance = new AnterosUtils();
exports.AnterosUtils = instance;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AnterosDefaults = function () {
    function AnterosDefaults() {
        _classCallCheck(this, AnterosDefaults);

        this._enterTab = this._enterTab.bind(this);
        this._dataSourceDatetimeFormat = 'YYYY-MM-DDTHH:mm:ss.SSS';
        this._enableEnterTab = true;
        this._enterTab();
    }

    _createClass(AnterosDefaults, [{
        key: '_enterTab',
        value: function _enterTab() {
            var _this = this;
            $(document).keydown(function (e) {
                if (_this._enableEnterTab) {
                    var enterKey = function enterKey() {
                        if ((e.which === 13 || e.keyCode == 38 || e.keyCode == 40) && !self.is('textarea,div[contenteditable=true]')) {
                            // [Enter] key

                            // If not a regular hyperlink/button/textarea
                            if ($.inArray(self, focusable) && !self.is('a,button')) {
                                // Then prevent the default [Enter] key behaviour from submitting the form
                                e.preventDefault();
                            } // Otherwise follow the link/button as by design, or put new line in textarea

                            // Focus on the next item (either previous or next depending on shift)
                            focusable.eq(focusable.index(self) + (e.shiftKey || e.keyCode == 38 ? -1 : 1)).focus();

                            return false;
                        }
                    };
                    // We need to capture the [Shift] key and check the [Enter] key either way.


                    // Set self as the current item in focus
                    var self = $(':focus'),

                    // Set the form by the current item in focus
                    form = self.parents('form:eq(0)'),
                        focusable;

                    // Array of Indexable/Tab-able items
                    focusable = form.find('input,select,textarea,div[contenteditable=true]').filter(':visible :not([disabled])');

                    if (e.shiftKey) {
                        enterKey();
                    } else {
                        enterKey();
                    }
                }
            });
        }
    }, {
        key: 'dataSourceDatetimeFormat',
        get: function get() {
            return this._dataSourceDatetimeFormat;
        },
        set: function set(value) {
            this._dataSourceDatetimeFormat = value;
        }
    }, {
        key: 'enableEnterTab',
        get: function get() {
            return this._enableEnterTab;
        },
        set: function set(value) {
            this._enableEnterTab = value;
        }
    }]);

    return AnterosDefaults;
}();

var Anteros = new AnterosDefaults();

exports.default = Anteros;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EXIT_TIMEOUT = exports.ENTER_TIMEOUT = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactTransitionGroup = __webpack_require__(19);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FirstChild = function FirstChild(_ref) {
    var children = _ref.children;
    return _react2.default.Children.toArray(children)[0] || null;
};

var ENTER_TIMEOUT = exports.ENTER_TIMEOUT = 500;
var EXIT_TIMEOUT = exports.EXIT_TIMEOUT = 300;

var AnterosAlert = function (_Component) {
    _inherits(AnterosAlert, _Component);

    function AnterosAlert(props) {
        _classCallCheck(this, AnterosAlert);

        var _this = _possibleConstructorReturn(this, (AnterosAlert.__proto__ || Object.getPrototypeOf(AnterosAlert)).call(this, props));

        _this.onClose = _this.onClose.bind(_this);
        _this.state = { isOpen: props.isOpen };
        return _this;
    }

    _createClass(AnterosAlert, [{
        key: 'onClose',
        value: function onClose(event) {
            // clear the timer if it hasn't fired yet
            clearTimeout(this.timer);

            // we don't need to keep track of any timers for this alert anymore
            this.timer = null;
            this.timerTimeout = null;

            this.setState({ isOpen: false });
            if (this.props.onClose) {
                this.props.onClose(event);
            }
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {}
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            this.setState({ isOpen: nextProps.isOpen });
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.setupTimer();
        }
    }, {
        key: 'setupTimer',
        value: function setupTimer(autoCloseInterval, onClose) {
            if (!autoCloseInterval || autoCloseInterval <= 0) {
                // clear any timer we currently have
                clearTimeout(this.timer);
                this.timer = null;
                this.timerTimeout = null;
            } else {
                if (this.timer && this.timerTimeout != autoCloseInterval) {
                    // the timeout value has changed, setup a new timer
                    clearTimeout(this.timer);
                    this.timer = null;
                }

                // add new timer if we don't already have one
                if (!this.timer) {
                    this.timer = setTimeout(this.onClose.bind(this, onClose), autoCloseInterval + ENTER_TIMEOUT + EXIT_TIMEOUT);
                    this.timerTimeout = autoCloseInterval;
                }
            }
        }
    }, {
        key: 'render',
        value: function render() {
            if (this.state.isOpen) {
                this.setupTimer(this.props.autoCloseInterval, this.props.onClose);
            }
            var icon = void 0;
            var className = "alert alert-close alert-dismissible fade in show";
            if (this.props.showBorder == undefined) {
                className += " alert-no-border";
            }

            if (this.props.fill) {
                className += " alert-fill";
            }
            if (this.props.success) {
                className += " alert-success";
            } else if (this.props.info) {
                className += " alert-info";
            } else if (this.props.warning) {
                className += " alert-warning";
            } else if (this.props.danger) {
                className += " alert-danger";
            } else if (this.props.purple) {
                className += " alert-purple";
            } else if (this.props.greyDarker) {
                className += " alert-grey-darker";
            } else if (this.props.blueDirty) {
                className += " alert-blue-dirty";
            } else if (this.props.aquamarine) {
                className += " alert-aquamarine";
            } else if (this.props.facebook) {
                className += " alert-facebook";
                icon = _react2.default.createElement('i', { className: 'fa fa-facebook' });
            } else if (this.props.twitter) {
                className += " alert-twitter";
                icon = _react2.default.createElement('i', { className: 'fa fa-twitter' });
            } else if (this.props.googlePlus) {
                className += " alert-google-plus";
                icon = _react2.default.createElement('i', { className: 'fa fa-google-plus' });
            } else if (this.props.linkedin) {
                className += " alert-linkedin";
                icon = _react2.default.createElement('i', { className: 'fa fa-linkedin' });
            } else {
                className += " alert-info";
            }

            if (this.props.showBorderLeft) {
                className += " alert-border-left";
            }

            if (this.props.textColored) {
                className += " alert-txt-colored";
            }

            var classNameAvatar = "";
            if (this.props.avatar || this.props.avatar32) {
                className += " alert-avatar";
                classNameAvatar = " avatar-preview avatar-preview-32";
            } else if (this.props.avatar16) {
                className += " alert-avatar";
                classNameAvatar = " avatar-preview avatar-preview-16";
            } else if (this.props.avatar48) {
                className += " alert-avatar";
                classNameAvatar = " avatar-preview avatar-preview-48";
            } else if (this.props.avatar64) {
                className += " alert-avatar";
                classNameAvatar = " avatar-preview avatar-preview-64";
            }

            if (this.props.icon) {
                icon = _react2.default.createElement('i', { className: this.props.icon });
                className += " alert-icon";
            }
            return _react2.default.createElement(
                _reactTransitionGroup.CSSTransitionGroup,
                {
                    component: FirstChild,
                    transitionName: {
                        appear: 'fade',
                        appearActive: 'show',
                        enter: 'fade',
                        enterActive: 'show',
                        leave: 'fade',
                        leaveActive: 'out'
                    },
                    transitionAppear: this.props.transitionAppearTimeout > 0,
                    transitionAppearTimeout: this.props.transitionAppearTimeout,
                    transitionEnter: this.props.transitionEnterTimeout > 0,
                    transitionEnterTimeout: this.props.transitionEnterTimeout,
                    transitionLeave: this.props.transitionLeaveTimeout > 0,
                    transitionLeaveTimeout: this.props.transitionLeaveTimeout
                },
                this.state.isOpen == true ? _react2.default.createElement(
                    'div',
                    { className: className, role: 'alert' },
                    _react2.default.createElement(
                        'button',
                        { type: 'button', className: 'close', 'aria-label': 'Close', onClick: this.onClose },
                        _react2.default.createElement(
                            'span',
                            { 'aria-hidden': 'true' },
                            '\xD7'
                        )
                    ),
                    icon,
                    this.props.image ? _react2.default.createElement(
                        'div',
                        { className: classNameAvatar },
                        _react2.default.createElement('img', { src: this.props.image })
                    ) : null,
                    this.props.children
                ) : null
            );
        }
    }]);

    return AnterosAlert;
}(_react.Component);

exports.default = AnterosAlert;


AnterosAlert.propTypes = {
    showBorder: _react2.default.PropTypes.bool,
    fill: _react2.default.PropTypes.bool,
    isOpen: _react2.default.PropTypes.bool,
    onClose: _react2.default.PropTypes.func,
    success: _react2.default.PropTypes.bool,
    info: _react2.default.PropTypes.bool,
    warning: _react2.default.PropTypes.bool,
    danger: _react2.default.PropTypes.bool,
    purple: _react2.default.PropTypes.bool,
    greyDarker: _react2.default.PropTypes.bool,
    blueDirty: _react2.default.PropTypes.bool,
    aquamarine: _react2.default.PropTypes.bool,
    facebook: _react2.default.PropTypes.bool,
    twitter: _react2.default.PropTypes.bool,
    googlePlus: _react2.default.PropTypes.bool,
    linkedin: _react2.default.PropTypes.bool,
    showBorderLeft: _react2.default.PropTypes.bool,
    textColored: _react2.default.PropTypes.bool,
    avatar32: _react2.default.PropTypes.bool,
    avatar16: _react2.default.PropTypes.bool,
    avatar48: _react2.default.PropTypes.bool,
    avatar64: _react2.default.PropTypes.bool,
    autoCloseInterval: _react2.default.PropTypes.number.isRequired,
    transitionAppearTimeout: _react2.default.PropTypes.number,
    transitionEnterTimeout: _react2.default.PropTypes.number,
    transitionLeaveTimeout: _react2.default.PropTypes.number
};

AnterosAlert.defaultProps = {
    showBorder: undefined,
    fill: undefined,
    isOpen: false,
    transitionAppearTimeout: 150,
    transitionEnterTimeout: 150,
    transitionLeaveTimeout: 150,
    autoCloseInterval: 0
};

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Default = exports.Case = exports.Switch = exports.If = exports.Else = exports.Then = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Then = exports.Then = function (_Component) {
    _inherits(Then, _Component);

    function Then(props) {
        _classCallCheck(this, Then);

        return _possibleConstructorReturn(this, (Then.__proto__ || Object.getPrototypeOf(Then)).call(this, props));
    }

    _createClass(Then, [{
        key: 'render',
        value: function render() {
            if (typeof this.props.children === 'function') {
                return this.props.children();
            }
            return this.props.children || null;
        }
    }]);

    return Then;
}(_react.Component);

var Else = exports.Else = function (_Component2) {
    _inherits(Else, _Component2);

    function Else(props) {
        _classCallCheck(this, Else);

        return _possibleConstructorReturn(this, (Else.__proto__ || Object.getPrototypeOf(Else)).call(this, props));
    }

    _createClass(Else, [{
        key: 'render',
        value: function render() {
            if (typeof this.props.children === 'function') {
                return this.props.children();
            }
            return this.props.children || null;
        }
    }]);

    return Else;
}(_react.Component);

Then.propTypes = Else.propTypes = {
    children: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string, _react.PropTypes.number, _react.PropTypes.object])
};

var If = exports.If = function (_Component3) {
    _inherits(If, _Component3);

    function If(props) {
        _classCallCheck(this, If);

        return _possibleConstructorReturn(this, (If.__proto__ || Object.getPrototypeOf(If)).call(this, props));
    }

    _createClass(If, [{
        key: 'render',
        value: function render() {
            var _this4 = this;

            var children = this.props.children;

            if (children == null) {
                return null;
            }

            var result = [].concat(children).find(function (c) {
                return c.type !== Else ^ !_this4.props.condition;
            }) || null;
            return result;
        }
    }]);

    return If;
}(_react.Component);

var ThenOrElse = _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.instanceOf(Then), _react.PropTypes.instanceOf(Else)]);

If.propTypes = {
    condition: _react.PropTypes.bool.isRequired,
    children: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(ThenOrElse), ThenOrElse])
};

If.Then = Then;
If.Else = Else;

var Switch = exports.Switch = function (_Component4) {
    _inherits(Switch, _Component4);

    function Switch(props) {
        _classCallCheck(this, Switch);

        var _this5 = _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, props));

        _this5.getChildrens = _this5.getChildrens.bind(_this5);
        return _this5;
    }

    _createClass(Switch, [{
        key: 'getChildrens',
        value: function getChildrens() {
            var _this6 = this;

            var cases = [],
                defaults = [];

            Children.forEach(this.props.children, function (item) {
                switch (item.type.name) {
                    case 'Case':
                        if (_this6.props.condition === item.props.value) {
                            cases.push(item);
                        }
                        break;
                    case 'Default':
                        defaults.push(item);
                        break;
                }
            });

            if (cases.length > 0) {
                return cases;
            }
            return defaults;
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                { className: this.props.addClass ? this.props.addClass : '' },
                this.getChildrens().map(function (item, index) {
                    return item;
                })
            );
        }
    }]);

    return Switch;
}(_react.Component);

var Case = exports.Case = function (_Component5) {
    _inherits(Case, _Component5);

    function Case(props) {
        _classCallCheck(this, Case);

        return _possibleConstructorReturn(this, (Case.__proto__ || Object.getPrototypeOf(Case)).call(this, props));
    }

    _createClass(Case, [{
        key: 'render',
        value: function render() {
            return this.props.children;
        }
    }]);

    return Case;
}(_react.Component);

var Default = exports.Default = function (_Component6) {
    _inherits(Default, _Component6);

    function Default(props) {
        _classCallCheck(this, Default);

        return _possibleConstructorReturn(this, (Default.__proto__ || Object.getPrototypeOf(Default)).call(this, props));
    }

    _createClass(Default, [{
        key: 'render',
        value: function render() {
            return this.props.children;
        }
    }]);

    return Default;
}(_react.Component);

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Date utility
 */

var MILLISECONDS_IN_HOUR = 3600000;
var MILLISECONDS_IN_MINUTE = 60000;
var MILLISECONDS_IN_MINUTE = 60000;
var MILLISECONDS_IN_DAY = 86400000;
var MILLISECONDS_IN_MINUTE = 60000;
var MILLISECONDS_IN_WEEK = 604800000;
var MILLISECONDS_IN_HOUR = 3600000;
var MILLISECONDS_IN_WEEK = 604800000;
var MINUTES_IN_DAY = 1440;
var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
var MINUTES_IN_MONTH = 43200;
var MINUTES_IN_TWO_MONTHS = 86400;
var MINUTES_IN_DAY = 1440;
var MINUTES_IN_MONTH = 43200;
var MINUTES_IN_YEAR = 525600;
var MINUTES_IN_DAY = 1440;
var MINUTES_IN_MONTH = 43200;
var MINUTES_IN_YEAR = 525600;
var MILLISECONDS_IN_WEEK = 604800000;
var MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000;

var MILLISECONDS_IN_HOUR = 3600000;
var MILLISECONDS_IN_MINUTE = 60000;
var DEFAULT_ADDITIONAL_DIGITS = 2;

var parseTokenDateTimeDelimeter = /[T ]/;
var parseTokenPlainTime = /:/;

// year tokens
var parseTokenYY = /^(\d{2})$/;
var parseTokensYYY = [/^([+-]\d{2})$/, // 0 additional digits
/^([+-]\d{3})$/, // 1 additional digit
/^([+-]\d{4})$/ // 2 additional digits
];

var parseTokenYYYY = /^(\d{4})/;
var parseTokensYYYYY = [/^([+-]\d{4})/, // 0 additional digits
/^([+-]\d{5})/, // 1 additional digit
/^([+-]\d{6})/ // 2 additional digits
];

// date tokens
var parseTokenMM = /^-(\d{2})$/;
var parseTokenDDD = /^-?(\d{3})$/;
var parseTokenMMDD = /^-?(\d{2})-?(\d{2})$/;
var parseTokenWww = /^-?W(\d{2})$/;
var parseTokenWwwD = /^-?W(\d{2})-?(\d{1})$/;

// time tokens
var parseTokenHH = /^(\d{2}([.,]\d*)?)$/;
var parseTokenHHMM = /^(\d{2}):?(\d{2}([.,]\d*)?)$/;
var parseTokenHHMMSS = /^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/;

// timezone tokens
var parseTokenTimezone = /([Z+-].*)$/;
var parseTokenTimezoneZ = /^(Z)$/;
var parseTokenTimezoneHH = /^([+-])(\d{2})$/;
var parseTokenTimezoneHHMM = /^([+-])(\d{2}):?(\d{2})$/;

var formatters = {
    // Month: 1, 2, ..., 12
    'M': function M(date) {
        return date.getMonth() + 1;
    },

    // Month: 01, 02, ..., 12
    'MM': function MM(date) {
        return new AnterosDateUtils().addLeadingZeros(date.getMonth() + 1, 2);
    },

    // Quarter: 1, 2, 3, 4
    'Q': function Q(date) {
        return Math.ceil((date.getMonth() + 1) / 3);
    },

    // Day of month: 1, 2, ..., 31
    'D': function D(date) {
        return date.getDate();
    },

    // Day of month: 01, 02, ..., 31
    'DD': function DD(date) {
        return new AnterosDateUtils().addLeadingZeros(date.getDate(), 2);
    },

    // Day of year: 1, 2, ..., 366
    'DDD': function DDD(date) {
        return new AnterosDateUtils().getDayOfYear(date);
    },

    // Day of year: 001, 002, ..., 366
    'DDDD': function DDDD(date) {
        return new AnterosDateUtils().addLeadingZeros(new AnterosDateUtils().getDayOfYear(date), 3);
    },

    // Day of week: 0, 1, ..., 6
    'd': function d(date) {
        return date.getDay();
    },

    // Day of ISO week: 1, 2, ..., 7
    'E': function E(date) {
        return date.getDay() || 7;
    },

    // ISO week: 1, 2, ..., 53
    'W': function W(date) {
        return getISOWeek(date);
    },

    // ISO week: 01, 02, ..., 53
    'WW': function WW(date) {
        return new AnterosDateUtils().addLeadingZeros(new AnterosDateUtils().getISOWeek(date), 2);
    },

    // Year: 00, 01, ..., 99
    'YY': function YY(date) {
        return new AnterosDateUtils().addLeadingZeros(date.getFullYear(), 4).substr(2);
    },

    // Year: 1900, 1901, ..., 2099
    'YYYY': function YYYY(date) {
        return new AnterosDateUtils().addLeadingZeros(date.getFullYear(), 4);
    },

    // ISO week-numbering year: 00, 01, ..., 99
    'GG': function GG(date) {
        return String(new AnterosDateUtils().getISOYear(date)).substr(2);
    },

    // ISO week-numbering year: 1900, 1901, ..., 2099
    'GGGG': function GGGG(date) {
        return new AnterosDateUtils().getISOYear(date);
    },

    // Hour: 0, 1, ... 23
    'H': function H(date) {
        return date.getHours();
    },

    // Hour: 00, 01, ..., 23
    'HH': function HH(date) {
        return new AnterosDateUtils().addLeadingZeros(date.getHours(), 2);
    },

    // Hour: 1, 2, ..., 12
    'h': function h(date) {
        var hours = date.getHours();
        if (hours === 0) {
            return 12;
        } else if (hours > 12) {
            return hours % 12;
        } else {
            return hours;
        }
    },

    // Hour: 01, 02, ..., 12
    'hh': function hh(date) {
        return new AnterosDateUtils().addLeadingZeros(formatters['h'](date), 2);
    },

    // Minute: 0, 1, ..., 59
    'm': function m(date) {
        return date.getMinutes();
    },

    // Minute: 00, 01, ..., 59
    'mm': function mm(date) {
        return new AnterosDateUtils().addLeadingZeros(date.getMinutes(), 2);
    },

    // Second: 0, 1, ..., 59
    's': function s(date) {
        return date.getSeconds();
    },

    // Second: 00, 01, ..., 59
    'ss': function ss(date) {
        return new AnterosDateUtils().addLeadingZeros(date.getSeconds(), 2);
    },

    // 1/10 of second: 0, 1, ..., 9
    'S': function S(date) {
        return Math.floor(date.getMilliseconds() / 100);
    },

    // 1/100 of second: 00, 01, ..., 99
    'SS': function SS(date) {
        return new AnterosDateUtils().addLeadingZeros(Math.floor(date.getMilliseconds() / 10), 2);
    },

    // Millisecond: 000, 001, ..., 999
    'SSS': function SSS(date) {
        return new AnterosDateUtils().addLeadingZeros(date.getMilliseconds(), 3);
    },

    // Timezone: -01:00, +00:00, ... +12:00
    'Z': function Z(date) {
        return new AnterosDateUtils().formatTimezone(date.getTimezoneOffset(), ':');
    },

    // Timezone: -0100, +0000, ... +1200
    'ZZ': function ZZ(date) {
        return new AnterosDateUtils().formatTimezone(date.getTimezoneOffset());
    },

    // Seconds timestamp: 512969520
    'X': function X(date) {
        return Math.floor(date.getTime() / 1000);
    },

    // Milliseconds timestamp: 512969520900
    'x': function x(date) {
        return date.getTime();
    }
};

var commonFormatterKeys = ['M', 'MM', 'Q', 'D', 'DD', 'DDD', 'DDDD', 'd', 'E', 'W', 'WW', 'YY', 'YYYY', 'GG', 'GGGG', 'H', 'HH', 'h', 'hh', 'm', 'mm', 's', 'ss', 'S', 'SS', 'SSS', 'Z', 'ZZ', 'X', 'x'];

var AnterosDateUtils = function () {
    function AnterosDateUtils() {
        _classCallCheck(this, AnterosDateUtils);
    }
    /**
     * @summary Add the specified number of days to the given date.
     *
     * @description
     * Add the specified number of days to the given date.
     *
     * @param {Date|String|Number} date - the date to be changed
     * @param {Number} amount - the amount of days to be added
     * @returns {Date} the new date with the days added
     *
     * @example
     * // Add 10 days to 1 September 2014:
     * var result = addDays(new Date(2014, 8, 1), 10)
     * //=> Thu Sep 11 2014 00:00:00
     */


    _createClass(AnterosDateUtils, [{
        key: 'addDays',
        value: function addDays(dirtyDate, dirtyAmount) {
            var date = this.parse(dirtyDate);
            var amount = Number(dirtyAmount);
            date.setDate(date.getDate() + amount);
            return date;
        }

        /**
         * @summary Add the specified number of hours to the given date.
         *
         * @description
         * Add the specified number of hours to the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of hours to be added
         * @returns {Date} the new date with the hours added
         *
         * @example
         * // Add 2 hours to 10 July 2014 23:00:00:
         * var result = addHours(new Date(2014, 6, 10, 23, 0), 2)
         * //=> Fri Jul 11 2014 01:00:00
         */

    }, {
        key: 'addHours',
        value: function addHours(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);
        }

        /**
         * @summary Add the specified number of ISO week-numbering years to the given date.
         *
         * @description
         * Add the specified number of ISO week-numbering years to the given date.
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of ISO week-numbering years to be added
         * @returns {Date} the new date with the ISO week-numbering years added
         *
         * @example
         * // Add 5 ISO week-numbering years to 2 July 2010:
         * var result = addISOYears(new Date(2010, 6, 2), 5)
         * //=> Fri Jun 26 2015 00:00:00
         */

    }, {
        key: 'addISOYears',
        value: function addISOYears(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            return setISOYear(dirtyDate, getISOYear(dirtyDate) + amount);
        }

        /**
         * @summary Add the specified number of milliseconds to the given date.
         *
         * @description
         * Add the specified number of milliseconds to the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of milliseconds to be added
         * @returns {Date} the new date with the milliseconds added
         *
         * @example
         * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
         * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
         * //=> Thu Jul 10 2014 12:45:30.750
         */

    }, {
        key: 'addMilliseconds',
        value: function addMilliseconds(dirtyDate, dirtyAmount) {
            var timestamp = this.parse(dirtyDate).getTime();
            var amount = Number(dirtyAmount);
            return new Date(timestamp + amount);
        }

        /**
         * @summary Add the specified number of minutes to the given date.
         *
         * @description
         * Add the specified number of minutes to the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of minutes to be added
         * @returns {Date} the new date with the minutes added
         *
         * @example
         * // Add 30 minutes to 10 July 2014 12:00:00:
         * var result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)
         * //=> Thu Jul 10 2014 12:30:00
         */

    }, {
        key: 'addMinutes',
        value: function addMinutes(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            return this.addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
        }

        /**
         * @summary Add the specified number of months to the given date.
         *
         * @description
         * Add the specified number of months to the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of months to be added
         * @returns {Date} the new date with the months added
         *
         * @example
         * // Add 5 months to 1 September 2014:
         * var result = addMonths(new Date(2014, 8, 1), 5)
         * //=> Sun Feb 01 2015 00:00:00
         */

    }, {
        key: 'addMonths',
        value: function addMonths(dirtyDate, dirtyAmount) {
            var date = this.parse(dirtyDate);
            var amount = Number(dirtyAmount);
            var desiredMonth = date.getMonth() + amount;
            var dateWithDesiredMonth = new Date(0);
            dateWithDesiredMonth.setFullYear(date.getFullYear(), desiredMonth, 1);
            dateWithDesiredMonth.setHours(0, 0, 0, 0);
            var daysInMonth = this.getDaysInMonth(dateWithDesiredMonth);
            // Set the last day of the new month
            // if the original date was the last day of the longer month
            date.setMonth(desiredMonth, Math.min(daysInMonth, date.getDate()));
            return date;
        }

        /**
         * @summary Add the specified number of year quarters to the given date.
         *
         * @description
         * Add the specified number of year quarters to the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of quarters to be added
         * @returns {Date} the new date with the quarters added
         *
         * @example
         * // Add 1 quarter to 1 September 2014:
         * var result = addQuarters(new Date(2014, 8, 1), 1)
         * //=> Mon Dec 01 2014 00:00:00
         */

    }, {
        key: 'addQuarters',
        value: function addQuarters(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            var months = amount * 3;
            return this.addMonths(dirtyDate, months);
        }

        /**
         * @summary Add the specified number of seconds to the given date.
         *
         * @description
         * Add the specified number of seconds to the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of seconds to be added
         * @returns {Date} the new date with the seconds added
         *
         * @example
         * // Add 30 seconds to 10 July 2014 12:45:00:
         * var result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
         * //=> Thu Jul 10 2014 12:45:30
         */

    }, {
        key: 'addSeconds',
        value: function addSeconds(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            return this.addMilliseconds(dirtyDate, amount * 1000);
        }

        /**
         * @summary Add the specified number of weeks to the given date.
         *
         * @description
         * Add the specified number of week to the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of weeks to be added
         * @returns {Date} the new date with the weeks added
         *
         * @example
         * // Add 4 weeks to 1 September 2014:
         * var result = addWeeks(new Date(2014, 8, 1), 4)
         * //=> Mon Sep 29 2014 00:00:00
         */

    }, {
        key: 'addWeeks',
        value: function addWeeks(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            var days = amount * 7;
            return this.addDays(dirtyDate, days);
        }

        /**
         * @summary Add the specified number of years to the given date.
         *
         * @description
         * Add the specified number of years to the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of years to be added
         * @returns {Date} the new date with the years added
         *
         * @example
         * // Add 5 years to 1 September 2014:
         * var result = addYears(new Date(2014, 8, 1), 5)
         * //=> Sun Sep 01 2019 00:00:00
         */

    }, {
        key: 'addYears',
        value: function addYears(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            return this.addMonths(dirtyDate, amount * 12);
        }

        /**
         * @summary Is the given date range overlapping with another date range?
         *
         * @description
         * Is the given date range overlapping with another date range?
         *
         * @param {Date|String|Number} initialRangeStartDate - the start of the initial range
         * @param {Date|String|Number} initialRangeEndDate - the end of the initial range
         * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with
         * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with
         * @returns {Boolean} whether the date ranges are overlapping
         * @throws {Error} startDate of a date range cannot be after its endDate
         *
         * @example
         * // For overlapping date ranges:
         * areRangesOverlapping(
         *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)
         * )
         * //=> true
         *
         * @example
         * // For non-overlapping date ranges:
         * areRangesOverlapping(
         *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)
         * )
         * //=> false
         */

    }, {
        key: 'areRangesOverlapping',
        value: function areRangesOverlapping(dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {
            var initialStartTime = this.parse(dirtyInitialRangeStartDate).getTime();
            var initialEndTime = this.parse(dirtyInitialRangeEndDate).getTime();
            var comparedStartTime = this.parse(dirtyComparedRangeStartDate).getTime();
            var comparedEndTime = this.parse(dirtyComparedRangeEndDate).getTime();

            if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {
                throw new Error('The start of the range cannot be after the end of the range');
            }

            return initialStartTime < comparedEndTime && comparedStartTime < initialEndTime;
        }

        /**
         * @summary Return an index of the closest date from the array comparing to the given date.
         *
         * @description
         * Return an index of the closest date from the array comparing to the given date.
         *
         * @param {Date|String|Number} dateToCompare - the date to compare with
         * @param {Date[]|String[]|Number[]} datesArray - the array to search
         * @returns {Number} an index of the date closest to the given date
         * @throws {TypeError} the second argument must be an instance of Array
         *
         * @example
         * // Which date is closer to 6 September 2015?
         * var dateToCompare = new Date(2015, 8, 6)
         * var datesArray = [
         *   new Date(2015, 0, 1),
         *   new Date(2016, 0, 1),
         *   new Date(2017, 0, 1)
         * ]
         * var result = closestIndexTo(dateToCompare, datesArray)
         * //=> 1
         */

    }, {
        key: 'closestIndexTo',
        value: function closestIndexTo(dirtyDateToCompare, dirtyDatesArray) {
            if (!(dirtyDatesArray instanceof Array)) {
                throw new TypeError(toString.call(dirtyDatesArray) + ' is not an instance of Array');
            }

            var dateToCompare = this.parse(dirtyDateToCompare);
            var timeToCompare = dateToCompare.getTime();

            var result;
            var minDistance;

            dirtyDatesArray.forEach(function (dirtyDate, index) {
                var currentDate = this.parse(dirtyDate);
                var distance = Math.abs(timeToCompare - currentDate.getTime());
                if (result === undefined || distance < minDistance) {
                    result = index;
                    minDistance = distance;
                }
            });

            return result;
        }

        /**
         * @summary Return a date from the array closest to the given date.
         *
         * @description
         * Return a date from the array closest to the given date.
         *
         * @param {Date|String|Number} dateToCompare - the date to compare with
         * @param {Date[]|String[]|Number[]} datesArray - the array to search
         * @returns {Date} the date from the array closest to the given date
         * @throws {TypeError} the second argument must be an instance of Array
         *
         * @example
         * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?
         * var dateToCompare = new Date(2015, 8, 6)
         * var result = closestTo(dateToCompare, [
         *   new Date(2000, 0, 1),
         *   new Date(2030, 0, 1)
         * ])
         * //=> Tue Jan 01 2030 00:00:00
         */

    }, {
        key: 'closestTo',
        value: function closestTo(dirtyDateToCompare, dirtyDatesArray) {
            if (!(dirtyDatesArray instanceof Array)) {
                throw new TypeError(toString.call(dirtyDatesArray) + ' is not an instance of Array');
            }

            var dateToCompare = this.parse(dirtyDateToCompare);
            var timeToCompare = dateToCompare.getTime();

            var result;
            var minDistance;

            dirtyDatesArray.forEach(function (dirtyDate) {
                var currentDate = this.parse(dirtyDate);
                var distance = Math.abs(timeToCompare - currentDate.getTime());
                if (result === undefined || distance < minDistance) {
                    result = currentDate;
                    minDistance = distance;
                }
            });

            return result;
        }

        /**
         * @summary Compare the two dates and return -1, 0 or 1.
         *
         * @description
         * Compare the two dates and return 1 if the first date is after the second,
         * -1 if the first date is before the second or 0 if dates are equal.
         *
         * @param {Date|String|Number} dateLeft - the first date to compare
         * @param {Date|String|Number} dateRight - the second date to compare
         * @returns {Number} the result of the comparison
         *
         * @example
         * // Compare 11 February 1987 and 10 July 1989:
         * var result = compareAsc(
         *   new Date(1987, 1, 11),
         *   new Date(1989, 6, 10)
         * )
         * //=> -1
         *
         * @example
         * // Sort the array of dates:
         * var result = [
         *   new Date(1995, 6, 2),
         *   new Date(1987, 1, 11),
         *   new Date(1989, 6, 10)
         * ].sort(compareAsc)
         * //=> [
         * //   Wed Feb 11 1987 00:00:00,
         * //   Mon Jul 10 1989 00:00:00,
         * //   Sun Jul 02 1995 00:00:00
         * // ]
         */

    }, {
        key: 'compareAsc',
        value: function compareAsc(dirtyDateLeft, dirtyDateRight) {
            var dateLeft = this.parse(dirtyDateLeft);
            var timeLeft = dateLeft.getTime();
            var dateRight = this.parse(dirtyDateRight);
            var timeRight = dateRight.getTime();

            if (timeLeft < timeRight) {
                return -1;
            } else if (timeLeft > timeRight) {
                return 1;
            } else {
                return 0;
            }
        }

        /**
         * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.
         *
         * @description
         * Compare the two dates and return -1 if the first date is after the second,
         * 1 if the first date is before the second or 0 if dates are equal.
         *
         * @param {Date|String|Number} dateLeft - the first date to compare
         * @param {Date|String|Number} dateRight - the second date to compare
         * @returns {Number} the result of the comparison
         *
         * @example
         * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:
         * var result = compareDesc(
         *   new Date(1987, 1, 11),
         *   new Date(1989, 6, 10)
         * )
         * //=> 1
         *
         * @example
         * // Sort the array of dates in reverse chronological order:
         * var result = [
         *   new Date(1995, 6, 2),
         *   new Date(1987, 1, 11),
         *   new Date(1989, 6, 10)
         * ].sort(compareDesc)
         * //=> [
         * //   Sun Jul 02 1995 00:00:00,
         * //   Mon Jul 10 1989 00:00:00,
         * //   Wed Feb 11 1987 00:00:00
         * // ]
         */

    }, {
        key: 'compareDesc',
        value: function compareDesc(dirtyDateLeft, dirtyDateRight) {
            var dateLeft = this.parse(dirtyDateLeft);
            var timeLeft = dateLeft.getTime();
            var dateRight = this.parse(dirtyDateRight);
            var timeRight = dateRight.getTime();

            if (timeLeft > timeRight) {
                return -1;
            } else if (timeLeft < timeRight) {
                return 1;
            } else {
                return 0;
            }
        }

        /**
         * @summary Get the number of calendar days between the given dates.
         *
         * @description
         * Get the number of calendar days between the given dates.
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of calendar days
         *
         * @example
         * // How many calendar days are between
         * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
         * var result = differenceInCalendarDays(
         *   new Date(2012, 6, 2, 0, 0),
         *   new Date(2011, 6, 2, 23, 0)
         * )
         * //=> 366
         */

    }, {
        key: 'differenceInCalendarDays',
        value: function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
            var startOfDayLeft = this.startOfDay(dirtyDateLeft);
            var startOfDayRight = this.startOfDay(dirtyDateRight);

            var timestampLeft = startOfDayLeft.getTime() - startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;
            var timestampRight = startOfDayRight.getTime() - startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;

            // Round the number of days to the nearest integer
            // because the number of milliseconds in a day is not constant
            // (e.g. it's different in the day of the daylight saving time clock shift)
            return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
        }

        /**
         * @summary Get the number of calendar ISO weeks between the given dates.
         *
         * @description
         * Get the number of calendar ISO weeks between the given dates.
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of calendar ISO weeks
         *
         * @example
         * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?
         * var result = differenceInCalendarISOWeeks(
         *   new Date(2014, 6, 21),
         *   new Date(2014, 6, 6)
         * )
         * //=> 3
         */

    }, {
        key: 'differenceInCalendarISOWeeks',
        value: function differenceInCalendarISOWeeks(dirtyDateLeft, dirtyDateRight) {
            var startOfISOWeekLeft = this.startOfISOWeek(dirtyDateLeft);
            var startOfISOWeekRight = this.startOfISOWeek(dirtyDateRight);

            var timestampLeft = startOfISOWeekLeft.getTime() - startOfISOWeekLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;
            var timestampRight = startOfISOWeekRight.getTime() - startOfISOWeekRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;

            // Round the number of days to the nearest integer
            // because the number of milliseconds in a week is not constant
            // (e.g. it's different in the week of the daylight saving time clock shift)
            return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);
        }

        /**
         * @summary Get the number of calendar ISO week-numbering years between the given dates.
         *
         * @description
         * Get the number of calendar ISO week-numbering years between the given dates.
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of calendar ISO week-numbering years
         *
         * @example
         * // How many calendar ISO week-numbering years are 1 January 2010 and 1 January 2012?
         * var result = differenceInCalendarISOYears(
         *   new Date(2012, 0, 1),
         *   new Date(2010, 0, 1)
         * )
         * //=> 2
         */

    }, {
        key: 'differenceInCalendarISOYears',
        value: function differenceInCalendarISOYears(dirtyDateLeft, dirtyDateRight) {
            return this.getISOYear(dirtyDateLeft) - this.getISOYear(dirtyDateRight);
        }

        /**
         * @summary Get the number of calendar months between the given dates.
         *
         * @description
         * Get the number of calendar months between the given dates.
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of calendar months
         *
         * @example
         * // How many calendar months are between 31 January 2014 and 1 September 2014?
         * var result = differenceInCalendarMonths(
         *   new Date(2014, 8, 1),
         *   new Date(2014, 0, 31)
         * )
         * //=> 8
         */

    }, {
        key: 'differenceInCalendarMonths',
        value: function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
            var dateLeft = this.parse(dirtyDateLeft);
            var dateRight = this.parse(dirtyDateRight);

            var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
            var monthDiff = dateLeft.getMonth() - dateRight.getMonth();

            return yearDiff * 12 + monthDiff;
        }

        /**
         * @summary Get the number of calendar quarters between the given dates.
         *
         * @description
         * Get the number of calendar quarters between the given dates.
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of calendar quarters
         *
         * @example
         * // How many calendar quarters are between 31 December 2013 and 2 July 2014?
         * var result = differenceInCalendarQuarters(
         *   new Date(2014, 6, 2),
         *   new Date(2013, 11, 31)
         * )
         * //=> 3
         */

    }, {
        key: 'differenceInCalendarQuarters',
        value: function differenceInCalendarQuarters(dirtyDateLeft, dirtyDateRight) {
            var dateLeft = this.parse(dirtyDateLeft);
            var dateRight = this.parse(dirtyDateRight);

            var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
            var quarterDiff = this.getQuarter(dateLeft) - this.getQuarter(dateRight);

            return yearDiff * 4 + quarterDiff;
        }

        /**
         * @summary Get the number of calendar weeks between the given dates.
         *
         * @description
         * Get the number of calendar weeks between the given dates.
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @param {Object} [options] - the object with options
         * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
         * @returns {Number} the number of calendar weeks
         *
         * @example
         * // How many calendar weeks are between 5 July 2014 and 20 July 2014?
         * var result = differenceInCalendarWeeks(
         *   new Date(2014, 6, 20),
         *   new Date(2014, 6, 5)
         * )
         * //=> 3
         *
         * @example
         * // If the week starts on Monday,
         * // how many calendar weeks are between 5 July 2014 and 20 July 2014?
         * var result = differenceInCalendarWeeks(
         *   new Date(2014, 6, 20),
         *   new Date(2014, 6, 5),
         *   {weekStartsOn: 1}
         * )
         * //=> 2
         */

    }, {
        key: 'differenceInCalendarWeeks',
        value: function differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, dirtyOptions) {
            var startOfWeekLeft = this.startOfWeek(dirtyDateLeft, dirtyOptions);
            var startOfWeekRight = this.startOfWeek(dirtyDateRight, dirtyOptions);

            var timestampLeft = startOfWeekLeft.getTime() - startOfWeekLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;
            var timestampRight = startOfWeekRight.getTime() - startOfWeekRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;

            // Round the number of days to the nearest integer
            // because the number of milliseconds in a week is not constant
            // (e.g. it's different in the week of the daylight saving time clock shift)
            return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);
        }

        /**
         * @summary Get the number of calendar years between the given dates.
         *
         * @description
         * Get the number of calendar years between the given dates.
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of calendar years
         *
         * @example
         * // How many calendar years are between 31 December 2013 and 11 February 2015?
         * var result = differenceInCalendarYears(
         *   new Date(2015, 1, 11),
         *   new Date(2013, 11, 31)
         * )
         * //=> 2
         */

    }, {
        key: 'differenceInCalendarYears',
        value: function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
            var dateLeft = this.parse(dirtyDateLeft);
            var dateRight = this.parse(dirtyDateRight);

            return dateLeft.getFullYear() - dateRight.getFullYear();
        }

        /**
         * @summary Get the number of full days between the given dates.
         *
         * @description
         * Get the number of full days between the given dates.
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of full days
         *
         * @example
         * // How many full days are between
         * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
         * var result = differenceInDays(
         *   new Date(2012, 6, 2, 0, 0),
         *   new Date(2011, 6, 2, 23, 0)
         * )
         * //=> 365
         */

    }, {
        key: 'differenceInDays',
        value: function differenceInDays(dirtyDateLeft, dirtyDateRight) {
            var dateLeft = this.parse(dirtyDateLeft);
            var dateRight = this.parse(dirtyDateRight);

            var sign = this.compareAsc(dateLeft, dateRight);
            var difference = Math.abs(this.differenceInCalendarDays(dateLeft, dateRight));
            dateLeft.setDate(dateLeft.getDate() - sign * difference);

            // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full
            // If so, result must be decreased by 1 in absolute value
            var isLastDayNotFull = this.compareAsc(dateLeft, dateRight) === -sign;
            return sign * (difference - isLastDayNotFull);
        }

        /**
         * @summary Get the number of hours between the given dates.
         *
         * @description
         * Get the number of hours between the given dates.
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of hours
         *
         * @example
         * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?
         * var result = differenceInHours(
         *   new Date(2014, 6, 2, 19, 0),
         *   new Date(2014, 6, 2, 6, 50)
         * )
         * //=> 12
         */

    }, {
        key: 'differenceInHours',
        value: function differenceInHours(dirtyDateLeft, dirtyDateRight) {
            var diff = this.differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_HOUR;
            return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
        }

        /**
         * @summary Get the number of full ISO week-numbering years between the given dates.
         *
         * @description
         * Get the number of full ISO week-numbering years between the given dates.
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of full ISO week-numbering years
         *
         * @example
         * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?
         * var result = differenceInISOYears(
         *   new Date(2012, 0, 1),
         *   new Date(2010, 0, 1)
         * )
         * //=> 1
         */

    }, {
        key: 'differenceInISOYears',
        value: function differenceInISOYears(dirtyDateLeft, dirtyDateRight) {
            var dateLeft = this.parse(dirtyDateLeft);
            var dateRight = this.parse(dirtyDateRight);

            var sign = this.compareAsc(dateLeft, dateRight);
            var difference = Math.abs(this.differenceInCalendarISOYears(dateLeft, dateRight));
            dateLeft = this.subISOYears(dateLeft, sign * difference);

            // Math.abs(diff in full ISO years - diff in calendar ISO years) === 1
            // if last calendar ISO year is not full
            // If so, result must be decreased by 1 in absolute value
            var isLastISOYearNotFull = this.compareAsc(dateLeft, dateRight) === -sign;
            return sign * (difference - isLastISOYearNotFull);
        }

        /**
         * @summary Get the number of milliseconds between the given dates.
         *
         * @description
         * Get the number of milliseconds between the given dates.
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of milliseconds
         *
         * @example
         * // How many milliseconds are between
         * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
         * var result = differenceInMilliseconds(
         *   new Date(2014, 6, 2, 12, 30, 21, 700),
         *   new Date(2014, 6, 2, 12, 30, 20, 600)
         * )
         * //=> 1100
         */

    }, {
        key: 'differenceInMilliseconds',
        value: function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {
            var dateLeft = this.parse(dirtyDateLeft);
            var dateRight = this.parse(dirtyDateRight);
            return dateLeft.getTime() - dateRight.getTime();
        }

        /**
         * @summary Get the number of minutes between the given dates.
         *
         * @description
         * Get the number of minutes between the given dates.
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of minutes
         *
         * @example
         * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?
         * var result = differenceInMinutes(
         *   new Date(2014, 6, 2, 12, 20, 0),
         *   new Date(2014, 6, 2, 12, 7, 59)
         * )
         * //=> 12
         */

    }, {
        key: 'differenceInMinutes',
        value: function differenceInMinutes(dirtyDateLeft, dirtyDateRight) {
            var diff = this.differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_MINUTE;
            return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
        }

        /**
         * @summary Get the number of full months between the given dates.
         *
         * @description
         * Get the number of full months between the given dates.
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of full months
         *
         * @example
         * // How many full months are between 31 January 2014 and 1 September 2014?
         * var result = differenceInMonths(
         *   new Date(2014, 8, 1),
         *   new Date(2014, 0, 31)
         * )
         * //=> 7
         */

    }, {
        key: 'differenceInMonths',
        value: function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
            var dateLeft = this.parse(dirtyDateLeft);
            var dateRight = this.parse(dirtyDateRight);

            var sign = this.compareAsc(dateLeft, dateRight);
            var difference = Math.abs(this.differenceInCalendarMonths(dateLeft, dateRight));
            dateLeft.setMonth(dateLeft.getMonth() - sign * difference);

            // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
            // If so, result must be decreased by 1 in absolute value
            var isLastMonthNotFull = this.compareAsc(dateLeft, dateRight) === -sign;
            return sign * (difference - isLastMonthNotFull);
        }

        /**
         * @summary Get the number of full quarters between the given dates.
         *
         * @description
         * Get the number of full quarters between the given dates.
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of full quarters
         *
         * @example
         * // How many full quarters are between 31 December 2013 and 2 July 2014?
         * var result = differenceInQuarters(
         *   new Date(2014, 6, 2),
         *   new Date(2013, 11, 31)
         * )
         * //=> 2
         */

    }, {
        key: 'differenceInQuarters',
        value: function differenceInQuarters(dirtyDateLeft, dirtyDateRight) {
            var diff = this.differenceInMonths(dirtyDateLeft, dirtyDateRight) / 3;
            return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
        }

        /**
         * @summary Get the number of seconds between the given dates.
         *
         * @description
         * Get the number of seconds between the given dates.
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of seconds
         *
         * @example
         * // How many seconds are between
         * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
         * var result = differenceInSeconds(
         *   new Date(2014, 6, 2, 12, 30, 20, 0),
         *   new Date(2014, 6, 2, 12, 30, 7, 999)
         * )
         * //=> 12
         */

    }, {
        key: 'differenceInSeconds',
        value: function differenceInSeconds(dirtyDateLeft, dirtyDateRight) {
            var diff = this.differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000;
            return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
        }

        /**
         * @summary Get the number of full weeks between the given dates.
         *
         * @description
         * Get the number of full weeks between the given dates.
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of full weeks
         *
         * @example
         * // How many full weeks are between 5 July 2014 and 20 July 2014?
         * var result = differenceInWeeks(
         *   new Date(2014, 6, 20),
         *   new Date(2014, 6, 5)
         * )
         * //=> 2
         */

    }, {
        key: 'differenceInWeeks',
        value: function differenceInWeeks(dirtyDateLeft, dirtyDateRight) {
            var diff = this.differenceInDays(dirtyDateLeft, dirtyDateRight) / 7;
            return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
        }

        /**
         * @summary Get the number of full years between the given dates.
         *
         * @description
         * Get the number of full years between the given dates.
         *
         * @param {Date|String|Number} dateLeft - the later date
         * @param {Date|String|Number} dateRight - the earlier date
         * @returns {Number} the number of full years
         *
         * @example
         * // How many full years are between 31 December 2013 and 11 February 2015?
         * var result = differenceInYears(
         *   new Date(2015, 1, 11),
         *   new Date(2013, 11, 31)
         * )
         * //=> 1
         */

    }, {
        key: 'differenceInYears',
        value: function differenceInYears(dirtyDateLeft, dirtyDateRight) {
            var dateLeft = this.parse(dirtyDateLeft);
            var dateRight = this.parse(dirtyDateRight);

            var sign = this.compareAsc(dateLeft, dateRight);
            var difference = Math.abs(this.differenceInCalendarYears(dateLeft, dateRight));
            dateLeft.setFullYear(dateLeft.getFullYear() - sign * difference);

            // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full
            // If so, result must be decreased by 1 in absolute value
            var isLastYearNotFull = this.compareAsc(dateLeft, dateRight) === -sign;
            return sign * (difference - isLastYearNotFull);
        }

        /**
         * @summary Return the distance between the given dates in words.
         *
         * @description
         * Return the distance between the given dates in words.
         *
         * | Distance between dates                                            | Result              |
         * |-------------------------------------------------------------------|---------------------|
         * | 0 ... 30 secs                                                     | less than a minute  |
         * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
         * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
         * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
         * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
         * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
         * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
         * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
         * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
         * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
         * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
         * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
         * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
         * | N yrs ... N yrs 3 months                                          | about N years       |
         * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
         * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
         *
         * With `options.includeSeconds == true`:
         * | Distance between dates | Result               |
         * |------------------------|----------------------|
         * | 0 secs ... 5 secs      | less than 5 seconds  |
         * | 5 secs ... 10 secs     | less than 10 seconds |
         * | 10 secs ... 20 secs    | less than 20 seconds |
         * | 20 secs ... 40 secs    | half a minute        |
         * | 40 secs ... 60 secs    | less than a minute   |
         * | 60 secs ... 90 secs    | 1 minute             |
         *
         * @param {Date|String|Number} dateToCompare - the date to compare with
         * @param {Date|String|Number} date - the other date
         * @param {Object} [options] - the object with options
         * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
         * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first
         * @param {Object} [options.locale=enLocale] - the locale object
         * @returns {String} the distance in words
         *
         * @example
         * // What is the distance between 2 July 2014 and 1 January 2015?
         * var result = distanceInWords(
         *   new Date(2014, 6, 2),
         *   new Date(2015, 0, 1)
         * )
         * //=> '6 months'
         *
         * @example
         * // What is the distance between 1 January 2015 00:00:15
         * // and 1 January 2015 00:00:00, including seconds?
         * var result = distanceInWords(
         *   new Date(2015, 0, 1, 0, 0, 15),
         *   new Date(2015, 0, 1, 0, 0, 0),
         *   {includeSeconds: true}
         * )
         * //=> 'less than 20 seconds'
         *
         * @example
         * // What is the distance from 1 January 2016
         * // to 1 January 2015, with a suffix?
         * var result = distanceInWords(
         *   new Date(2016, 0, 1),
         *   new Date(2015, 0, 1),
         *   {addSuffix: true}
         * )
         * //=> 'about 1 year ago'
         *
         * @example
         * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
         * var eoLocale = require('date-fns/locale/eo')
         * var result = distanceInWords(
         *   new Date(2016, 7, 1),
         *   new Date(2015, 0, 1),
         *   {locale: eoLocale}
         * )
         * //=> 'pli ol 1 jaro'
         */

    }, {
        key: 'distanceInWords',
        value: function distanceInWords(dirtyDateToCompare, dirtyDate, dirtyOptions) {
            var options = dirtyOptions || {};

            var comparison = this.compareDesc(dirtyDateToCompare, dirtyDate);

            var locale = options.locale;
            var localize = this.buildDistanceInWordsLocale().localize;
            if (locale && locale.distanceInWords && locale.distanceInWords.localize) {
                localize = locale.distanceInWords.localize;
            }

            var localizeOptions = {
                addSuffix: Boolean(options.addSuffix),
                comparison: comparison
            };

            var dateLeft, dateRight;
            if (comparison > 0) {
                dateLeft = this.parse(dirtyDateToCompare);
                dateRight = this.parse(dirtyDate);
            } else {
                dateLeft = this.parse(dirtyDate);
                dateRight = this.parse(dirtyDateToCompare);
            }

            var seconds = this.differenceInSeconds(dateRight, dateLeft);
            var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset();
            var minutes = Math.round(seconds / 60) - offset;
            var months;

            // 0 up to 2 mins
            if (minutes < 2) {
                if (options.includeSeconds) {
                    if (seconds < 5) {
                        return this.localize('lessThanXSeconds', 5, localizeOptions);
                    } else if (seconds < 10) {
                        return this.localize('lessThanXSeconds', 10, localizeOptions);
                    } else if (seconds < 20) {
                        return this.localize('lessThanXSeconds', 20, localizeOptions);
                    } else if (seconds < 40) {
                        return this.localize('halfAMinute', null, localizeOptions);
                    } else if (seconds < 60) {
                        return this.localize('lessThanXMinutes', 1, localizeOptions);
                    } else {
                        return this.localize('xMinutes', 1, localizeOptions);
                    }
                } else {
                    if (minutes === 0) {
                        return this.localize('lessThanXMinutes', 1, localizeOptions);
                    } else {
                        return this.localize('xMinutes', minutes, localizeOptions);
                    }
                }

                // 2 mins up to 0.75 hrs
            } else if (minutes < 45) {
                return this.localize('xMinutes', minutes, localizeOptions);

                // 0.75 hrs up to 1.5 hrs
            } else if (minutes < 90) {
                return this.localize('aboutXHours', 1, localizeOptions);

                // 1.5 hrs up to 24 hrs
            } else if (minutes < MINUTES_IN_DAY) {
                var hours = Math.round(minutes / 60);
                return this.localize('aboutXHours', hours, localizeOptions);

                // 1 day up to 1.75 days
            } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
                return this.localize('xDays', 1, localizeOptions);

                // 1.75 days up to 30 days
            } else if (minutes < MINUTES_IN_MONTH) {
                var days = Math.round(minutes / MINUTES_IN_DAY);
                return this.localize('xDays', days, localizeOptions);

                // 1 month up to 2 months
            } else if (minutes < MINUTES_IN_TWO_MONTHS) {
                months = Math.round(minutes / MINUTES_IN_MONTH);
                return this.localize('aboutXMonths', months, localizeOptions);
            }

            months = this.differenceInMonths(dateRight, dateLeft);

            // 2 months up to 12 months
            if (months < 12) {
                var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
                return this.localize('xMonths', nearestMonth, localizeOptions);

                // 1 year up to max Date
            } else {
                var monthsSinceStartOfYear = months % 12;
                var years = Math.floor(months / 12);

                // N years up to 1 years 3 months
                if (monthsSinceStartOfYear < 3) {
                    return this.localize('aboutXYears', years, localizeOptions);

                    // N years 3 months up to N years 9 months
                } else if (monthsSinceStartOfYear < 9) {
                    return this.localize('overXYears', years, localizeOptions);

                    // N years 9 months up to N year 12 months
                } else {
                    return this.localize('almostXYears', years + 1, localizeOptions);
                }
            }
        }

        /**
         * @summary Return the distance between the given dates in words.
         *
         * @description
         * Return the distance between the given dates in words, using strict units.
         * This is like `distanceInWords`, but does not use helpers like 'almost', 'over',
         * 'less than' and the like.
         *
         * | Distance between dates | Result              |
         * |------------------------|---------------------|
         * | 0 ... 59 secs          | [0..59] seconds     |
         * | 1 ... 59 mins          | [1..59] minutes     |
         * | 1 ... 23 hrs           | [1..23] hours       |
         * | 1 ... 29 days          | [1..29] days        |
         * | 1 ... 11 months        | [1..11] months      |
         * | 1 ... N years          | [1..N]  years       |
         *
         * @param {Date|String|Number} dateToCompare - the date to compare with
         * @param {Date|String|Number} date - the other date
         * @param {Object} [options] - the object with options
         * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first
         * @param {'s'|'m'|'h'|'d'|'M'|'Y'} [options.unit] - if specified, will force a unit
         * @param {'floor'|'ceil'|'round'} [options.partialMethod='floor'] - which way to round partial units
         * @param {Object} [options.locale=enLocale] - the locale object
         * @returns {String} the distance in words
         *
         * @example
         * // What is the distance between 2 July 2014 and 1 January 2015?
         * var result = distanceInWordsStrict(
         *   new Date(2014, 6, 2),
         *   new Date(2015, 0, 2)
         * )
         * //=> '6 months'
         *
         * @example
         * // What is the distance between 1 January 2015 00:00:15
         * // and 1 January 2015 00:00:00?
         * var result = distanceInWordsStrict(
         *   new Date(2015, 0, 1, 0, 0, 15),
         *   new Date(2015, 0, 1, 0, 0, 0),
         * )
         * //=> '15 seconds'
         *
         * @example
         * // What is the distance from 1 January 2016
         * // to 1 January 2015, with a suffix?
         * var result = distanceInWordsStrict(
         *   new Date(2016, 0, 1),
         *   new Date(2015, 0, 1),
         *   {addSuffix: true}
         * )
         * //=> '1 year ago'
         *
         * @example
         * // What is the distance from 1 January 2016
         * // to 1 January 2015, in minutes?
         * var result = distanceInWordsStrict(
         *   new Date(2016, 0, 1),
         *   new Date(2015, 0, 1),
         *   {unit: 'm'}
         * )
         * //=> '525600 minutes'
         *
         * @example
         * // What is the distance from 1 January 2016
         * // to 28 January 2015, in months, rounded up?
         * var result = distanceInWordsStrict(
         *   new Date(2015, 0, 28),
         *   new Date(2015, 0, 1),
         *   {unit: 'M', partialMethod: 'ceil'}
         * )
         * //=> '1 month'
         *
         * @example
         * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
         * var eoLocale = require('date-fns/locale/eo')
         * var result = distanceInWordsStrict(
         *   new Date(2016, 7, 1),
         *   new Date(2015, 0, 1),
         *   {locale: eoLocale}
         * )
         * //=> '1 jaro'
         */

    }, {
        key: 'distanceInWordsStrict',
        value: function distanceInWordsStrict(dirtyDateToCompare, dirtyDate, dirtyOptions) {
            var options = dirtyOptions || {};

            var comparison = this.compareDesc(dirtyDateToCompare, dirtyDate);

            var locale = options.locale;
            var localize = this.buildDistanceInWordsLocale().localize;
            if (locale && locale.distanceInWords && locale.distanceInWords.localize) {
                localize = locale.distanceInWords.localize;
            }

            var localizeOptions = {
                addSuffix: Boolean(options.addSuffix),
                comparison: comparison
            };

            var dateLeft, dateRight;
            if (comparison > 0) {
                dateLeft = this.parse(dirtyDateToCompare);
                dateRight = this.parse(dirtyDate);
            } else {
                dateLeft = this.parse(dirtyDate);
                dateRight = this.parse(dirtyDateToCompare);
            }

            var unit;
            var mathPartial = Math[options.partialMethod ? String(options.partialMethod) : 'floor'];
            var seconds = this.differenceInSeconds(dateRight, dateLeft);
            var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset();
            var minutes = this.mathPartial(seconds / 60) - offset;
            var hours, days, months, years;

            if (options.unit) {
                unit = String(options.unit);
            } else {
                if (minutes < 1) {
                    unit = 's';
                } else if (minutes < 60) {
                    unit = 'm';
                } else if (minutes < MINUTES_IN_DAY) {
                    unit = 'h';
                } else if (minutes < MINUTES_IN_MONTH) {
                    unit = 'd';
                } else if (minutes < MINUTES_IN_YEAR) {
                    unit = 'M';
                } else {
                    unit = 'Y';
                }
            }

            // 0 up to 60 seconds
            if (unit === 's') {
                return this.localize('xSeconds', seconds, localizeOptions);

                // 1 up to 60 mins
            } else if (unit === 'm') {
                return this.localize('xMinutes', minutes, localizeOptions);

                // 1 up to 24 hours
            } else if (unit === 'h') {
                hours = this.mathPartial(minutes / 60);
                return this.localize('xHours', hours, localizeOptions);

                // 1 up to 30 days
            } else if (unit === 'd') {
                days = this.mathPartial(minutes / MINUTES_IN_DAY);
                return this.localize('xDays', days, localizeOptions);

                // 1 up to 12 months
            } else if (unit === 'M') {
                months = this.mathPartial(minutes / MINUTES_IN_MONTH);
                return this.localize('xMonths', months, localizeOptions);

                // 1 year up to max Date
            } else if (unit === 'Y') {
                years = this.mathPartial(minutes / MINUTES_IN_YEAR);
                return this.localize('xYears', years, localizeOptions);
            }

            throw new Error('Unknown unit: ' + unit);
        }

        /**
         * @summary Return the distance between the given date and now in words.
         *
         * @description
         * Return the distance between the given date and now in words.
         *
         * | Distance to now                                                   | Result              |
         * |-------------------------------------------------------------------|---------------------|
         * | 0 ... 30 secs                                                     | less than a minute  |
         * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
         * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
         * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
         * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
         * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
         * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
         * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
         * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
         * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
         * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
         * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
         * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
         * | N yrs ... N yrs 3 months                                          | about N years       |
         * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
         * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
         *
         * With `options.includeSeconds == true`:
         * | Distance to now     | Result               |
         * |---------------------|----------------------|
         * | 0 secs ... 5 secs   | less than 5 seconds  |
         * | 5 secs ... 10 secs  | less than 10 seconds |
         * | 10 secs ... 20 secs | less than 20 seconds |
         * | 20 secs ... 40 secs | half a minute        |
         * | 40 secs ... 60 secs | less than a minute   |
         * | 60 secs ... 90 secs | 1 minute             |
         *
         * @param {Date|String|Number} date - the given date
         * @param {Object} [options] - the object with options
         * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
         * @param {Boolean} [options.addSuffix=false] - result specifies if the second date is earlier or later than the first
         * @param {Object} [options.locale=enLocale] - the locale object
         * @returns {String} the distance in words
         *
         * @example
         * // If today is 1 January 2015, what is the distance to 2 July 2014?
         * var result = distanceInWordsToNow(
         *   new Date(2014, 6, 2)
         * )
         * //=> '6 months'
         *
         * @example
         * // If now is 1 January 2015 00:00:00,
         * // what is the distance to 1 January 2015 00:00:15, including seconds?
         * var result = distanceInWordsToNow(
         *   new Date(2015, 0, 1, 0, 0, 15),
         *   {includeSeconds: true}
         * )
         * //=> 'less than 20 seconds'
         *
         * @example
         * // If today is 1 January 2015,
         * // what is the distance to 1 January 2016, with a suffix?
         * var result = distanceInWordsToNow(
         *   new Date(2016, 0, 1),
         *   {addSuffix: true}
         * )
         * //=> 'in about 1 year'
         *
         * @example
         * // If today is 1 January 2015,
         * // what is the distance to 1 August 2016 in Esperanto?
         * var eoLocale = require('date-fns/locale/eo')
         * var result = distanceInWordsToNow(
         *   new Date(2016, 7, 1),
         *   {locale: eoLocale}
         * )
         * //=> 'pli ol 1 jaro'
         */

    }, {
        key: 'distanceInWordsToNow',
        value: function distanceInWordsToNow(dirtyDate, dirtyOptions) {
            return this.distanceInWords(Date.now(), dirtyDate, dirtyOptions);
        }

        /**
         * @summary Return the array of dates within the specified range.
         *
         * @description
         * Return the array of dates within the specified range.
         *
         * @param {Date|String|Number} startDate - the first date
         * @param {Date|String|Number} endDate - the last date
         * @returns {Date[]} the array with starts of days from the day of startDate to the day of endDate
         * @throws {Error} startDate cannot be after endDate
         *
         * @example
         * // Each day between 6 October 2014 and 10 October 2014:
         * var result = eachDay(
         *   new Date(2014, 9, 6),
         *   new Date(2014, 9, 10)
         * )
         * //=> [
         * //   Mon Oct 06 2014 00:00:00,
         * //   Tue Oct 07 2014 00:00:00,
         * //   Wed Oct 08 2014 00:00:00,
         * //   Thu Oct 09 2014 00:00:00,
         * //   Fri Oct 10 2014 00:00:00
         * // ]
         */

    }, {
        key: 'eachDay',
        value: function eachDay(dirtyStartDate, dirtyEndDate) {
            var startDate = this.parse(dirtyStartDate);
            var endDate = this.parse(dirtyEndDate);

            var endTime = endDate.getTime();

            if (startDate.getTime() > endTime) {
                throw new Error('The first date cannot be after the second date');
            }

            var dates = [];

            var currentDate = startDate;
            currentDate.setHours(0, 0, 0, 0);

            while (currentDate.getTime() <= endTime) {
                dates.push(parse(currentDate));
                currentDate.setDate(currentDate.getDate() + 1);
            }

            return dates;
        }

        /**
         * @summary Return the end of a day for the given date.
         *
         * @description
         * Return the end of a day for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the end of a day
         *
         * @example
         * // The end of a day for 2 September 2014 11:55:00:
         * var result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
         * //=> Tue Sep 02 2014 23:59:59.999
         */

    }, {
        key: 'endOfDay',
        value: function endOfDay(dirtyDate) {
            var date = this.parse(dirtyDate);
            date.setHours(23, 59, 59, 999);
            return date;
        }

        /**
         * @summary Return the end of an hour for the given date.
         *
         * @description
         * Return the end of an hour for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the end of an hour
         *
         * @example
         * // The end of an hour for 2 September 2014 11:55:00:
         * var result = endOfHour(new Date(2014, 8, 2, 11, 55))
         * //=> Tue Sep 02 2014 11:59:59.999
         */

    }, {
        key: 'endOfHour',
        value: function endOfHour(dirtyDate) {
            var date = this.parse(dirtyDate);
            date.setMinutes(59, 59, 999);
            return date;
        }

        /**
         * @summary Return the end of an ISO week for the given date.
         *
         * @description
         * Return the end of an ISO week for the given date.
         * The result will be in the local timezone.
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the end of an ISO week
         *
         * @example
         * // The end of an ISO week for 2 September 2014 11:55:00:
         * var result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
         * //=> Sun Sep 07 2014 23:59:59.999
         */

    }, {
        key: 'endOfISOWeek',
        value: function endOfISOWeek(dirtyDate) {
            return this.endOfWeek(dirtyDate, { weekStartsOn: 1 });
        }

        /**
         * @summary Return the end of an ISO week-numbering year for the given date.
         *
         * @description
         * Return the end of an ISO week-numbering year,
         * which always starts 3 days before the year's first Thursday.
         * The result will be in the local timezone.
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the end of an ISO week-numbering year
         *
         * @example
         * // The end of an ISO week-numbering year for 2 July 2005:
         * var result = endOfISOYear(new Date(2005, 6, 2))
         * //=> Sun Jan 01 2006 23:59:59.999
         */

    }, {
        key: 'endOfISOYear',
        value: function endOfISOYear(dirtyDate) {
            var year = this.getISOYear(dirtyDate);
            var fourthOfJanuaryOfNextYear = new Date(0);
            fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
            fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
            var date = this.startOfISOWeek(fourthOfJanuaryOfNextYear);
            date.setMilliseconds(date.getMilliseconds() - 1);
            return date;
        }

        /**
         * @summary Return the end of a minute for the given date.
         *
         * @description
         * Return the end of a minute for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the end of a minute
         *
         * @example
         * // The end of a minute for 1 December 2014 22:15:45.400:
         * var result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
         * //=> Mon Dec 01 2014 22:15:59.999
         */

    }, {
        key: 'endOfMinute',
        value: function endOfMinute(dirtyDate) {
            var date = this.parse(dirtyDate);
            date.setSeconds(59, 999);
            return date;
        }

        /**
         * @summary Return the end of a month for the given date.
         *
         * @description
         * Return the end of a month for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the end of a month
         *
         * @example
         * // The end of a month for 2 September 2014 11:55:00:
         * var result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
         * //=> Tue Sep 30 2014 23:59:59.999
         */

    }, {
        key: 'endOfMonth',
        value: function endOfMonth(dirtyDate) {
            var date = this.parse(dirtyDate);
            var month = date.getMonth();
            date.setFullYear(date.getFullYear(), month + 1, 0);
            date.setHours(23, 59, 59, 999);
            return date;
        }

        /**
         * @summary Return the end of a year quarter for the given date.
         *
         * @description
         * Return the end of a year quarter for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the end of a quarter
         *
         * @example
         * // The end of a quarter for 2 September 2014 11:55:00:
         * var result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
         * //=> Tue Sep 30 2014 23:59:59.999
         */

    }, {
        key: 'endOfQuarter',
        value: function endOfQuarter(dirtyDate) {
            var date = this.parse(dirtyDate);
            var currentMonth = date.getMonth();
            var month = currentMonth - currentMonth % 3 + 3;
            date.setMonth(month, 0);
            date.setHours(23, 59, 59, 999);
            return date;
        }

        /**
         * @summary Return the end of a second for the given date.
         *
         * @description
         * Return the end of a second for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the end of a second
         *
         * @example
         * // The end of a second for 1 December 2014 22:15:45.400:
         * var result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
         * //=> Mon Dec 01 2014 22:15:45.999
         */

    }, {
        key: 'endOfSecond',
        value: function endOfSecond(dirtyDate) {
            var date = this.parse(dirtyDate);
            date.setMilliseconds(999);
            return date;
        }

        /**
         * @summary Return the end of today.
         *
         * @description
         * Return the end of today.
         *
         * @returns {Date} the end of today
         *
         * @example
         * // If today is 6 October 2014:
         * var result = endOfToday()
         * //=> Mon Oct 6 2014 23:59:59.999
         */

    }, {
        key: 'endOfToday',
        value: function endOfToday() {
            return this.endOfDay(new Date());
        }

        /**
         * @summary Return the end of tomorrow.
         *
         * @description
         * Return the end of tomorrow.
         *
         * @returns {Date} the end of tomorrow
         *
         * @example
         * // If today is 6 October 2014:
         * var result = endOfTomorrow()
         * //=> Tue Oct 7 2014 23:59:59.999
         */

    }, {
        key: 'endOfTomorrow',
        value: function endOfTomorrow() {
            var now = new Date();
            var year = now.getFullYear();
            var month = now.getMonth();
            var day = now.getDate();

            var date = new Date(0);
            date.setFullYear(year, month, day + 1);
            date.setHours(23, 59, 59, 999);
            return date;
        }

        /**
         * @summary Return the end of a week for the given date.
         *
         * @description
         * Return the end of a week for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @param {Object} [options] - the object with options
         * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
         * @returns {Date} the end of a week
         *
         * @example
         * // The end of a week for 2 September 2014 11:55:00:
         * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
         * //=> Sat Sep 06 2014 23:59:59.999
         *
         * @example
         * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
         * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})
         * //=> Sun Sep 07 2014 23:59:59.999
         */

    }, {
        key: 'endOfWeek',
        value: function endOfWeek(dirtyDate, dirtyOptions) {
            var weekStartsOn = dirtyOptions ? Number(dirtyOptions.weekStartsOn) || 0 : 0;

            var date = this.parse(dirtyDate);
            var day = date.getDay();
            var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);

            date.setDate(date.getDate() + diff);
            date.setHours(23, 59, 59, 999);
            return date;
        }

        /**
         * @summary Return the end of a year for the given date.
         *
         * @description
         * Return the end of a year for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the end of a year
         *
         * @example
         * // The end of a year for 2 September 2014 11:55:00:
         * var result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))
         * //=> Wed Dec 31 2014 23:59:59.999
         */

    }, {
        key: 'endOfYear',
        value: function endOfYear(dirtyDate) {
            var date = this.parse(dirtyDate);
            var year = date.getFullYear();
            date.setFullYear(year + 1, 0, 0);
            date.setHours(23, 59, 59, 999);
            return date;
        }

        /**
         * @summary Format the date.
         *
         * @description
         * Return the formatted date string in the given format.
         *
         * Accepted tokens:
         * | Unit                    | Token | Result examples                  |
         * |-------------------------|-------|----------------------------------|
         * | Month                   | M     | 1, 2, ..., 12                    |
         * |                         | Mo    | 1st, 2nd, ..., 12th              |
         * |                         | MM    | 01, 02, ..., 12                  |
         * |                         | MMM   | Jan, Feb, ..., Dec               |
         * |                         | MMMM  | January, February, ..., December |
         * | Quarter                 | Q     | 1, 2, 3, 4                       |
         * |                         | Qo    | 1st, 2nd, 3rd, 4th               |
         * | Day of month            | D     | 1, 2, ..., 31                    |
         * |                         | Do    | 1st, 2nd, ..., 31st              |
         * |                         | DD    | 01, 02, ..., 31                  |
         * | Day of year             | DDD   | 1, 2, ..., 366                   |
         * |                         | DDDo  | 1st, 2nd, ..., 366th             |
         * |                         | DDDD  | 001, 002, ..., 366               |
         * | Day of week             | d     | 0, 1, ..., 6                     |
         * |                         | do    | 0th, 1st, ..., 6th               |
         * |                         | dd    | Su, Mo, ..., Sa                  |
         * |                         | ddd   | Sun, Mon, ..., Sat               |
         * |                         | dddd  | Sunday, Monday, ..., Saturday    |
         * | Day of ISO week         | E     | 1, 2, ..., 7                     |
         * | ISO week                | W     | 1, 2, ..., 53                    |
         * |                         | Wo    | 1st, 2nd, ..., 53rd              |
         * |                         | WW    | 01, 02, ..., 53                  |
         * | Year                    | YY    | 00, 01, ..., 99                  |
         * |                         | YYYY  | 1900, 1901, ..., 2099            |
         * | ISO week-numbering year | GG    | 00, 01, ..., 99                  |
         * |                         | GGGG  | 1900, 1901, ..., 2099            |
         * | AM/PM                   | A     | AM, PM                           |
         * |                         | a     | am, pm                           |
         * |                         | aa    | a.m., p.m.                       |
         * | Hour                    | H     | 0, 1, ... 23                     |
         * |                         | HH    | 00, 01, ... 23                   |
         * |                         | h     | 1, 2, ..., 12                    |
         * |                         | hh    | 01, 02, ..., 12                  |
         * | Minute                  | m     | 0, 1, ..., 59                    |
         * |                         | mm    | 00, 01, ..., 59                  |
         * | Second                  | s     | 0, 1, ..., 59                    |
         * |                         | ss    | 00, 01, ..., 59                  |
         * | 1/10 of second          | S     | 0, 1, ..., 9                     |
         * | 1/100 of second         | SS    | 00, 01, ..., 99                  |
         * | Millisecond             | SSS   | 000, 001, ..., 999               |
         * | Timezone                | Z     | -01:00, +00:00, ... +12:00       |
         * |                         | ZZ    | -0100, +0000, ..., +1200         |
         * | Seconds timestamp       | X     | 512969520                        |
         * | Milliseconds timestamp  | x     | 512969520900                     |
         *
         * The characters wrapped in square brackets are escaped.
         *
         * The result may vary by locale.
         *
         * @param {Date|String|Number} date - the original date
         * @param {String} [format='YYYY-MM-DDTHH:mm:ss.SSSZ'] - the string of tokens
         * @param {Object} [options] - the object with options
         * @param {Object} [options.locale=enLocale] - the locale object
         * @returns {String} the formatted date string
         *
         * @example
         * // Represent 11 February 2014 in middle-endian format:
         * var result = format(
         *   new Date(2014, 1, 11),
         *   'MM/DD/YYYY'
         * )
         * //=> '02/11/2014'
         *
         * @example
         * // Represent 2 July 2014 in Esperanto:
         * var eoLocale = require('date-fns/locale/eo')
         * var result = format(
         *   new Date(2014, 6, 2),
         *   'Do [de] MMMM YYYY',
         *   {locale: eoLocale}
         * )
         * //=> '2-a de julio 2014'
         */

    }, {
        key: 'formatDate',
        value: function formatDate(dirtyDate, dirtyFormatStr, dirtyOptions) {
            var formatStr = dirtyFormatStr ? String(dirtyFormatStr) : 'YYYY-MM-DDTHH:mm:ss.SSSZ';
            var options = dirtyOptions || {};

            var locale = options.locale;
            var localeFormatters = this.buildFormatLocale().formatters;
            var formattingTokensRegExp = this.buildFormatLocale().formattingTokensRegExp;
            if (locale && locale.format && locale.format.formatters) {
                localeFormatters = locale.format.formatters;

                if (locale.format.formattingTokensRegExp) {
                    formattingTokensRegExp = locale.format.formattingTokensRegExp;
                }
            }
            var date = dirtyDate;
            if (!(date instanceof Date)) {
                if (dirtyFormatStr) {
                    date = this.parseDateWithFormat(dirtyDate, dirtyFormatStr);
                } else {
                    date = this.parse(dirtyDate);
                }
            }

            if (!this.isValid(date)) {
                return 'Invalid Date';
            }

            var formatFn = this.buildFormatFn(formatStr, localeFormatters, formattingTokensRegExp);

            return formatFn(date);
        }
    }, {
        key: 'isFunction',
        value: function isFunction(functionToCheck) {
            var getType = {};
            return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
        }
    }, {
        key: 'buildFormatFn',
        value: function buildFormatFn(formatStr, localeFormatters, formattingTokensRegExp) {
            var array = formatStr.match(formattingTokensRegExp);
            var length = array.length;

            var i;
            var formatter;
            for (i = 0; i < length; i++) {
                formatter = localeFormatters[array[i]] || formatters[array[i]];
                if (formatter) {
                    array[i] = formatter;
                } else {
                    array[i] = this.removeFormattingTokens(array[i]);
                }
            }
            var _this = this;

            return function (date) {
                var output = '';
                for (var i = 0; i < length; i++) {
                    if (_this.isFunction(array[i])) {
                        output += array[i](date, formatters);
                    } else {
                        output += array[i];
                    }
                }
                return output;
            };
        }
    }, {
        key: 'removeFormattingTokens',
        value: function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
                return input.replace(/^\[|]$/g, '');
            }
            return input.replace(/\\/g, '');
        }
    }, {
        key: 'formatTimezone',
        value: function formatTimezone(offset, delimeter) {
            delimeter = delimeter || '';
            var sign = offset > 0 ? '-' : '+';
            var absOffset = Math.abs(offset);
            var hours = Math.floor(absOffset / 60);
            var minutes = absOffset % 60;
            return sign + this.addLeadingZeros(hours, 2) + delimeter + this.addLeadingZeros(minutes, 2);
        }
    }, {
        key: 'addLeadingZeros',
        value: function addLeadingZeros(number, targetLength) {
            var output = Math.abs(number).toString();
            while (output.length < targetLength) {
                output = '0' + output;
            }
            return output;
        }

        /**
         * @summary Get the day of the month of the given date.
         *
         * @description
         * Get the day of the month of the given date.
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the day of month
         *
         * @example
         * // Which day of the month is 29 February 2012?
         * var result = getDate(new Date(2012, 1, 29))
         * //=> 29
         */

    }, {
        key: 'getDate',
        value: function getDate(dirtyDate) {
            var date = this.parse(dirtyDate);
            var dayOfMonth = date.getDate();
            return dayOfMonth;
        }

        /**
         * @summary Get the day of the week of the given date.
         *
         * @description
         * Get the day of the week of the given date.
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the day of week
         *
         * @example
         * // Which day of the week is 29 February 2012?
         * var result = getDay(new Date(2012, 1, 29))
         * //=> 3
         */

    }, {
        key: 'getDay',
        value: function getDay(dirtyDate) {
            var date = this.parse(dirtyDate);
            var day = date.getDay();
            return day;
        }

        /**
         * @summary Get the day of the year of the given date.
         *
         * @description
         * Get the day of the year of the given date.
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the day of year
         *
         * @example
         * // Which day of the year is 2 July 2014?
         * var result = getDayOfYear(new Date(2014, 6, 2))
         * //=> 183
         */

    }, {
        key: 'getDayOfYear',
        value: function getDayOfYear(dirtyDate) {
            var date = this.parse(dirtyDate);
            var diff = this.differenceInCalendarDays(date, this.startOfYear(date));
            var dayOfYear = diff + 1;
            return dayOfYear;
        }

        /**
         * @summary Get the number of days in a month of the given date.
         *
         * @description
         * Get the number of days in a month of the given date.
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the number of days in a month
         *
         * @example
         * // How many days are in February 2000?
         * var result = getDaysInMonth(new Date(2000, 1))
         * //=> 29
         */

    }, {
        key: 'getDaysInMonth',
        value: function getDaysInMonth(dirtyDate) {
            var date = this.parse(dirtyDate);
            var year = date.getFullYear();
            var monthIndex = date.getMonth();
            var lastDayOfMonth = new Date(0);
            lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
            lastDayOfMonth.setHours(0, 0, 0, 0);
            return lastDayOfMonth.getDate();
        }

        /**
         * @summary Get the number of days in a year of the given date.
         *
         * @description
         * Get the number of days in a year of the given date.
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the number of days in a year
         *
         * @example
         * // How many days are in 2012?
         * var result = getDaysInYear(new Date(2012, 0, 1))
         * //=> 366
         */

    }, {
        key: 'getDaysInYear',
        value: function getDaysInYear(dirtyDate) {
            return this.isLeapYear(dirtyDate) ? 366 : 365;
        }

        /**
         * @summary Get the hours of the given date.
         *
         * @description
         * Get the hours of the given date.
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the hours
         *
         * @example
         * // Get the hours of 29 February 2012 11:45:00:
         * var result = getHours(new Date(2012, 1, 29, 11, 45))
         * //=> 11
         */

    }, {
        key: 'getHours',
        value: function getHours(dirtyDate) {
            var date = this.parse(dirtyDate);
            var hours = date.getHours();
            return hours;
        }

        /**
         * @summary Get the day of the ISO week of the given date.
         *
         * @description
         * Get the day of the ISO week of the given date,
         * which is 7 for Sunday, 1 for Monday etc.
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the day of ISO week
         *
         * @example
         * // Which day of the ISO week is 26 February 2012?
         * var result = getISODay(new Date(2012, 1, 26))
         * //=> 7
         */

    }, {
        key: 'getISODay',
        value: function getISODay(dirtyDate) {
            var date = this.parse(dirtyDate);
            var day = date.getDay();

            if (day === 0) {
                day = 7;
            }

            return day;
        }

        /**
         * @summary Get the ISO week of the given date.
         *
         * @description
         * Get the ISO week of the given date.
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the ISO week
         *
         * @example
         * // Which week of the ISO-week numbering year is 2 January 2005?
         * var result = getISOWeek(new Date(2005, 0, 2))
         * //=> 53
         */

    }, {
        key: 'getISOWeek',
        value: function getISOWeek(dirtyDate) {
            var date = this.parse(dirtyDate);
            var diff = this.startOfISOWeek(date).getTime() - this.startOfISOYear(date).getTime();

            // Round the number of days to the nearest integer
            // because the number of milliseconds in a week is not constant
            // (e.g. it's different in the week of the daylight saving time clock shift)
            return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
        }

        /**
         * @summary Get the number of weeks in an ISO week-numbering year of the given date.
         *
         * @description
         * Get the number of weeks in an ISO week-numbering year of the given date.
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the number of ISO weeks in a year
         *
         * @example
         * // How many weeks are in ISO week-numbering year 2015?
         * var result = getISOWeeksInYear(new Date(2015, 1, 11))
         * //=> 53
         */

    }, {
        key: 'getISOWeeksInYear',
        value: function getISOWeeksInYear(dirtyDate) {
            var thisYear = this.startOfISOYear(dirtyDate);
            var nextYear = this.startOfISOYear(this.addWeeks(thisYear, 60));
            var diff = nextYear.valueOf() - thisYear.valueOf();
            // Round the number of weeks to the nearest integer
            // because the number of milliseconds in a week is not constant
            // (e.g. it's different in the week of the daylight saving time clock shift)
            return Math.round(diff / MILLISECONDS_IN_WEEK);
        }

        /**
         * @summary Get the ISO week-numbering year of the given date.
         *
         * @description
         * Get the ISO week-numbering year of the given date,
         * which always starts 3 days before the year's first Thursday.
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the ISO week-numbering year
         *
         * @example
         * // Which ISO-week numbering year is 2 January 2005?
         * var result = getISOYear(new Date(2005, 0, 2))
         * //=> 2004
         */

    }, {
        key: 'getISOYear',
        value: function getISOYear(dirtyDate) {
            var date = this.parse(dirtyDate);
            var year = date.getFullYear();

            var fourthOfJanuaryOfNextYear = new Date(0);
            fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
            fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
            var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);

            var fourthOfJanuaryOfThisYear = new Date(0);
            fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
            fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
            var startOfThisYear = this.startOfISOWeek(fourthOfJanuaryOfThisYear);

            if (date.getTime() >= startOfNextYear.getTime()) {
                return year + 1;
            } else if (date.getTime() >= startOfThisYear.getTime()) {
                return year;
            } else {
                return year - 1;
            }
        }

        /**
         * @summary Get the milliseconds of the given date.
         *
         * @description
         * Get the milliseconds of the given date.
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the milliseconds
         *
         * @example
         * // Get the milliseconds of 29 February 2012 11:45:05.123:
         * var result = getMilliseconds(new Date(2012, 1, 29, 11, 45, 5, 123))
         * //=> 123
         */

    }, {
        key: 'getMilliseconds',
        value: function getMilliseconds(dirtyDate) {
            var date = this.parse(dirtyDate);
            var milliseconds = date.getMilliseconds();
            return milliseconds;
        }

        /**
         * @summary Get the minutes of the given date.
         *
         * @description
         * Get the minutes of the given date.
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the minutes
         *
         * @example
         * // Get the minutes of 29 February 2012 11:45:05:
         * var result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))
         * //=> 45
         */

    }, {
        key: 'getMinutes',
        value: function getMinutes(dirtyDate) {
            var date = this.parse(dirtyDate);
            var minutes = date.getMinutes();
            return minutes;
        }

        /**
         * @summary Get the month of the given date.
         *
         * @description
         * Get the month of the given date.
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the month
         *
         * @example
         * // Which month is 29 February 2012?
         * var result = getMonth(new Date(2012, 1, 29))
         * //=> 1
         */

    }, {
        key: 'getMonth',
        value: function getMonth(dirtyDate) {
            var date = this.parse(dirtyDate);
            var month = date.getMonth();
            return month;
        }

        /**
         * @summary Get the number of days that overlap in two date ranges
         *
         * @description
         * Get the number of days that overlap in two date ranges
         *
         * @param {Date|String|Number} initialRangeStartDate - the start of the initial range
         * @param {Date|String|Number} initialRangeEndDate - the end of the initial range
         * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with
         * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with
         * @returns {Number} the number of days that overlap in two date ranges
         * @throws {Error} startDate of a date range cannot be after its endDate
         *
         * @example
         * // For overlapping date ranges adds 1 for each started overlapping day:
         * getOverlappingDaysInRanges(
         *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)
         * )
         * //=> 3
         *
         * @example
         * // For non-overlapping date ranges returns 0:
         * getOverlappingDaysInRanges(
         *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)
         * )
         * //=> 0
         */

    }, {
        key: 'getOverlappingDaysInRanges',
        value: function getOverlappingDaysInRanges(dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {
            var initialStartTime = this.parse(dirtyInitialRangeStartDate).getTime();
            var initialEndTime = this.parse(dirtyInitialRangeEndDate).getTime();
            var comparedStartTime = this.parse(dirtyComparedRangeStartDate).getTime();
            var comparedEndTime = this.parse(dirtyComparedRangeEndDate).getTime();

            if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {
                throw new Error('The start of the range cannot be after the end of the range');
            }

            var isOverlapping = initialStartTime < comparedEndTime && comparedStartTime < initialEndTime;

            if (!isOverlapping) {
                return 0;
            }

            var overlapStartDate = comparedStartTime < initialStartTime ? initialStartTime : comparedStartTime;

            var overlapEndDate = comparedEndTime > initialEndTime ? initialEndTime : comparedEndTime;

            var differenceInMs = overlapEndDate - overlapStartDate;

            return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY);
        }

        /**
         * @summary Get the year quarter of the given date.
         *
         * @description
         * Get the year quarter of the given date.
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the quarter
         *
         * @example
         * // Which quarter is 2 July 2014?
         * var result = getQuarter(new Date(2014, 6, 2))
         * //=> 3
         */

    }, {
        key: 'getQuarter',
        value: function getQuarter(dirtyDate) {
            var date = this.parse(dirtyDate);
            var quarter = Math.floor(date.getMonth() / 3) + 1;
            return quarter;
        }

        /**
         * @summary Get the seconds of the given date.
         *
         * @description
         * Get the seconds of the given date.
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the seconds
         *
         * @example
         * // Get the seconds of 29 February 2012 11:45:05.123:
         * var result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))
         * //=> 5
         */

    }, {
        key: 'getSeconds',
        value: function getSeconds(dirtyDate) {
            var date = this.parse(dirtyDate);
            var seconds = date.getSeconds();
            return seconds;
        }

        /**
         * @summary Get the milliseconds timestamp of the given date.
         *
         * @description
         * Get the milliseconds timestamp of the given date.
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the timestamp
         *
         * @example
         * // Get the timestamp of 29 February 2012 11:45:05.123:
         * var result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))
         * //=> 1330515905123
         */

    }, {
        key: 'getTime',
        value: function getTime(dirtyDate) {
            var date = this.parse(dirtyDate);
            var timestamp = date.getTime();
            return timestamp;
        }

        /**
         * @summary Get the year of the given date.
         *
         * @description
         * Get the year of the given date.
         *
         * @param {Date|String|Number} date - the given date
         * @returns {Number} the year
         *
         * @example
         * // Which year is 2 July 2014?
         * var result = getYear(new Date(2014, 6, 2))
         * //=> 2014
         */

    }, {
        key: 'getYear',
        value: function getYear(dirtyDate) {
            var date = this.parse(dirtyDate);
            var year = date.getFullYear();
            return year;
        }

        /**
         * @category Common Helpers
         * @summary Is the first date after the second one?
         *
         * @description
         * Is the first date after the second one?
         *
         * @param {Date|String|Number} date - the date that should be after the other one to return true
         * @param {Date|String|Number} dateToCompare - the date to compare with
         * @returns {Boolean} the first date is after the second date
         *
         * @example
         * // Is 10 July 1989 after 11 February 1987?
         * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
         * //=> true
         */

    }, {
        key: 'isAfter',
        value: function isAfter(dirtyDate, dirtyDateToCompare) {
            var date = this.parse(dirtyDate);
            var dateToCompare = this.parse(dirtyDateToCompare);
            return date.getTime() > dateToCompare.getTime();
        }

        /**
         * @summary Is the first date before the second one?
         *
         * @description
         * Is the first date before the second one?
         *
         * @param {Date|String|Number} date - the date that should be before the other one to return true
         * @param {Date|String|Number} dateToCompare - the date to compare with
         * @returns {Boolean} the first date is before the second date
         *
         * @example
         * // Is 10 July 1989 before 11 February 1987?
         * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
         * //=> false
         */

    }, {
        key: 'isBefore',
        value: function isBefore(dirtyDate, dirtyDateToCompare) {
            var date = this.parse(dirtyDate);
            var dateToCompare = this.parse(dirtyDateToCompare);
            return date.getTime() < dateToCompare.getTime();
        }

        /**
         * @summary Is the given argument an instance of Date?
         *
         * @description
         * Is the given argument an instance of Date?
         *
         * @param {*} argument - the argument to check
         * @returns {Boolean} the given argument is an instance of Date
         *
         * @example
         * // Is 'mayonnaise' a Date?
         * var result = isDate('mayonnaise')
         * //=> false
         */

    }, {
        key: 'isDate',
        value: function isDate(argument) {
            return argument instanceof Date;
        }

        /**
         * @summary Are the given dates equal?
         *
         * @description
         * Are the given dates equal?
         *
         * @param {Date|String|Number} dateLeft - the first date to compare
         * @param {Date|String|Number} dateRight - the second date to compare
         * @returns {Boolean} the dates are equal
         *
         * @example
         * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
         * var result = isEqual(
         *   new Date(2014, 6, 2, 6, 30, 45, 0)
         *   new Date(2014, 6, 2, 6, 30, 45, 500)
         * )
         * //=> false
         */

    }, {
        key: 'isEqual',
        value: function isEqual(dirtyLeftDate, dirtyRightDate) {
            var dateLeft = this.parse(dirtyLeftDate);
            var dateRight = this.parse(dirtyRightDate);
            return dateLeft.getTime() === dateRight.getTime();
        }

        /**
         * @summary Is the given date the first day of a month?
         *
         * @description
         * Is the given date the first day of a month?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is the first day of a month
         *
         * @example
         * // Is 1 September 2014 the first day of a month?
         * var result = isFirstDayOfMonth(new Date(2014, 8, 1))
         * //=> true
         */

    }, {
        key: 'isFirstDayOfMonth',
        value: function isFirstDayOfMonth(dirtyDate) {
            return this.parse(dirtyDate).getDate() === 1;
        }

        /**
         * @summary Is the given date Friday?
         *
         * @description
         * Is the given date Friday?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is Friday
         *
         * @example
         * // Is 26 September 2014 Friday?
         * var result = isFriday(new Date(2014, 8, 26))
         * //=> true
         */

    }, {
        key: 'isFriday',
        value: function isFriday(dirtyDate) {
            return this.parse(dirtyDate).getDay() === 5;
        }

        /**
         * @summary Is the given date in the future?
         *
         * @description
         * Is the given date in the future?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is in the future
         *
         * @example
         * // If today is 6 October 2014, is 31 December 2014 in the future?
         * var result = isFuture(new Date(2014, 11, 31))
         * //=> true
         */

    }, {
        key: 'isFuture',
        value: function isFuture(dirtyDate) {
            return this.parse(dirtyDate).getTime() > new Date().getTime();
        }

        /**
         * @summary Is the given date the last day of a month?
         *
         * @description
         * Is the given date the last day of a month?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is the last day of a month
         *
         * @example
         * // Is 28 February 2014 the last day of a month?
         * var result = isLastDayOfMonth(new Date(2014, 1, 28))
         * //=> true
         */

    }, {
        key: 'isLastDayOfMonth',
        value: function isLastDayOfMonth(dirtyDate) {
            var date = this.parse(dirtyDate);
            return this.endOfDay(date).getTime() === this.endOfMonth(date).getTime();
        }

        /**
         * @summary Is the given date in the leap year?
         *
         * @description
         * Is the given date in the leap year?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is in the leap year
         *
         * @example
         * // Is 1 September 2012 in the leap year?
         * var result = isLeapYear(new Date(2012, 8, 1))
         * //=> true
         */

    }, {
        key: 'isLeapYear',
        value: function isLeapYear(dirtyDate) {
            var date = this.parse(dirtyDate);
            var year = date.getFullYear();
            return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
        }

        /**
         * @summary Is the given date Monday?
         *
         * @description
         * Is the given date Monday?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is Monday
         *
         * @example
         * // Is 22 September 2014 Monday?
         * var result = isMonday(new Date(2014, 8, 22))
         * //=> true
         */

    }, {
        key: 'isMonday',
        value: function isMonday(dirtyDate) {
            return this.parse(dirtyDate).getDay() === 1;
        }

        /**
         * @category Common Helpers
         * @summary Is the given date in the past?
         *
         * @description
         * Is the given date in the past?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is in the past
         *
         * @example
         * // If today is 6 October 2014, is 2 July 2014 in the past?
         * var result = isPast(new Date(2014, 6, 2))
         * //=> true
         */

    }, {
        key: 'isPast',
        value: function isPast(dirtyDate) {
            return this.parse(dirtyDate).getTime() < new Date().getTime();
        }

        /**
         * @summary Are the given dates in the same day?
         *
         * @description
         * Are the given dates in the same day?
         *
         * @param {Date|String|Number} dateLeft - the first date to check
         * @param {Date|String|Number} dateRight - the second date to check
         * @returns {Boolean} the dates are in the same day
         *
         * @example
         * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
         * var result = isSameDay(
         *   new Date(2014, 8, 4, 6, 0),
         *   new Date(2014, 8, 4, 18, 0)
         * )
         * //=> true
         */

    }, {
        key: 'isSameDay',
        value: function isSameDay(dirtyDateLeft, dirtyDateRight) {
            var dateLeftStartOfDay = this.startOfDay(dirtyDateLeft);
            var dateRightStartOfDay = this.startOfDay(dirtyDateRight);

            return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
        }

        /**
         * @summary Are the given dates in the same hour?
         *
         * @description
         * Are the given dates in the same hour?
         *
         * @param {Date|String|Number} dateLeft - the first date to check
         * @param {Date|String|Number} dateRight - the second date to check
         * @returns {Boolean} the dates are in the same hour
         *
         * @example
         * // Are 4 September 2014 06:00:00 and 4 September 06:30:00 in the same hour?
         * var result = isSameHour(
         *   new Date(2014, 8, 4, 6, 0),
         *   new Date(2014, 8, 4, 6, 30)
         * )
         * //=> true
         */

    }, {
        key: 'isSameHour',
        value: function isSameHour(dirtyDateLeft, dirtyDateRight) {
            var dateLeftStartOfHour = this.startOfHour(dirtyDateLeft);
            var dateRightStartOfHour = this.startOfHour(dirtyDateRight);

            return dateLeftStartOfHour.getTime() === dateRightStartOfHour.getTime();
        }

        /**
         * @summary Are the given dates in the same ISO week?
         *
         * @description
         * Are the given dates in the same ISO week?
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} dateLeft - the first date to check
         * @param {Date|String|Number} dateRight - the second date to check
         * @returns {Boolean} the dates are in the same ISO week
         *
         * @example
         * // Are 1 September 2014 and 7 September 2014 in the same ISO week?
         * var result = isSameISOWeek(
         *   new Date(2014, 8, 1),
         *   new Date(2014, 8, 7)
         * )
         * //=> true
         */

    }, {
        key: 'isSameISOWeek',
        value: function isSameISOWeek(dirtyDateLeft, dirtyDateRight) {
            return this.isSameWeek(dirtyDateLeft, dirtyDateRight, { weekStartsOn: 1 });
        }

        /**
         * @summary Are the given dates in the same ISO week-numbering year?
         *
         * @description
         * Are the given dates in the same ISO week-numbering year?
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} dateLeft - the first date to check
         * @param {Date|String|Number} dateRight - the second date to check
         * @returns {Boolean} the dates are in the same ISO week-numbering year
         *
         * @example
         * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?
         * var result = isSameISOYear(
         *   new Date(2003, 11, 29),
         *   new Date(2005, 0, 2)
         * )
         * //=> true
         */

    }, {
        key: 'isSameISOYear',
        value: function isSameISOYear(dirtyDateLeft, dirtyDateRight) {
            var dateLeftStartOfYear = this.startOfISOYear(dirtyDateLeft);
            var dateRightStartOfYear = this.startOfISOYear(dirtyDateRight);

            return dateLeftStartOfYear.getTime() === dateRightStartOfYear.getTime();
        }

        /**
         * @summary Are the given dates in the same minute?
         *
         * @description
         * Are the given dates in the same minute?
         *
         * @param {Date|String|Number} dateLeft - the first date to check
         * @param {Date|String|Number} dateRight - the second date to check
         * @returns {Boolean} the dates are in the same minute
         *
         * @example
         * // Are 4 September 2014 06:30:00 and 4 September 2014 06:30:15
         * // in the same minute?
         * var result = isSameMinute(
         *   new Date(2014, 8, 4, 6, 30),
         *   new Date(2014, 8, 4, 6, 30, 15)
         * )
         * //=> true
         */

    }, {
        key: 'isSameMinute',
        value: function isSameMinute(dirtyDateLeft, dirtyDateRight) {
            var dateLeftStartOfMinute = this.startOfMinute(dirtyDateLeft);
            var dateRightStartOfMinute = this.startOfMinute(dirtyDateRight);

            return dateLeftStartOfMinute.getTime() === dateRightStartOfMinute.getTime();
        }

        /**
         * @summary Are the given dates in the same month?
         *
         * @description
         * Are the given dates in the same month?
         *
         * @param {Date|String|Number} dateLeft - the first date to check
         * @param {Date|String|Number} dateRight - the second date to check
         * @returns {Boolean} the dates are in the same month
         *
         * @example
         * // Are 2 September 2014 and 25 September 2014 in the same month?
         * var result = isSameMonth(
         *   new Date(2014, 8, 2),
         *   new Date(2014, 8, 25)
         * )
         * //=> true
         */

    }, {
        key: 'isSameMonth',
        value: function isSameMonth(dirtyDateLeft, dirtyDateRight) {
            var dateLeft = this.parse(dirtyDateLeft);
            var dateRight = this.parse(dirtyDateRight);
            return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
        }

        /**
         * @summary Are the given dates in the same year quarter?
         *
         * @description
         * Are the given dates in the same year quarter?
         *
         * @param {Date|String|Number} dateLeft - the first date to check
         * @param {Date|String|Number} dateRight - the second date to check
         * @returns {Boolean} the dates are in the same quarter
         *
         * @example
         * // Are 1 January 2014 and 8 March 2014 in the same quarter?
         * var result = isSameQuarter(
         *   new Date(2014, 0, 1),
         *   new Date(2014, 2, 8)
         * )
         * //=> true
         */

    }, {
        key: 'isSameQuarter',
        value: function isSameQuarter(dirtyDateLeft, dirtyDateRight) {
            var dateLeftStartOfQuarter = this.startOfQuarter(dirtyDateLeft);
            var dateRightStartOfQuarter = this.startOfQuarter(dirtyDateRight);

            return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime();
        }

        /**
         * @summary Are the given dates in the same second?
         *
         * @description
         * Are the given dates in the same second?
         *
         * @param {Date|String|Number} dateLeft - the first date to check
         * @param {Date|String|Number} dateRight - the second date to check
         * @returns {Boolean} the dates are in the same second
         *
         * @example
         * // Are 4 September 2014 06:30:15.000 and 4 September 2014 06:30.15.500
         * // in the same second?
         * var result = isSameSecond(
         *   new Date(2014, 8, 4, 6, 30, 15),
         *   new Date(2014, 8, 4, 6, 30, 15, 500)
         * )
         * //=> true
         */

    }, {
        key: 'isSameSecond',
        value: function isSameSecond(dirtyDateLeft, dirtyDateRight) {
            var dateLeftStartOfSecond = this.startOfSecond(dirtyDateLeft);
            var dateRightStartOfSecond = this.startOfSecond(dirtyDateRight);

            return dateLeftStartOfSecond.getTime() === dateRightStartOfSecond.getTime();
        }

        /**
         * @summary Are the given dates in the same week?
         *
         * @description
         * Are the given dates in the same week?
         *
         * @param {Date|String|Number} dateLeft - the first date to check
         * @param {Date|String|Number} dateRight - the second date to check
         * @param {Object} [options] - the object with options
         * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
         * @returns {Boolean} the dates are in the same week
         *
         * @example
         * // Are 31 August 2014 and 4 September 2014 in the same week?
         * var result = isSameWeek(
         *   new Date(2014, 7, 31),
         *   new Date(2014, 8, 4)
         * )
         * //=> true
         *
         * @example
         * // If week starts with Monday,
         * // are 31 August 2014 and 4 September 2014 in the same week?
         * var result = isSameWeek(
         *   new Date(2014, 7, 31),
         *   new Date(2014, 8, 4),
         *   {weekStartsOn: 1}
         * )
         * //=> false
         */

    }, {
        key: 'isSameWeek',
        value: function isSameWeek(dirtyDateLeft, dirtyDateRight, dirtyOptions) {
            var dateLeftStartOfWeek = this.startOfWeek(dirtyDateLeft, dirtyOptions);
            var dateRightStartOfWeek = this.startOfWeek(dirtyDateRight, dirtyOptions);

            return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();
        }

        /**
         * @summary Are the given dates in the same year?
         *
         * @description
         * Are the given dates in the same year?
         *
         * @param {Date|String|Number} dateLeft - the first date to check
         * @param {Date|String|Number} dateRight - the second date to check
         * @returns {Boolean} the dates are in the same year
         *
         * @example
         * // Are 2 September 2014 and 25 September 2014 in the same year?
         * var result = isSameYear(
         *   new Date(2014, 8, 2),
         *   new Date(2014, 8, 25)
         * )
         * //=> true
         */

    }, {
        key: 'isSameYear',
        value: function isSameYear(dirtyDateLeft, dirtyDateRight) {
            var dateLeft = this.parse(dirtyDateLeft);
            var dateRight = this.parse(dirtyDateRight);
            return dateLeft.getFullYear() === dateRight.getFullYear();
        }

        /**
         * @summary Is the given date Saturday?
         *
         * @description
         * Is the given date Saturday?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is Saturday
         *
         * @example
         * // Is 27 September 2014 Saturday?
         * var result = isSaturday(new Date(2014, 8, 27))
         * //=> true
         */

    }, {
        key: 'isSaturday',
        value: function isSaturday(dirtyDate) {
            return this.parse(dirtyDate).getDay() === 6;
        }

        /**
         * @summary Is the given date so last week?
         *
         * @description
         * Is the given date so last week?
         *
         * @param {Date|String|Number} date - the date to check
         * @param {Object} [options] - the object with options
         * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
         * @returns {Boolean} so last week
         *
         * @example
         * // Is 7 December 2016 so last week?
         * var result = isSoLastWeek(
         *   new Date(2016, 12, 7)
         * )
         * //=> true
         */

    }, {
        key: 'isSoLastWeek',
        value: function isSoLastWeek(dirtyDate, dirtyOptions) {
            return this.isSameWeek(new Date(), this.addWeeks(dirtyDate, 1), dirtyOptions);
        }

        /**
         * @summary Is the given date Sunday?
         *
         * @description
         * Is the given date Sunday?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is Sunday
         *
         * @example
         * // Is 21 September 2014 Sunday?
         * var result = isSunday(new Date(2014, 8, 21))
         * //=> true
         */

    }, {
        key: 'isSunday',
        value: function isSunday(dirtyDate) {
            return this.parse(dirtyDate).getDay() === 0;
        }

        /**
         * @summary Is the given date in the same hour as the current date?
         *
         * @description
         * Is the given date in the same hour as the current date?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is in this hour
         *
         * @example
         * // If now is 25 September 2014 18:30:15.500,
         * // is 25 September 2014 18:00:00 in this hour?
         * var result = isThisHour(new Date(2014, 8, 25, 18))
         * //=> true
         */

    }, {
        key: 'isThisHour',
        value: function isThisHour(dirtyDate) {
            return this.isSameHour(new Date(), dirtyDate);
        }

        /**
         * @summary Is the given date in the same ISO week as the current date?
         *
         * @description
         * Is the given date in the same ISO week as the current date?
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is in this ISO week
         *
         * @example
         * // If today is 25 September 2014, is 22 September 2014 in this ISO week?
         * var result = isThisISOWeek(new Date(2014, 8, 22))
         * //=> true
         */

    }, {
        key: 'isThisISOWeek',
        value: function isThisISOWeek(dirtyDate) {
            return this.isSameISOWeek(new Date(), dirtyDate);
        }

        /**
         * @summary Is the given date in the same ISO week-numbering year as the current date?
         *
         * @description
         * Is the given date in the same ISO week-numbering year as the current date?
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is in this ISO week-numbering year
         *
         * @example
         * // If today is 25 September 2014,
         * // is 30 December 2013 in this ISO week-numbering year?
         * var result = isThisISOYear(new Date(2013, 11, 30))
         * //=> true
         */

    }, {
        key: 'isThisISOYear',
        value: function isThisISOYear(dirtyDate) {
            return this.isSameISOYear(new Date(), dirtyDate);
        }

        /**
         * @summary Is the given date in the same minute as the current date?
         *
         * @description
         * Is the given date in the same minute as the current date?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is in this minute
         *
         * @example
         * // If now is 25 September 2014 18:30:15.500,
         * // is 25 September 2014 18:30:00 in this minute?
         * var result = isThisMinute(new Date(2014, 8, 25, 18, 30))
         * //=> true
         */

    }, {
        key: 'isThisMinute',
        value: function isThisMinute(dirtyDate) {
            return this.isSameMinute(new Date(), dirtyDate);
        }

        /**
         * @summary Is the given date in the same month as the current date?
         *
         * @description
         * Is the given date in the same month as the current date?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is in this month
         *
         * @example
         * // If today is 25 September 2014, is 15 September 2014 in this month?
         * var result = isThisMonth(new Date(2014, 8, 15))
         * //=> true
         */

    }, {
        key: 'isThisMonth',
        value: function isThisMonth(dirtyDate) {
            return this.isSameMonth(new Date(), dirtyDate);
        }

        /**
         * @summary Is the given date in the same quarter as the current date?
         *
         * @description
         * Is the given date in the same quarter as the current date?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is in this quarter
         *
         * @example
         * // If today is 25 September 2014, is 2 July 2014 in this quarter?
         * var result = isThisQuarter(new Date(2014, 6, 2))
         * //=> true
         */

    }, {
        key: 'isThisQuarter',
        value: function isThisQuarter(dirtyDate) {
            return this.isSameQuarter(new Date(), dirtyDate);
        }

        /**
         * @summary Is the given date in the same second as the current date?
         *
         * @description
         * Is the given date in the same second as the current date?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is in this second
         *
         * @example
         * // If now is 25 September 2014 18:30:15.500,
         * // is 25 September 2014 18:30:15.000 in this second?
         * var result = isThisSecond(new Date(2014, 8, 25, 18, 30, 15))
         * //=> true
         */

    }, {
        key: 'isThisSecond',
        value: function isThisSecond(dirtyDate) {
            return this.isSameSecond(new Date(), dirtyDate);
        }

        /**
         * @summary Is the given date in the same week as the current date?
         *
         * @description
         * Is the given date in the same week as the current date?
         *
         * @param {Date|String|Number} date - the date to check
         * @param {Object} [options] - the object with options
         * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
         * @returns {Boolean} the date is in this week
         *
         * @example
         * // If today is 25 September 2014, is 21 September 2014 in this week?
         * var result = isThisWeek(new Date(2014, 8, 21))
         * //=> true
         *
         * @example
         * // If today is 25 September 2014 and week starts with Monday
         * // is 21 September 2014 in this week?
         * var result = isThisWeek(new Date(2014, 8, 21), {weekStartsOn: 1})
         * //=> false
         */

    }, {
        key: 'isThisWeek',
        value: function isThisWeek(dirtyDate, dirtyOptions) {
            return this.isSameWeek(new Date(), dirtyDate, dirtyOptions);
        }

        /**
         * @summary Is the given date in the same year as the current date?
         *
         * @description
         * Is the given date in the same year as the current date?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is in this year
         *
         * @example
         * // If today is 25 September 2014, is 2 July 2014 in this year?
         * var result = isThisYear(new Date(2014, 6, 2))
         * //=> true
         */

    }, {
        key: 'isThisYear',
        value: function isThisYear(dirtyDate) {
            return this.isSameYear(new Date(), dirtyDate);
        }

        /**
         * @summary Is the given date Thursday?
         *
         * @description
         * Is the given date Thursday?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is Thursday
         *
         * @example
         * // Is 25 September 2014 Thursday?
         * var result = isThursday(new Date(2014, 8, 25))
         * //=> true
         */

    }, {
        key: 'isThursday',
        value: function isThursday(dirtyDate) {
            return this.parse(dirtyDate).getDay() === 4;
        }

        /**
         * @summary Is the given date today?
         *
         * @description
         * Is the given date today?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is today
         *
         * @example
         * // If today is 6 October 2014, is 6 October 14:00:00 today?
         * var result = isToday(new Date(2014, 9, 6, 14, 0))
         * //=> true
         */

    }, {
        key: 'isToday',
        value: function isToday(dirtyDate) {
            return this.startOfDay(dirtyDate).getTime() === this.startOfDay(new Date()).getTime();
        }

        /**
         * @summary Is the given date tomorrow?
         *
         * @description
         * Is the given date tomorrow?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is tomorrow
         *
         * @example
         * // If today is 6 October 2014, is 7 October 14:00:00 tomorrow?
         * var result = isTomorrow(new Date(2014, 9, 7, 14, 0))
         * //=> true
         */

    }, {
        key: 'isTomorrow',
        value: function isTomorrow(dirtyDate) {
            var tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            return this.startOfDay(dirtyDate).getTime() === this.startOfDay(tomorrow).getTime();
        }

        /**
         * @summary Is the given date Tuesday?
         *
         * @description
         * Is the given date Tuesday?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is Tuesday
         *
         * @example
         * // Is 23 September 2014 Tuesday?
         * var result = isTuesday(new Date(2014, 8, 23))
         * //=> true
         */

    }, {
        key: 'isTuesday',
        value: function isTuesday(dirtyDate) {
            return this.parse(dirtyDate).getDay() === 2;
        }

        /**
         * @summary Is the given date valid?
         *
         * @description
         * Returns false if argument is Invalid Date and true otherwise.
         * Invalid Date is a Date, whose time value is NaN.
         *
         * Time value of Date: http://es5.github.io/#x15.9.1.1
         *
         * @param {Date} date - the date to check
         * @returns {Boolean} the date is valid
         * @throws {TypeError} argument must be an instance of Date
         *
         * @example
         * // For the valid date:
         * var result = isValid(new Date(2014, 1, 31))
         * //=> true
         *
         * @example
         * // For the invalid date:
         * var result = isValid(new Date(''))
         * //=> false
         */

    }, {
        key: 'isValid',
        value: function isValid(dirtyDate) {
            if (this.isDate(dirtyDate)) {
                return !isNaN(dirtyDate);
            } else {
                throw new TypeError(toString.call(dirtyDate) + ' is not an instance of Date');
            }
        }

        /**
         * @summary Is the given date Wednesday?
         *
         * @description
         * Is the given date Wednesday?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is Wednesday
         *
         * @example
         * // Is 24 September 2014 Wednesday?
         * var result = isWednesday(new Date(2014, 8, 24))
         * //=> true
         */

    }, {
        key: 'isWednesday',
        value: function isWednesday(dirtyDate) {
            return this.parse(dirtyDate).getDay() === 3;
        }

        /**
         * @summary Does the given date fall on a weekend?
         *
         * @description
         * Does the given date fall on a weekend?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date falls on a weekend
         *
         * @example
         * // Does 5 October 2014 fall on a weekend?
         * var result = isWeekend(new Date(2014, 9, 5))
         * //=> true
         */

    }, {
        key: 'isWeekend',
        value: function isWeekend(dirtyDate) {
            var date = this.parse(dirtyDate);
            var day = date.getDay();
            return day === 0 || day === 6;
        }

        /**
         * @summary Is the given date within the range?
         *
         * @description
         * Is the given date within the range?
         *
         * @param {Date|String|Number} date - the date to check
         * @param {Date|String|Number} startDate - the start of range
         * @param {Date|String|Number} endDate - the end of range
         * @returns {Boolean} the date is within the range
         * @throws {Error} startDate cannot be after endDate
         *
         * @example
         * // For the date within the range:
         * isWithinRange(
         *   new Date(2014, 0, 3), new Date(2014, 0, 1), new Date(2014, 0, 7)
         * )
         * //=> true
         *
         * @example
         * // For the date outside of the range:
         * isWithinRange(
         *   new Date(2014, 0, 10), new Date(2014, 0, 1), new Date(2014, 0, 7)
         * )
         * //=> false
         */

    }, {
        key: 'isWithinRange',
        value: function isWithinRange(dirtyDate, dirtyStartDate, dirtyEndDate) {
            var time = this.parse(dirtyDate).getTime();
            var startTime = this.parse(dirtyStartDate).getTime();
            var endTime = this.parse(dirtyEndDate).getTime();

            if (startTime > endTime) {
                throw new Error('The start of the range cannot be after the end of the range');
            }

            return time >= startTime && time <= endTime;
        }

        /**
         * @summary Is the given date yesterday?
         *
         * @description
         * Is the given date yesterday?
         *
         * @param {Date|String|Number} date - the date to check
         * @returns {Boolean} the date is yesterday
         *
         * @example
         * // If today is 6 October 2014, is 5 October 14:00:00 yesterday?
         * var result = isYesterday(new Date(2014, 9, 5, 14, 0))
         * //=> true
         */

    }, {
        key: 'isYesterday',
        value: function isYesterday(dirtyDate) {
            var yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            return this.startOfDay(dirtyDate).getTime() === this.startOfDay(yesterday).getTime();
        }

        /**
         * @summary Return the last day of an ISO week for the given date.
         *
         * @description
         * Return the last day of an ISO week for the given date.
         * The result will be in the local timezone.
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the last day of an ISO week
         *
         * @example
         * // The last day of an ISO week for 2 September 2014 11:55:00:
         * var result = lastDayOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
         * //=> Sun Sep 07 2014 00:00:00
         */

    }, {
        key: 'lastDayOfISOWeek',
        value: function lastDayOfISOWeek(dirtyDate) {
            return this.lastDayOfWeek(dirtyDate, { weekStartsOn: 1 });
        }

        /**
         * @summary Return the last day of an ISO week-numbering year for the given date.
         *
         * @description
         * Return the last day of an ISO week-numbering year,
         * which always starts 3 days before the year's first Thursday.
         * The result will be in the local timezone.
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the end of an ISO week-numbering year
         *
         * @example
         * // The last day of an ISO week-numbering year for 2 July 2005:
         * var result = lastDayOfISOYear(new Date(2005, 6, 2))
         * //=> Sun Jan 01 2006 00:00:00
         */

    }, {
        key: 'lastDayOfISOYear',
        value: function lastDayOfISOYear(dirtyDate) {
            var year = this.getISOYear(dirtyDate);
            var fourthOfJanuary = new Date(0);
            fourthOfJanuary.setFullYear(year + 1, 0, 4);
            fourthOfJanuary.setHours(0, 0, 0, 0);
            var date = this.startOfISOWeek(fourthOfJanuary);
            date.setDate(date.getDate() - 1);
            return date;
        }

        /**
         * @summary Return the last day of a month for the given date.
         *
         * @description
         * Return the last day of a month for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the last day of a month
         *
         * @example
         * // The last day of a month for 2 September 2014 11:55:00:
         * var result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))
         * //=> Tue Sep 30 2014 00:00:00
         */

    }, {
        key: 'lastDayOfMonth',
        value: function lastDayOfMonth(dirtyDate) {
            var date = this.parse(dirtyDate);
            var month = date.getMonth();
            date.setFullYear(date.getFullYear(), month + 1, 0);
            date.setHours(0, 0, 0, 0);
            return date;
        }

        /**
         * @summary Return the last day of a year quarter for the given date.
         *
         * @description
         * Return the last day of a year quarter for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the last day of a quarter
         *
         * @example
         * // The last day of a quarter for 2 September 2014 11:55:00:
         * var result = lastDayOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
         * //=> Tue Sep 30 2014 00:00:00
         */

    }, {
        key: 'lastDayOfQuarter',
        value: function lastDayOfQuarter(dirtyDate) {
            var date = this.parse(dirtyDate);
            var currentMonth = date.getMonth();
            var month = currentMonth - currentMonth % 3 + 3;
            date.setMonth(month, 0);
            date.setHours(0, 0, 0, 0);
            return date;
        }

        /**
         * @summary Return the last day of a week for the given date.
         *
         * @description
         * Return the last day of a week for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @param {Object} [options] - the object with options
         * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
         * @returns {Date} the last day of a week
         *
         * @example
         * // The last day of a week for 2 September 2014 11:55:00:
         * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0))
         * //=> Sat Sep 06 2014 00:00:00
         *
         * @example
         * // If the week starts on Monday, the last day of the week for 2 September 2014 11:55:00:
         * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})
         * //=> Sun Sep 07 2014 00:00:00
         */

    }, {
        key: 'lastDayOfWeek',
        value: function lastDayOfWeek(dirtyDate, dirtyOptions) {
            var weekStartsOn = dirtyOptions ? Number(dirtyOptions.weekStartsOn) || 0 : 0;

            var date = this.parse(dirtyDate);
            var day = date.getDay();
            var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);

            date.setHours(0, 0, 0, 0);
            date.setDate(date.getDate() + diff);
            return date;
        }

        /**
         * @summary Return the last day of a year for the given date.
         *
         * @description
         * Return the last day of a year for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the last day of a year
         *
         * @example
         * // The last day of a year for 2 September 2014 11:55:00:
         * var result = lastDayOfYear(new Date(2014, 8, 2, 11, 55, 00))
         * //=> Wed Dec 31 2014 00:00:00
         */

    }, {
        key: 'lastDayOfYear',
        value: function lastDayOfYear(dirtyDate) {
            var date = this.parse(dirtyDate);
            var year = date.getFullYear();
            date.setFullYear(year + 1, 0, 0);
            date.setHours(0, 0, 0, 0);
            return date;
        }

        /**
         * @summary Return the latest of the given dates.
         *
         * @description
         * Return the latest of the given dates.
         *
         * @param {...(Date|String|Number)} dates - the dates to compare
         * @returns {Date} the latest of the dates
         *
         * @example
         * // Which of these dates is the latest?
         * var result = max(
         *   new Date(1989, 6, 10),
         *   new Date(1987, 1, 11),
         *   new Date(1995, 6, 2),
         *   new Date(1990, 0, 1)
         * )
         * //=> Sun Jul 02 1995 00:00:00
         */

    }, {
        key: 'max',
        value: function max() {
            var dirtyDates = Array.prototype.slice.call(arguments);
            var dates = dirtyDates.map(function (dirtyDate) {
                return this.parse(dirtyDate);
            });
            var latestTimestamp = Math.max.apply(null, dates);
            return new Date(latestTimestamp);
        }

        /**
         * @summary Return the earliest of the given dates.
         *
         * @description
         * Return the earliest of the given dates.
         *
         * @param {...(Date|String|Number)} dates - the dates to compare
         * @returns {Date} the earliest of the dates
         *
         * @example
         * // Which of these dates is the earliest?
         * var result = min(
         *   new Date(1989, 6, 10),
         *   new Date(1987, 1, 11),
         *   new Date(1995, 6, 2),
         *   new Date(1990, 0, 1)
         * )
         * //=> Wed Feb 11 1987 00:00:00
         */

    }, {
        key: 'min',
        value: function min() {
            var dirtyDates = Array.prototype.slice.call(arguments);
            var dates = dirtyDates.map(function (dirtyDate) {
                return this.parse(dirtyDate);
            });
            var earliestTimestamp = Math.min.apply(null, dates);
            return new Date(earliestTimestamp);
        }

        /**
         * @summary Convert the given argument to an instance of Date.
         *
         * @description
         * Convert the given argument to an instance of Date.
         *
         * If the argument is an instance of Date, the  returns its clone.
         *
         * If the argument is a number, it is treated as a timestamp.
         *
         * If an argument is a string, the  tries to this.parse it.
         *  accepts complete ISO 8601 formats as well as partial implementations.
         * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
         *
         * If all above fails, the  passes the given argument to Date constructor.
         *
         * @param {Date|String|Number} argument - the value to convert
         * @param {Object} [options] - the object with options
         * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format
         * @returns {Date} the this.parsed date in the local time zone
         *
         * @example
         * // Convert string '2014-02-11T11:30:30' to date:
         * var result = this.parse('2014-02-11T11:30:30')
         * //=> Tue Feb 11 2014 11:30:30
         *
         * @example
         * // this.parse string '+02014101',
         * // if the additional number of digits in the extended year format is 1:
         * var result = this.parse('+02014101', {additionalDigits: 1})
         * //=> Fri Apr 11 2014 00:00:00
         */

    }, {
        key: 'parse',
        value: function parse(argument, dirtyOptions) {
            if (this.isDate(argument)) {
                // Prevent the date to lose the milliseconds when passed to new Date() in IE10
                return new Date(argument.getTime());
            } else if (typeof argument !== 'string') {
                return new Date(argument);
            }

            var options = dirtyOptions || {};
            var additionalDigits = options.additionalDigits;
            if (additionalDigits == null) {
                additionalDigits = DEFAULT_ADDITIONAL_DIGITS;
            } else {
                additionalDigits = Number(additionalDigits);
            }

            var dateStrings = splitDateString(argument);

            var parseYearResult = this.parseYear(dateStrings.date, additionalDigits);
            var year = this.parseYearResult.year;
            var restDateString = this.parseYearResult.restDateString;

            var date = this.parseDate(restDateString, year);

            if (date) {
                var timestamp = date.getTime();
                var time = 0;
                var offset;

                if (dateStrings.time) {
                    time = this.parseTime(dateStrings.time);
                }

                if (dateStrings.timezone) {
                    offset = this.parseTimezone(dateStrings.timezone);
                } else {
                    // get offset accurate to hour in timezones that change offset
                    offset = new Date(timestamp + time).getTimezoneOffset();
                    offset = new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE).getTimezoneOffset();
                }

                return new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE);
            } else {
                return new Date(argument);
            }
        }
    }, {
        key: 'splitDateString',
        value: function splitDateString(dateString) {
            var dateStrings = {};
            var array = dateString.split(parseTokenDateTimeDelimeter);
            var timeString;

            if (parseTokenPlainTime.test(array[0])) {
                dateStrings.date = null;
                timeString = array[0];
            } else {
                dateStrings.date = array[0];
                timeString = array[1];
            }

            if (timeString) {
                var token = this.parseTokenTimezone.exec(timeString);
                if (token) {
                    dateStrings.time = timeString.replace(token[1], '');
                    dateStrings.timezone = token[1];
                } else {
                    dateStrings.time = timeString;
                }
            }

            return dateStrings;
        }
    }, {
        key: 'parseYear',
        value: function parseYear(dateString, additionalDigits) {
            var parseTokenYYY = this.parseTokensYYY[additionalDigits];
            var parseTokenYYYYY = this.parseTokensYYYYY[additionalDigits];

            var token;

            // YYYY or ±YYYYY
            token = this.parseTokenYYYY.exec(dateString) || this.parseTokenYYYYY.exec(dateString);
            if (token) {
                var yearString = token[1];
                return {
                    year: this.parseInt(yearString, 10),
                    restDateString: dateString.slice(yearString.length)
                };
            }

            // YY or ±YYY
            token = this.parseTokenYY.exec(dateString) || this.parseTokenYYY.exec(dateString);
            if (token) {
                var centuryString = token[1];
                return {
                    year: this.parseInt(centuryString, 10) * 100,
                    restDateString: dateString.slice(centuryString.length)
                };
            }

            // Invalid ISO-formatted year
            return {
                year: null
            };
        }
    }, {
        key: 'parseDate',
        value: function parseDate(dateString, year) {
            // Invalid ISO-formatted year
            if (year === null) {
                return null;
            }

            var token;
            var date;
            var month;
            var week;

            // YYYY
            if (dateString.length === 0) {
                date = new Date(0);
                date.setUTCFullYear(year);
                return date;
            }

            // YYYY-MM
            token = this.parseTokenMM.exec(dateString);
            if (token) {
                date = new Date(0);
                month = this.parseInt(token[1], 10) - 1;
                date.setUTCFullYear(year, month);
                return date;
            }

            // YYYY-DDD or YYYYDDD
            token = this.parseTokenDDD.exec(dateString);
            if (token) {
                date = new Date(0);
                var dayOfYear = this.parseInt(token[1], 10);
                date.setUTCFullYear(year, 0, dayOfYear);
                return date;
            }

            // YYYY-MM-DD or YYYYMMDD
            token = this.parseTokenMMDD.exec(dateString);
            if (token) {
                date = new Date(0);
                month = this.parseInt(token[1], 10) - 1;
                var day = this.parseInt(token[2], 10);
                date.setUTCFullYear(year, month, day);
                return date;
            }

            // YYYY-Www or YYYYWww
            token = this.parseTokenWww.exec(dateString);
            if (token) {
                week = this.parseInt(token[1], 10) - 1;
                return dayOfISOYear(year, week);
            }

            // YYYY-Www-D or YYYYWwwD
            token = this.parseTokenWwwD.exec(dateString);
            if (token) {
                week = this.parseInt(token[1], 10) - 1;
                var dayOfWeek = this.parseInt(token[2], 10) - 1;
                return dayOfISOYear(year, week, dayOfWeek);
            }

            // Invalid ISO-formatted date
            return null;
        }
    }, {
        key: 'parseTime',
        value: function parseTime(timeString) {
            var token;
            var hours;
            var minutes;

            // hh
            token = this.parseTokenHH.exec(timeString);
            if (token) {
                hours = this.parseFloat(token[1].replace(',', '.'));
                return hours % 24 * MILLISECONDS_IN_HOUR;
            }

            // hh:mm or hhmm
            token = this.parseTokenHHMM.exec(timeString);
            if (token) {
                hours = this.parseInt(token[1], 10);
                minutes = this.parseFloat(token[2].replace(',', '.'));
                return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;
            }

            // hh:mm:ss or hhmmss
            token = this.parseTokenHHMMSS.exec(timeString);
            if (token) {
                hours = this.parseInt(token[1], 10);
                minutes = this.parseInt(token[2], 10);
                var seconds = this.parseFloat(token[3].replace(',', '.'));
                return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;
            }

            // Invalid ISO-formatted time
            return null;
        }
    }, {
        key: 'parseTimezone',
        value: function parseTimezone(timezoneString) {
            var token;
            var absoluteOffset;

            // Z
            token = this.parseTokenTimezoneZ.exec(timezoneString);
            if (token) {
                return 0;
            }

            // ±hh
            token = this.parseTokenTimezoneHH.exec(timezoneString);
            if (token) {
                absoluteOffset = this.parseInt(token[2], 10) * 60;
                return token[1] === '+' ? -absoluteOffset : absoluteOffset;
            }

            // ±hh:mm or ±hhmm
            token = this.parseTokenTimezoneHHMM.exec(timezoneString);
            if (token) {
                absoluteOffset = this.parseInt(token[2], 10) * 60 + this.parseInt(token[3], 10);
                return token[1] === '+' ? -absoluteOffset : absoluteOffset;
            }

            return 0;
        }
    }, {
        key: 'dayOfISOYear',
        value: function dayOfISOYear(isoYear, week, day) {
            week = week || 0;
            day = day || 0;
            var date = new Date(0);
            date.setUTCFullYear(isoYear, 0, 4);
            var fourthOfJanuaryDay = date.getUTCDay() || 7;
            var diff = week * 7 + day + 1 - fourthOfJanuaryDay;
            date.setUTCDate(date.getUTCDate() + diff);
            return date;
        }

        /**
         * @summary Set the day of the month to the given date.
         *
         * @description
         * Set the day of the month to the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} dayOfMonth - the day of the month of the new date
         * @returns {Date} the new date with the day of the month setted
         *
         * @example
         * // Set the 30th day of the month to 1 September 2014:
         * var result = setDate(new Date(2014, 8, 1), 30)
         * //=> Tue Sep 30 2014 00:00:00
         */

    }, {
        key: 'setDate',
        value: function setDate(dirtyDate, dirtyDayOfMonth) {
            var date = this.parse(dirtyDate);
            var dayOfMonth = Number(dirtyDayOfMonth);
            date.setDate(dayOfMonth);
            return date;
        }

        /**
         * @summary Set the day of the week to the given date.
         *
         * @description
         * Set the day of the week to the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} day - the day of the week of the new date
         * @param {Object} [options] - the object with options
         * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
         * @returns {Date} the new date with the day of the week setted
         *
         * @example
         * // Set Sunday to 1 September 2014:
         * var result = setDay(new Date(2014, 8, 1), 0)
         * //=> Sun Aug 31 2014 00:00:00
         *
         * @example
         * // If week starts with Monday, set Sunday to 1 September 2014:
         * var result = setDay(new Date(2014, 8, 1), 0, {weekStartsOn: 1})
         * //=> Sun Sep 07 2014 00:00:00
         */

    }, {
        key: 'setDay',
        value: function setDay(dirtyDate, dirtyDay, dirtyOptions) {
            var weekStartsOn = dirtyOptions ? Number(dirtyOptions.weekStartsOn) || 0 : 0;
            var date = this.parse(dirtyDate);
            var day = Number(dirtyDay);
            var currentDay = date.getDay();

            var remainder = day % 7;
            var dayIndex = (remainder + 7) % 7;

            var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
            return this.addDays(date, diff);
        }

        /**
         * @summary Set the day of the year to the given date.
         *
         * @description
         * Set the day of the year to the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} dayOfYear - the day of the year of the new date
         * @returns {Date} the new date with the day of the year setted
         *
         * @example
         * // Set the 2nd day of the year to 2 July 2014:
         * var result = setDayOfYear(new Date(2014, 6, 2), 2)
         * //=> Thu Jan 02 2014 00:00:00
         */

    }, {
        key: 'setDayOfYear',
        value: function setDayOfYear(dirtyDate, dirtyDayOfYear) {
            var date = this.parse(dirtyDate);
            var dayOfYear = Number(dirtyDayOfYear);
            date.setMonth(0);
            date.setDate(dayOfYear);
            return date;
        }

        /**
         * @summary Set the hours to the given date.
         *
         * @description
         * Set the hours to the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} hours - the hours of the new date
         * @returns {Date} the new date with the hours setted
         *
         * @example
         * // Set 4 hours to 1 September 2014 11:30:00:
         * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)
         * //=> Mon Sep 01 2014 04:30:00
         */

    }, {
        key: 'setHours',
        value: function setHours(dirtyDate, dirtyHours) {
            var date = this.parse(dirtyDate);
            var hours = Number(dirtyHours);
            date.setHours(hours);
            return date;
        }

        /**
         * @summary Set the day of the ISO week to the given date.
         *
         * @description
         * Set the day of the ISO week to the given date.
         * ISO week starts with Monday.
         * 7 is the index of Sunday, 1 is the index of Monday etc.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} day - the day of the ISO week of the new date
         * @returns {Date} the new date with the day of the ISO week setted
         *
         * @example
         * // Set Sunday to 1 September 2014:
         * var result = setISODay(new Date(2014, 8, 1), 7)
         * //=> Sun Sep 07 2014 00:00:00
         */

    }, {
        key: 'setISODay',
        value: function setISODay(dirtyDate, dirtyDay) {
            var date = this.parse(dirtyDate);
            var day = Number(dirtyDay);
            var currentDay = getISODay(date);
            var diff = day - currentDay;
            return this.addDays(date, diff);
        }

        /**
         * @summary Set the ISO week to the given date.
         *
         * @description
         * Set the ISO week to the given date, saving the weekday number.
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} isoWeek - the ISO week of the new date
         * @returns {Date} the new date with the ISO week setted
         *
         * @example
         * // Set the 53rd ISO week to 7 August 2004:
         * var result = setISOWeek(new Date(2004, 7, 7), 53)
         * //=> Sat Jan 01 2005 00:00:00
         */

    }, {
        key: 'setISOWeek',
        value: function setISOWeek(dirtyDate, dirtyISOWeek) {
            var date = this.parse(dirtyDate);
            var isoWeek = Number(dirtyISOWeek);
            var diff = this.getISOWeek(date) - isoWeek;
            date.setDate(date.getDate() - diff * 7);
            return date;
        }

        /**
         * @summary Return the start of an ISO week-numbering year for the given date.
         *
         * @description
         * Return the start of an ISO week-numbering year,
         * which always starts 3 days before the year's first Thursday.
         * The result will be in the local timezone.
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the start of an ISO year
         *
         * @example
         * // The start of an ISO week-numbering year for 2 July 2005:
         * var result = startOfISOYear(new Date(2005, 6, 2))
         * //=> Mon Jan 03 2005 00:00:00
         */

    }, {
        key: 'startOfISOYear',
        value: function startOfISOYear(dirtyDate) {
            var year = this.getISOYear(dirtyDate);
            var fourthOfJanuary = new Date(0);
            fourthOfJanuary.setFullYear(year, 0, 4);
            fourthOfJanuary.setHours(0, 0, 0, 0);
            var date = this.startOfISOWeek(fourthOfJanuary);
            return date;
        }

        /**
         * @summary Return the start of a minute for the given date.
         *
         * @description
         * Return the start of a minute for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the start of a minute
         *
         * @example
         * // The start of a minute for 1 December 2014 22:15:45.400:
         * var result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
         * //=> Mon Dec 01 2014 22:15:00
         */

    }, {
        key: 'startOfMinute',
        value: function startOfMinute(dirtyDate) {
            var date = this.parse(dirtyDate);
            date.setSeconds(0, 0);
            return date;
        }

        /**
         * @category Month Helpers
         * @summary Return the start of a month for the given date.
         *
         * @description
         * Return the start of a month for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the start of a month
         *
         * @example
         * // The start of a month for 2 September 2014 11:55:00:
         * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
         * //=> Mon Sep 01 2014 00:00:00
         */

    }, {
        key: 'startOfMonth',
        value: function startOfMonth(dirtyDate) {
            var date = this.parse(dirtyDate);
            date.setDate(1);
            date.setHours(0, 0, 0, 0);
            return date;
        }

        /**
         * @summary Return the start of a year quarter for the given date.
         *
         * @description
         * Return the start of a year quarter for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the start of a quarter
         *
         * @example
         * // The start of a quarter for 2 September 2014 11:55:00:
         * var result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
         * //=> Tue Jul 01 2014 00:00:00
         */

    }, {
        key: 'startOfQuarter',
        value: function startOfQuarter(dirtyDate) {
            var date = this.parse(dirtyDate);
            var currentMonth = date.getMonth();
            var month = currentMonth - currentMonth % 3;
            date.setMonth(month, 1);
            date.setHours(0, 0, 0, 0);
            return date;
        }

        /**
         * @summary Return the start of a second for the given date.
         *
         * @description
         * Return the start of a second for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @returns {Date} the start of a second
         *
         * @example
         * // The start of a second for 1 December 2014 22:15:45.400:
         * var result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
         * //=> Mon Dec 01 2014 22:15:45.000
         */

    }, {
        key: 'startOfSecond',
        value: function startOfSecond(dirtyDate) {
            var date = this.parse(dirtyDate);
            date.setMilliseconds(0);
            return date;
        }

        /**
         * @summary Return the start of today.
         *
         * @description
         * Return the start of today.
         *
         * @returns {Date} the start of today
         *
         * @example
         * // If today is 6 October 2014:
         * var result = startOfToday()
         * //=> Mon Oct 6 2014 00:00:00
         */

    }, {
        key: 'startOfToday',
        value: function startOfToday() {
            return this.startOfDay(new Date());
        }

        /**
         * @summary Return the start of tomorrow.
         *
         * @description
         * Return the start of tomorrow.
         *
         * @returns {Date} the start of tomorrow
         *
         * @example
         * // If today is 6 October 2014:
         * var result = startOfTomorrow()
         * //=> Tue Oct 7 2014 00:00:00
         */

    }, {
        key: 'startOfTomorrow',
        value: function startOfTomorrow() {
            var now = new Date();
            var year = now.getFullYear();
            var month = now.getMonth();
            var day = now.getDate();

            var date = new Date(0);
            date.setFullYear(year, month, day + 1);
            date.setHours(0, 0, 0, 0);
            return date;
        }

        /**
         * @summary Return the start of a week for the given date.
         *
         * @description
         * Return the start of a week for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @param {Object} [options] - the object with options
         * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
         * @returns {Date} the start of a week
         *
         * @example
         * // The start of a week for 2 September 2014 11:55:00:
         * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
         * //=> Sun Aug 31 2014 00:00:00
         *
         * @example
         * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
         * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})
         * //=> Mon Sep 01 2014 00:00:00
         */

    }, {
        key: 'startOfWeek',
        value: function startOfWeek(dirtyDate, dirtyOptions) {
            var weekStartsOn = dirtyOptions ? Number(dirtyOptions.weekStartsOn) || 0 : 0;

            var date = this.parse(dirtyDate);
            var day = date.getDay();
            var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;

            date.setDate(date.getDate() - diff);
            date.setHours(0, 0, 0, 0);
            return date;
        }

        /**
         * @summary Return the start of yesterday.
         *
         * @description
         * Return the start of yesterday.
         *
         * @returns {Date} the start of yesterday
         *
         * @example
         * // If today is 6 October 2014:
         * var result = startOfYesterday()
         * //=> Sun Oct 5 2014 00:00:00
         */

    }, {
        key: 'startOfYesterday',
        value: function startOfYesterday() {
            var now = new Date();
            var year = now.getFullYear();
            var month = now.getMonth();
            var day = now.getDate();

            var date = new Date(0);
            date.setFullYear(year, month, day - 1);
            date.setHours(0, 0, 0, 0);
            return date;
        }

        /**
         * @name startOfDay
         * @category Day Helpers
         * @summary Return the start of a day for the given date.
         *
         * @description
         * Return the start of a day for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|String|Number} date - the original date
         * @param {Options} [options] - the object with options. See [Options]
         * @param {0|1|2} [options.additionalDigits=2] - passed to `parse`. See [parse]
         * @returns {Date} the start of a day
         * @throws {TypeError} 1 argument required
         * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
         *
         * @example
         * // The start of a day for 2 September 2014 11:55:00:
         * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
         * //=> Tue Sep 02 2014 00:00:00
         */

    }, {
        key: 'startOfDay',
        value: function startOfDay(dirtyDate, dirtyOptions) {
            if (arguments.length < 1) {
                throw new TypeError('1 argument required, but only ' + arguments.length + ' present');
            }

            var date = this.parse(dirtyDate, dirtyOptions);
            date.setHours(0, 0, 0, 0);
            return date;
        }

        /**
         * @summary Subtract the specified number of days from the given date.
         *
         * @description
         * Subtract the specified number of days from the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of days to be subtracted
         * @returns {Date} the new date with the days subtracted
         *
         * @example
         * // Subtract 10 days from 1 September 2014:
         * var result = subDays(new Date(2014, 8, 1), 10)
         * //=> Fri Aug 22 2014 00:00:00
         */

    }, {
        key: 'subDays',
        value: function subDays(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            return this.addDays(dirtyDate, -amount);
        }

        /**
         * @summary Subtract the specified number of hours from the given date.
         *
         * @description
         * Subtract the specified number of hours from the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of hours to be subtracted
         * @returns {Date} the new date with the hours subtracted
         *
         * @example
         * // Subtract 2 hours from 11 July 2014 01:00:00:
         * var result = subHours(new Date(2014, 6, 11, 1, 0), 2)
         * //=> Thu Jul 10 2014 23:00:00
         */

    }, {
        key: 'subHours',
        value: function subHours(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            return this.addHours(dirtyDate, -amount);
        }

        /**
         * @summary Subtract the specified number of ISO week-numbering years from the given date.
         *
         * @description
         * Subtract the specified number of ISO week-numbering years from the given date.
         *
         * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of ISO week-numbering years to be subtracted
         * @returns {Date} the new date with the ISO week-numbering years subtracted
         *
         * @example
         * // Subtract 5 ISO week-numbering years from 1 September 2014:
         * var result = subISOYears(new Date(2014, 8, 1), 5)
         * //=> Mon Aug 31 2009 00:00:00
         */

    }, {
        key: 'subISOYears',
        value: function subISOYears(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            return this.addISOYears(dirtyDate, -amount);
        }

        /**
         * @summary Subtract the specified number of milliseconds from the given date.
         *
         * @description
         * Subtract the specified number of milliseconds from the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of milliseconds to be subtracted
         * @returns {Date} the new date with the milliseconds subtracted
         *
         * @example
         * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
         * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
         * //=> Thu Jul 10 2014 12:45:29.250
         */

    }, {
        key: 'subMilliseconds',
        value: function subMilliseconds(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            return this.addMilliseconds(dirtyDate, -amount);
        }

        /**
         * @summary Subtract the specified number of minutes from the given date.
         *
         * @description
         * Subtract the specified number of minutes from the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of minutes to be subtracted
         * @returns {Date} the new date with the mintues subtracted
         *
         * @example
         * // Subtract 30 minutes from 10 July 2014 12:00:00:
         * var result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)
         * //=> Thu Jul 10 2014 11:30:00
         */

    }, {
        key: 'subMinutes',
        value: function subMinutes(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            return this.addMinutes(dirtyDate, -amount);
        }

        /**
         * @summary Subtract the specified number of months from the given date.
         *
         * @description
         * Subtract the specified number of months from the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of months to be subtracted
         * @returns {Date} the new date with the months subtracted
         *
         * @example
         * // Subtract 5 months from 1 February 2015:
         * var result = subMonths(new Date(2015, 1, 1), 5)
         * //=> Mon Sep 01 2014 00:00:00
         */

    }, {
        key: 'subMonths',
        value: function subMonths(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            return this.addMonths(dirtyDate, -amount);
        }

        /**
         * @summary Subtract the specified number of year quarters from the given date.
         *
         * @description
         * Subtract the specified number of year quarters from the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of quarters to be subtracted
         * @returns {Date} the new date with the quarters subtracted
         *
         * @example
         * // Subtract 3 quarters from 1 September 2014:
         * var result = subQuarters(new Date(2014, 8, 1), 3)
         * //=> Sun Dec 01 2013 00:00:00
         */

    }, {
        key: 'subQuarters',
        value: function subQuarters(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            return this.addQuarters(dirtyDate, -amount);
        }

        /**
         * @summary Subtract the specified number of seconds from the given date.
         *
         * @description
         * Subtract the specified number of seconds from the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of seconds to be subtracted
         * @returns {Date} the new date with the seconds subtracted
         *
         * @example
         * // Subtract 30 seconds from 10 July 2014 12:45:00:
         * var result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
         * //=> Thu Jul 10 2014 12:44:30
         */

    }, {
        key: 'subSeconds',
        value: function subSeconds(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            return this.addSeconds(dirtyDate, -amount);
        }

        /**
         * @category Week Helpers
         * @summary Subtract the specified number of weeks from the given date.
         *
         * @description
         * Subtract the specified number of weeks from the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of weeks to be subtracted
         * @returns {Date} the new date with the weeks subtracted
         *
         * @example
         * // Subtract 4 weeks from 1 September 2014:
         * var result = subWeeks(new Date(2014, 8, 1), 4)
         * //=> Mon Aug 04 2014 00:00:00
         */

    }, {
        key: 'subWeeks',
        value: function subWeeks(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            return this.addWeeks(dirtyDate, -amount);
        }

        /**
         * @summary Subtract the specified number of years from the given date.
         *
         * @description
         * Subtract the specified number of years from the given date.
         *
         * @param {Date|String|Number} date - the date to be changed
         * @param {Number} amount - the amount of years to be subtracted
         * @returns {Date} the new date with the years subtracted
         *
         * @example
         * // Subtract 5 years from 1 September 2014:
         * var result = subYears(new Date(2014, 8, 1), 5)
         * //=> Tue Sep 01 2009 00:00:00
         */

    }, {
        key: 'subYears',
        value: function subYears(dirtyDate, dirtyAmount) {
            var amount = Number(dirtyAmount);
            return this.addYears(dirtyDate, -amount);
        }
    }, {
        key: 'buildFormattingTokensRegExp',
        value: function buildFormattingTokensRegExp(formatters) {
            var formatterKeys = [];
            for (var key in formatters) {
                if (formatters.hasOwnProperty(key)) {
                    formatterKeys.push(key);
                }
            }

            var formattingTokens = commonFormatterKeys.concat(formatterKeys).sort().reverse();
            var formattingTokensRegExp = new RegExp('(\\[[^\\[]*\\])|(\\\\)?' + '(' + formattingTokens.join('|') + '|.)', 'g');

            return formattingTokensRegExp;
        }
    }, {
        key: 'buildDistanceInWordsLocale',
        value: function buildDistanceInWordsLocale() {
            var distanceInWordsLocale = {
                lessThanXSeconds: {
                    one: 'menos de um segundo',
                    other: 'menos de {{count}} segundos'
                },

                xSeconds: {
                    one: '1 segundo',
                    other: '{{count}} segundos'
                },

                halfAMinute: 'meio minuto',

                lessThanXMinutes: {
                    one: 'menos de um minuto',
                    other: 'menos de {{count}} minutos'
                },

                xMinutes: {
                    one: '1 minuto',
                    other: '{{count}} minutos'
                },

                aboutXHours: {
                    one: 'aproximadamente 1 hora',
                    other: 'aproximadamente {{count}} horas'
                },

                xHours: {
                    one: '1 hora',
                    other: '{{count}} horas'
                },

                xDays: {
                    one: '1 dia',
                    other: '{{count}} dias'
                },

                aboutXMonths: {
                    one: 'aproximadamente 1 mês',
                    other: 'aproximadamente {{count}} meses'
                },

                xMonths: {
                    one: '1 mês',
                    other: '{{count}} meses'
                },

                aboutXYears: {
                    one: 'aproximadamente 1 ano',
                    other: 'aproximadamente {{count}} anos'
                },

                xYears: {
                    one: '1 ano',
                    other: '{{count}} anos'
                },

                overXYears: {
                    one: 'mais de 1 ano',
                    other: 'mais de {{count}} anos'
                },

                almostXYears: {
                    one: 'quase 1 ano',
                    other: 'quase {{count}} anos'
                }
            };

            function localize(token, count, options) {
                options = options || {};

                var result;
                if (typeof distanceInWordsLocale[token] === 'string') {
                    result = distanceInWordsLocale[token];
                } else if (count === 1) {
                    result = distanceInWordsLocale[token].one;
                } else {
                    result = distanceInWordsLocale[token].other.replace('{{count}}', count);
                }

                if (options.addSuffix) {
                    if (options.comparison > 0) {
                        return 'daqui a ' + result;
                    } else {
                        return 'há ' + result;
                    }
                }

                return result;
            }

            return {
                localize: localize
            };
        }
    }, {
        key: 'buildFormatLocale',
        value: function buildFormatLocale() {
            var months3char = ['jan', 'fev', 'mar', 'abr', 'mai', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez'];
            var monthsFull = ['janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'];
            var weekdays2char = ['do', 'se', 'te', 'qa', 'qi', 'se', 'sa'];
            var weekdays3char = ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 'sáb'];
            var weekdaysFull = ['domingo', 'segunda-feira', 'terça-feira', 'quarta-feira', 'quinta-feira', 'sexta-feira', 'sábado'];
            var meridiemUppercase = ['AM', 'PM'];
            var meridiemLowercase = ['am', 'pm'];
            var meridiemFull = ['a.m.', 'p.m.'];

            var formatters = {
                // Month: Jan, Feb, ..., Dec
                'MMM': function MMM(date) {
                    return months3char[date.getMonth()];
                },

                // Month: January, February, ..., December
                'MMMM': function MMMM(date) {
                    return monthsFull[date.getMonth()];
                },

                // Day of week: Su, Mo, ..., Sa
                'dd': function dd(date) {
                    return weekdays2char[date.getDay()];
                },

                // Day of week: Sun, Mon, ..., Sat
                'ddd': function ddd(date) {
                    return weekdays3char[date.getDay()];
                },

                // Day of week: Sunday, Monday, ..., Saturday
                'dddd': function dddd(date) {
                    return weekdaysFull[date.getDay()];
                },

                // AM, PM
                'A': function A(date) {
                    return date.getHours() / 12 >= 1 ? meridiemUppercase[1] : meridiemUppercase[0];
                },

                // am, pm
                'a': function a(date) {
                    return date.getHours() / 12 >= 1 ? meridiemLowercase[1] : meridiemLowercase[0];
                },

                // a.m., p.m.
                'aa': function aa(date) {
                    return date.getHours() / 12 >= 1 ? meridiemFull[1] : meridiemFull[0];
                }

                // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.
            };var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W'];
            ordinalFormatters.forEach(function (formatterToken) {
                formatters[formatterToken + 'o'] = function (date, formatters) {
                    return this.ordinal(formatters[formatterToken](date));
                };
            });

            return {
                formatters: formatters,
                formattingTokensRegExp: this.buildFormattingTokensRegExp(formatters)
            };
        }
    }, {
        key: 'ordinal',
        value: function ordinal(number) {
            return number + 'º';
        }
    }, {
        key: '_isInteger',
        value: function _isInteger(val) {
            var digits = "1234567890";
            for (var i = 0; i < val.length; i++) {
                if (digits.indexOf(val.charAt(i)) == -1) {
                    return false;
                }
            }
            return true;
        }
    }, {
        key: '_getInt',
        value: function _getInt(str, i, minlength, maxlength) {
            for (var x = maxlength; x >= minlength; x--) {
                var token = str.substring(i, i + x);
                if (token.length < minlength) {
                    return null;
                }
                if (this._isInteger(token)) {
                    return token;
                }
            }
            return null;
        }
    }, {
        key: 'parseDateWithFormat',
        value: function parseDateWithFormat(value, format) {
            value = value + "";
            format = format + "";
            var i_val = 0;
            var i_format = 0;
            var c = "";
            var token = "";
            var token2 = "";
            var x, y;
            var now = new Date();
            var year = now.getYear();
            var month = now.getMonth() + 1;
            var date = 1;
            var hh = 0;
            var mm = 0;
            var ss = 0;
            var ms = 0;
            var ampm = "";

            while (i_format < format.length) {
                // Get next token from format string
                c = format.charAt(i_format);
                token = "";
                while (format.charAt(i_format) == c && i_format < format.length) {
                    token += format.charAt(i_format++);
                }
                // Extract contents of value based on format token
                if (token.toLowerCase() == "yyyy" || token.toLowerCase() == "yy" || token.toLowerCase() == "y") {
                    if (token.toLowerCase() == "yyyy") {
                        x = 4;y = 4;
                    }
                    if (token.toLowerCase() == "yy") {
                        x = 2;y = 2;
                    }
                    if (token.toLowerCase() == "y") {
                        x = 2;y = 4;
                    }
                    year = this._getInt(value, i_val, x, y);
                    if (year == null) {
                        return 0;
                    }
                    i_val += year.length;
                    if (year.length == 2) {
                        if (year > 70) {
                            year = 1900 + (year - 0);
                        } else {
                            year = 2000 + (year - 0);
                        }
                    }
                } else if (token == "MMM" || token == "NNN") {
                    month = 0;
                    for (var i = 0; i < MONTH_NAMES.length; i++) {
                        var month_name = MONTH_NAMES[i];
                        if (value.substring(i_val, i_val + month_name.length).toLowerCase() == month_name.toLowerCase()) {
                            if (token == "MMM" || token == "NNN" && i > 11) {
                                month = i + 1;
                                if (month > 12) {
                                    month -= 12;
                                }
                                i_val += month_name.length;
                                break;
                            }
                        }
                    }
                    if (month < 1 || month > 12) {
                        return 0;
                    }
                } else if (token == "EE" || token == "E") {
                    for (var i = 0; i < DAY_NAMES.length; i++) {
                        var day_name = DAY_NAMES[i];
                        if (value.substring(i_val, i_val + day_name.length).toLowerCase() == day_name.toLowerCase()) {
                            i_val += day_name.length;
                            break;
                        }
                    }
                } else if (token == "MM" || token == "M") {
                    month = this._getInt(value, i_val, token.length, 2);
                    if (month == null || month < 1 || month > 12) {
                        return 0;
                    }
                    i_val += month.length;
                } else if (token.toLowerCase() == "dd" || token.toLowerCase() == "d") {
                    date = this._getInt(value, i_val, token.length, 2);
                    if (date == null || date < 1 || date > 31) {
                        return 0;
                    }
                    i_val += date.length;
                } else if (token == "hh" || token == "h") {
                    hh = this._getInt(value, i_val, token.length, 2);
                    if (hh == null || hh < 1 || hh > 12) {
                        return 0;
                    }
                    i_val += hh.length;
                } else if (token == "HH" || token == "H") {
                    hh = this._getInt(value, i_val, token.length, 2);
                    if (hh == null || hh < 0 || hh > 23) {
                        return 0;
                    }
                    i_val += hh.length;
                } else if (token == "KK" || token == "K") {
                    hh = this._getInt(value, i_val, token.length, 2);
                    if (hh == null || hh < 0 || hh > 11) {
                        return 0;
                    }
                    i_val += hh.length;
                } else if (token == "kk" || token == "k") {
                    hh = this._getInt(value, i_val, token.length, 2);
                    if (hh == null || hh < 1 || hh > 24) {
                        return 0;
                    }
                    i_val += hh.length;hh--;
                } else if (token == "mm" || token == "m") {
                    mm = this._getInt(value, i_val, token.length, 2);
                    if (mm == null || mm < 0 || mm > 59) {
                        return 0;
                    }
                    i_val += mm.length;
                } else if (token == "ss" || token == "s") {
                    ss = this._getInt(value, i_val, token.length, 2);
                    if (ss == null || ss < 0 || ss > 59) {
                        return 0;
                    }
                    i_val += ss.length;
                } else if (token == "SSS" || token == "sss") {
                    ms = this._getInt(value, i_val, token.length, 3);
                    if (ms == null || ms < 0 || ms > 999) {
                        return 0;
                    }
                    i_val += ms.length;
                } else if (token == "a") {
                    if (value.substring(i_val, i_val + 2).toLowerCase() == "am") {
                        ampm = "AM";
                    } else if (value.substring(i_val, i_val + 2).toLowerCase() == "pm") {
                        ampm = "PM";
                    } else {
                        return 0;
                    }
                    i_val += 2;
                } else {
                    if (value.substring(i_val, i_val + token.length) != token) {
                        return 0;
                    } else {
                        i_val += token.length;
                    }
                }
            }
            // If there are any trailing characters left in the value, it doesn't match
            if (i_val != value.length) {
                return 0;
            }
            // Is date valid for month?
            if (month == 2) {
                // Check for leap year
                if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {
                    // leap year
                    if (date > 29) {
                        return 0;
                    }
                } else {
                    if (date > 28) {
                        return 0;
                    }
                }
            }
            if (month == 4 || month == 6 || month == 9 || month == 11) {
                if (date > 30) {
                    return 0;
                }
            }
            // Correct hours value
            if (hh < 12 && ampm == "PM") {
                hh = hh - 0 + 12;
            } else if (hh > 11 && ampm == "AM") {
                hh -= 12;
            }
            var newdate = new Date(year, month - 1, date, hh, mm, ss, ms);
            return newdate;
        }
    }, {
        key: 'buildFormattingTokensRegExp',
        value: function buildFormattingTokensRegExp(formatters) {
            var formatterKeys = [];
            for (var key in formatters) {
                if (formatters.hasOwnProperty(key)) {
                    formatterKeys.push(key);
                }
            }

            var formattingTokens = commonFormatterKeys.concat(formatterKeys).sort().reverse();
            var formattingTokensRegExp = new RegExp('(\\[[^\\[]*\\])|(\\\\)?' + '(' + formattingTokens.join('|') + '|.)', 'g');

            return formattingTokensRegExp;
        }
    }]);

    return AnterosDateUtils;
}();

var instance = new AnterosDateUtils();
exports.AnterosDateUtils = instance;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AnterosError = AnterosError;
exports.AnterosDatasourceError = AnterosDatasourceError;
function AnterosError(message) {
    this.message = message;
    this.name = "AnterosError";
}

function AnterosDatasourceError(message) {
    this.message = message;
    this.name = "AnterosDatasourceError";
}

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__(3);

var _AnterosUtils = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AnterosFade = function (_Component) {
  _inherits(AnterosFade, _Component);

  function AnterosFade(props) {
    _classCallCheck(this, AnterosFade);

    var _this = _possibleConstructorReturn(this, (AnterosFade.__proto__ || Object.getPrototypeOf(AnterosFade)).call(this, props));

    _this.state = {
      mounted: !props.transitionAppear
    };

    _this.onLeave = _this.onLeave.bind(_this);
    _this.onEnter = _this.onEnter.bind(_this);
    _this.timers = [];
    return _this;
  }

  _createClass(AnterosFade, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.timers.forEach(function (timer) {
        return clearTimeout(timer);
      });
    }
  }, {
    key: 'onEnter',
    value: function onEnter(cb) {
      var _this2 = this;

      return function () {
        cb();
        if (_this2.props.onEnter) {
          _this2.props.onEnter();
        }
      };
    }
  }, {
    key: 'onLeave',
    value: function onLeave(cb) {
      var _this3 = this;

      return function () {
        cb();
        if (_this3.props.onLeave) {
          _this3.props.onLeave();
        }
      };
    }
  }, {
    key: 'componentWillAppear',
    value: function componentWillAppear(cb) {
      if (!this.props.transitionAppear) {
        this.onEnter(cb)();
      }

      this.timers.push(setTimeout(this.onEnter(cb), this.props.transitionAppearTimeout));
    }
  }, {
    key: 'componentDidAppear',
    value: function componentDidAppear() {
      this.setState({
        mounted: true
      });
    }
  }, {
    key: 'componentWillEnter',
    value: function componentWillEnter(cb) {
      if (!this.props.transitionEnter) {
        this.onEnter(cb)();
      }

      this.timers.push(setTimeout(this.onEnter(cb), this.props.transitionEnterTimeout));
    }
  }, {
    key: 'componentDidEnter',
    value: function componentDidEnter() {
      this.setState({
        mounted: true
      });
    }
  }, {
    key: 'componentWillLeave',
    value: function componentWillLeave(cb) {
      this.setState({
        mounted: false
      });

      if (!this.props.transitionLeave) {
        this.onLeave(cb)();
      }

      this.timers.push(setTimeout(this.onLeave(cb), this.props.transitionLeaveTimeout));
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          baseClass = _props.baseClass,
          baseClassIn = _props.baseClassIn,
          className = _props.className,
          cssModule = _props.cssModule,
          Tag = _props.tag;

      var attributes = (0, _lodash.omit)(this.props, Object.keys(AnterosFade.propTypes));

      var classes = _AnterosUtils.AnterosUtils.mapToCssModules(_AnterosUtils.AnterosUtils.buildClassNames(className, baseClass, this.state.mounted ? baseClassIn : false), cssModule);

      return _react2.default.createElement(Tag, _extends({}, attributes, { className: classes }));
    }
  }]);

  return AnterosFade;
}(_react.Component);

exports.default = AnterosFade;


AnterosFade.propTypes = {
  baseClass: _react.PropTypes.string,
  baseClassIn: _react.PropTypes.string,
  tag: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
  className: _react.PropTypes.string,
  cssModule: _react.PropTypes.object,
  transitionAppearTimeout: _react.PropTypes.number,
  transitionEnterTimeout: _react.PropTypes.number,
  transitionLeaveTimeout: _react.PropTypes.number,
  transitionAppear: _react.PropTypes.bool,
  transitionEnter: _react.PropTypes.bool,
  transitionLeave: _react.PropTypes.bool,
  onLeave: _react.PropTypes.func,
  onEnter: _react.PropTypes.func
};

AnterosFade.defaultProps = {
  tag: 'div',
  baseClass: 'fade',
  baseClassIn: 'show',
  transitionAppearTimeout: 0,
  transitionEnterTimeout: 0,
  transitionLeaveTimeout: 0,
  transitionAppear: true,
  transitionEnter: true,
  transitionLeave: true
};

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AnterosJacksonParser = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = __webpack_require__(3);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AnterosJacksonParser = function () {
    function AnterosJacksonParser() {
        _classCallCheck(this, AnterosJacksonParser);
    }
    /**
     * Converte um objeto Json serializado com Anteros e Jackson
     * @param {*} json Json a ser convertido para objeto
     */


    _createClass(AnterosJacksonParser, [{
        key: 'convertJsonToObject',
        value: function convertJsonToObject(json) {

            // Verifica se o objeto é um array
            var isObject = function isObject(value) {
                return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
            };

            // Busca e armazena todas as chaves e referências
            var getKeys = function getKeys(obj, key) {
                var keys = [];
                for (var i in obj) {
                    // Pula métodos
                    if (!obj.hasOwnProperty(i)) {
                        continue;
                    }

                    if (isObject(obj[i])) {
                        keys = keys.concat(getKeys(obj[i], key));
                    } else if (i === key) {
                        keys.push({ key: obj[key], obj: obj });
                    }
                }

                return keys;
            };

            var convertToObjectHelper = function convertToObjectHelper(json, key, keys) {
                // Armazena todas as referêncuas e chaves num mapa
                if (!keys) {
                    keys = getKeys(json, key);

                    var convertedKeys = {};

                    for (var i = 0; i < keys.length; i++) {
                        convertedKeys[keys[i].key] = keys[i].obj;
                    }

                    keys = convertedKeys;
                }

                var obj = json;

                // Troca recursivamente todas as referências para as chaves pelos objetos reais
                for (var j in obj) {
                    // Pula métodos
                    if (!obj.hasOwnProperty(j)) {
                        continue;
                    }

                    if (isObject(obj[j])) {
                        // Propriedade é um objeto, processa os filhos recursivamente
                        convertToObjectHelper(obj[j], key, keys);
                    } else if (j === key) {
                        // Remove a referência @id do objeto
                        delete obj[j];
                    } else if (keys[obj[j]]) {
                        // Troca a referência pelo objeto real
                        obj[j] = keys[obj[j]];
                    }
                }

                return obj;
            };

            return convertToObjectHelper(json, "@id");
        }

        /**
         * Converte um objeto para Json serializando com @id no formato Anteros e Jackson
         * @param {*} obj Objeto a ser serializado para json
         */

    }, {
        key: 'convertObjectToJson',
        value: function convertObjectToJson(obj) {

            var newObj = (0, _lodash.cloneDeep)(obj);

            // Gera um id global randômico - GUID
            var guid = function guid() {
                function s4() {
                    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
                }

                return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
            };

            // Verifica se o valor é um objeto
            var isObject = function isObject(value) {
                return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
            };

            // Verifica se o objeto é um array
            var isArray = function isArray(obj) {
                return Object.prototype.toString.call(obj) === '[object Array]';
            };

            var convertToJsonHelper = function convertToJsonHelper(obj, key, objects) {
                // Inicializa um array de objetos e guarda o root dentro se existir
                if (!objects) {
                    objects = [];

                    if (isObject(obj) && !isArray(obj)) {
                        obj[key] = guid();
                        objects.push(obj);
                    }
                }

                for (var i in obj) {
                    // Pula métodos
                    if (!obj.hasOwnProperty(i)) {
                        continue;
                    }

                    if (isObject(obj[i])) {
                        var objIndex = objects.indexOf(obj[i]);

                        if (objIndex === -1) {
                            // Objeto não foi processado; gera uma chave(GUID) e continua
                            // (não gera chaves para arrays)
                            if (!isArray(obj[i]) && obj[i] != null && obj[i] != undefined) {
                                obj[i][key] = guid();
                                objects.push(obj[i]);
                            }

                            // Processa as propriedades dos filhos
                            // recursivamente
                            convertToJsonHelper(obj[i], key, objects);
                        } else {
                            // Objeto foi processado;
                            // Troca a referência existente pela chave gerada GUID
                            obj[i] = objects[objIndex][key];
                        }
                    }
                }

                return obj;
            };

            return convertToJsonHelper(newObj, "@id");
        }
    }]);

    return AnterosJacksonParser;
}();

var instance = new AnterosJacksonParser();
exports.AnterosJacksonParser = instance;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.loadScript = loadScript;
function loadScript(src, opts, cb) {
    var head = document.head || document.getElementsByTagName('head')[0];
    var script = document.createElement('script');

    if (typeof opts === 'function') {
        cb = opts;
        opts = {};
    }

    opts = opts || {};
    cb = cb || function () {};

    script.type = opts.type || 'text/javascript';
    script.charset = opts.charset || 'utf8';
    script.async = 'async' in opts ? !!opts.async : true;
    script.defer = 'defer' in opts ? !!opts.defer : true;
    script.src = src;

    if (opts.attrs) {
        setAttributes(script, opts.attrs);
    }

    if (opts.text) {
        script.text = '' + opts.text;
    }

    var onend = 'onload' in script ? stdOnEnd : ieOnEnd;
    onend(script, cb);

    // some good legacy browsers (firefox) fail the 'in' detection above
    // so as a fallback we always set onload
    // old IE will ignore this and new IE will set onload
    if (!script.onload) {
        stdOnEnd(script, cb);
    }

    head.appendChild(script);
}

function setAttributes(script, attrs) {
    for (var attr in attrs) {
        script.setAttribute(attr, attrs[attr]);
    }
}

function stdOnEnd(script, cb) {
    script.onload = function () {
        this.onerror = this.onload = null;
        cb(null, script);
    };
    script.onerror = function () {
        // this.onload = null here is necessary
        // because even IE9 works not like others
        this.onerror = this.onload = null;
        cb(new Error('Failed to load ' + this.src), script);
    };
}

function ieOnEnd(script, cb) {
    script.onreadystatechange = function () {
        if (this.readyState != 'complete' && this.readyState != 'loaded') return;
        this.onreadystatechange = null;
        cb(null, script); // there is no way to catch loading errors in IE8
    };
}

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AnterosNotFound = function (_Component) {
    _inherits(AnterosNotFound, _Component);

    function AnterosNotFound() {
        _classCallCheck(this, AnterosNotFound);

        return _possibleConstructorReturn(this, (AnterosNotFound.__proto__ || Object.getPrototypeOf(AnterosNotFound)).apply(this, arguments));
    }

    _createClass(AnterosNotFound, [{
        key: "render",
        value: function render() {
            return _react2.default.createElement(
                "div",
                { className: "nb-error" },
                _react2.default.createElement(
                    "div",
                    { className: "error-code" },
                    "404"
                ),
                _react2.default.createElement(
                    "h3",
                    { className: "font-bold" },
                    "We couldn't find the page.."
                ),
                _react2.default.createElement(
                    "div",
                    { className: "error-desc" },
                    "Sorry, but the page you are looking for was either not found or does not exist. ",
                    _react2.default.createElement("br", null),
                    "Try refreshing the page or click the button below to go back to the Homepage.",
                    _react2.default.createElement(
                        "div",
                        { className: "input-group" },
                        _react2.default.createElement("input", { type: "text", placeholder: "Try with a search", className: "form-control" }),
                        _react2.default.createElement(
                            "span",
                            { className: "input-group-btn" },
                            _react2.default.createElement(
                                "button",
                                { type: "button", className: "btn btn-default" },
                                _react2.default.createElement("em", { className: "fa fa-search" })
                            )
                        )
                    )
                )
            );
        }
    }]);

    return AnterosNotFound;
}(_react.Component);

exports.default = AnterosNotFound;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Base64 = { _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", encode: function encode(e) {
        var t = "";var n, r, i, s, o, u, a;var f = 0;e = Base64._utf8_encode(e);while (f < e.length) {
            n = e.charCodeAt(f++);r = e.charCodeAt(f++);i = e.charCodeAt(f++);s = n >> 2;o = (n & 3) << 4 | r >> 4;u = (r & 15) << 2 | i >> 6;a = i & 63;if (isNaN(r)) {
                u = a = 64;
            } else if (isNaN(i)) {
                a = 64;
            }t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a);
        }return t;
    }, decode: function decode(e) {
        var t = "";var n, r, i;var s, o, u, a;var f = 0;e = e.replace(/[^A-Za-z0-9+/=]/g, "");while (f < e.length) {
            s = this._keyStr.indexOf(e.charAt(f++));o = this._keyStr.indexOf(e.charAt(f++));u = this._keyStr.indexOf(e.charAt(f++));a = this._keyStr.indexOf(e.charAt(f++));n = s << 2 | o >> 4;r = (o & 15) << 4 | u >> 2;i = (u & 3) << 6 | a;t = t + String.fromCharCode(n);if (u != 64) {
                t = t + String.fromCharCode(r);
            }if (a != 64) {
                t = t + String.fromCharCode(i);
            }
        }t = Base64._utf8_decode(t);return t;
    }, _utf8_encode: function _utf8_encode(e) {
        e = e.replace(/rn/g, "n");var t = "";for (var n = 0; n < e.length; n++) {
            var r = e.charCodeAt(n);if (r < 128) {
                t += String.fromCharCode(r);
            } else if (r > 127 && r < 2048) {
                t += String.fromCharCode(r >> 6 | 192);t += String.fromCharCode(r & 63 | 128);
            } else {
                t += String.fromCharCode(r >> 12 | 224);t += String.fromCharCode(r >> 6 & 63 | 128);t += String.fromCharCode(r & 63 | 128);
            }
        }return t;
    }, _utf8_decode: function _utf8_decode(e) {
        var t = "";var n = 0;var r = c1 = c2 = 0;while (n < e.length) {
            r = e.charCodeAt(n);if (r < 128) {
                t += String.fromCharCode(r);n++;
            } else if (r > 191 && r < 224) {
                c2 = e.charCodeAt(n + 1);t += String.fromCharCode((r & 31) << 6 | c2 & 63);n += 2;
            } else {
                c2 = e.charCodeAt(n + 1);c3 = e.charCodeAt(n + 2);t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);n += 3;
            }
        }return t;
    } };

var AnterosObjectUtils = function () {
    function AnterosObjectUtils() {
        _classCallCheck(this, AnterosObjectUtils);
    }

    /**
    * Get the property of an object nested in one or more objects
    * given an object such as a.b.c.d = 5, getNestedProperty(a, "b.c.d") will return 5.
    * @param {Object} object the object to get the property from
    * @param {String} property the path to the property as a string
    * @returns the object or the the property value if found
    */


    _createClass(AnterosObjectUtils, [{
        key: "getNestedProperty",
        value: function getNestedProperty(object, property) {
            if (object && (typeof object === "undefined" ? "undefined" : _typeof(object)) == "object") {
                if (typeof property == "string" && property !== "") {
                    var split = property.split(".");
                    return split.reduce(function (obj, prop) {
                        return obj && obj[prop];
                    }, object);
                } else if (typeof property == "number") {
                    return object[property];
                } else {
                    return object;
                }
            } else {
                return object;
            }
        }

        /**
         * Tell if a nested object has a given property (or array a given index)
         * given an object such as a.b.c.d = 5, hasNestedProperty(a, "b.c.d") will return true.
         * It also returns true if the property is in the prototype chain.
         * @param {Object} object the object to get the property from
         * @param {String} property the path to the property as a string
         * @param {Object} options:
         *  - own: set to reject properties from the prototype
         * @returns true if has (property in object), false otherwise
         */

    }, {
        key: "hasNestedProperty",
        value: function hasNestedProperty(object, property, options) {
            options = options || {};

            if (object && (typeof object === "undefined" ? "undefined" : _typeof(object)) == "object") {
                if (typeof property == "string" && property !== "") {
                    var split = property.split(".");
                    return split.reduce(function (obj, prop, idx, array) {
                        if (idx == array.length - 1) {
                            if (options.own) {
                                return !!(obj && obj.hasOwnProperty(prop));
                            } else {
                                return !!(obj !== null && (typeof obj === "undefined" ? "undefined" : _typeof(obj)) == "object" && prop in obj);
                            }
                        }
                        return obj && obj[prop];
                    }, object);
                } else if (typeof property == "number") {
                    return property in object;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }

        /**
         * Set the property of an object nested in one or more objects
         * If the property doesn't exist, it gets created.
         * @param {Object} object
         * @param {String} property
         * @param value the value to set
         * @returns object if no assignment was made or the value if the assignment was made
         */

    }, {
        key: "setNestedProperty",
        value: function setNestedProperty(object, property, value) {
            if (object && (typeof object === "undefined" ? "undefined" : _typeof(object)) == "object") {
                if (typeof property == "string" && property !== "") {
                    var split = property.split(".");
                    return split.reduce(function (obj, prop, idx) {
                        obj[prop] = obj[prop] || {};
                        if (split.length == idx + 1) {
                            obj[prop] = value;
                        }
                        return obj[prop];
                    }, object);
                } else if (typeof property == "number") {
                    object[property] = value;
                    return object[property];
                } else {
                    return object;
                }
            } else {
                return object;
            }
        }

        /**
         * Tell if an object is on the path to a nested property
         * If the object is on the path, and the path exists, it returns true, and false otherwise.
         * @param {Object} object to get the nested property from
         * @param {String} property name of the nested property
         * @param {Object} objectInPath the object to check
         * @param {Object} options:
         *  - validPath: return false if the path is invalid, even if the object is in the path
         * @returns {boolean} true if the object is on the path
         */

    }, {
        key: "isInNestedProperty",
        value: function isInNestedProperty(object, property, objectInPath, options) {
            options = options || {};

            if (object && (typeof object === "undefined" ? "undefined" : _typeof(object)) == "object") {
                if (typeof property == "string" && property !== "") {
                    var split = property.split("."),
                        isIn = false,
                        pathExists;

                    pathExists = !!split.reduce(function (obj, prop) {
                        isIn = isIn || obj === objectInPath || !!obj && obj[prop] === objectInPath;
                        return obj && obj[prop];
                    }, object);

                    if (options.validPath) {
                        return isIn && pathExists;
                    } else {
                        return isIn;
                    }
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }
    }, {
        key: "isEmpty",
        value: function isEmpty(obj) {
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) return false;
            }

            return true;
        }
    }, {
        key: "encodeBase64",
        value: function encodeBase64(str) {
            return Base64.encode(str);
        }
    }, {
        key: "decodeBase64",
        value: function decodeBase64(str) {
            return Base64.decode(str);
        }
    }]);

    return AnterosObjectUtils;
}();

var instance = new AnterosObjectUtils();
exports.AnterosObjectUtils = instance;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AnterosStringBuilder = exports.AnterosStringBuilder = function () {
    function AnterosStringBuilder(str) {
        _classCallCheck(this, AnterosStringBuilder);

        this.s = [];
        this.append(str);
    }

    _createClass(AnterosStringBuilder, [{
        key: 'append',
        value: function append(v) {
            if (v) {
                this.s.push(v);
            }
            return this;
        }
    }, {
        key: 'appendLine',
        value: function appendLine(v) {
            this.s.push("\r\n");
            if (v) {
                this.s.push(v);
            }
            return this;
        }
    }, {
        key: 'appendFormat',
        value: function appendFormat() {
            var p = /({?){([^}]+)}(}?)/g;
            var a = arguments,
                v = a[0],
                o = false;
            if (a.length == 2) {
                if (_typeof(a[1]) == 'object' && a[1].constructor != String) {
                    a = a[1];
                    o = true;
                }
            }
            var s = v.split(p);
            var r = [];
            for (var i = 0; i < s.length; i += 4) {
                r.push(s[i]);
                if (s.length > i + 3) {
                    if (s[i + 1] == '{' && s[i + 3] == '}') {
                        r.push(s[i + 1], s[i + 2], s[i + 3]);
                    } else {
                        r.push(s[i + 1], a[o ? s[i + 2] : parseInt(s[i + 2], 10) + 1], s[i + 3]);
                    }
                }
            }
            this.s.push(r.join(''));
        }
    }, {
        key: 'clear',
        value: function clear() {
            this.s.length = 0;
        }
    }, {
        key: 'toString',
        value: function toString() {
            return this.s.length === 0 ? "" : this.s.join("");
        }
    }]);

    return AnterosStringBuilder;
}();

var AnterosStringUtils = function () {
    function AnterosStringUtils() {
        _classCallCheck(this, AnterosStringUtils);
    }

    _createClass(AnterosStringUtils, [{
        key: 'abbreviate',
        value: function abbreviate(string, maxWidth, offset) {
            if (this.isEmpty(string)) {
                return null;
            }

            if (offset >= 4) {
                return '...' + String(string).substring(offset, maxWidth) + '...';
            }

            return String(string).substring(0, maxWidth) + '...';
        }
    }, {
        key: 'abbreviateMiddle',
        value: function abbreviateMiddle(string, middle, length) {
            if (this.isEmpty(string)) {
                return null;
            }

            string = String(string);

            if (length > 0 && length < string.length) {
                return string.substring(0, length) + middle + string.substring(length);
            }

            return string;
        }
    }, {
        key: 'appendIfMissing',
        value: function appendIfMissing(string, suffix, suffixes) {
            var endsWith = false;

            if (this.isEmpty(string)) {
                return string;
            }

            string = String(string);
            suffix = String(suffix);

            if (suffixes !== undefined && suffixes.length > 0) {
                endsWith = suffixes.every(function (s) {
                    return this.endsWith(string, String(s));
                }.bind(this));
            } else {
                endsWith = this.endsWith(string, suffix);
            }

            return !endsWith ? string += suffix : string;
        }
    }, {
        key: 'capitalize',
        value: function capitalize(string) {
            if (this.isEmpty(string)) {
                return null;
            }

            string = String(string);

            return string.substring(0, 1).toUpperCase() + string.substring(1);
        }
    }, {
        key: 'chomp',
        value: function chomp(string) {
            var regexp = /[\n\r]{1}$/;

            if (this.isEmpty(string)) {
                return null;
            }

            return string.replace(regexp, '');
        }
    }, {
        key: 'chop',
        value: function chop(string) {
            if (this.isEmpty(string)) {
                return null;
            }

            return string.indexOf('\r\n') === string.length - 2 ? string.substring(0, string.length - 2) : string.substring(0, string.length - 1);
        }
    }, {
        key: 'difference',
        value: function difference(string, comparison) {
            if (this.isEmpty(string) || isEmpty(comparison)) {
                return null;
            }

            var position = 0,
                stringArray = String(string).split(''),
                comparisonArray = String(comparison).split('');

            stringArray.forEach(function (char, index) {
                if (char === comparisonArray[index]) {
                    position = index + 1;
                }
            });

            return comparisonArray.join('').substring(position);
        }
    }, {
        key: 'endsWith',
        value: function endsWith(string, suffix) {
            string = String(string);
            suffix = String(suffix);

            return string.indexOf(suffix) === string.length - suffix.length;
        }
    }, {
        key: 'endsWithIgnoreCase',
        value: function endsWithIgnoreCase(string, suffix) {
            return this.endsWith(String(string).toLowerCase(), String(suffix).toLowerCase());
        }
    }, {
        key: 'endsWithAny',
        value: function endsWithAny(string, suffixArray) {
            return suffixArray.some(function (suffix) {
                return this.endsWith(string, suffix);
            }.bind(this));
        }
    }, {
        key: 'indexOfDifference',
        value: function indexOfDifference(string, comparison) {
            return String(string) === String(comparison) ? -1 : String(comparison).indexOf(this.difference(string, comparison));
        }
    }, {
        key: 'isAllLowercase',
        value: function isAllLowercase(string) {
            if (this.isEmpty(string)) {
                return false;
            }

            return (/^[a-z]*$/.test(string)
            );
        }
    }, {
        key: 'isAllUppercase',
        value: function isAllUppercase(string) {
            if (this.isEmpty(string)) {
                return false;
            }

            return (/^[A-Z]*$/.test(string)
            );
        }
    }, {
        key: 'isAnyEmpty',
        value: function isAnyEmpty() {
            var stringArray = Array.prototype.slice.call(arguments);

            return stringArray.some(function (string) {
                return this.isEmpty(string);
            });
        }
    }, {
        key: 'isEmpty',
        value: function isEmpty(string) {
            return string == null || string.length == 0;
        }
    }, {
        key: 'isNoneEmpty',
        value: function isNoneEmpty() {
            var stringArray = Array.prototype.slice.call(arguments);

            return stringArray.every(function (string) {
                return this.isNotEmpty(String(string));
            });
        }
    }, {
        key: 'isNotEmpty',
        value: function isNotEmpty(string) {
            return string !== null && string.length > 0;
        }
    }, {
        key: 'leftPad',
        value: function leftPad(string, length, char) {
            var padString = '';

            char = char !== undefined ? String(char) : '';

            for (var i = 0; i < length; i++) {
                if (char.length > 0) {
                    padString += String(char);
                } else {
                    padString += ' ';
                }
            }

            return padString + String(string);
        }
    }, {
        key: 'trim',
        value: function trim(string) {
            var trimmed = string.replace(/^\s+|\s+$/g, '');
            return trimmed;
        }
    }, {
        key: 'ltrim',
        value: function ltrim(string) {
            var trimmed = string.replace(/^\s+/g, '');
            return trimmed;
        }
    }, {
        key: 'rtrim',
        value: function rtrim(string) {
            var trimmed = string.replace(/\s+$/g, '');
            return trimmed;
        }
    }, {
        key: 'normalizeSpace',
        value: function normalizeSpace(string) {
            return String(string).replace(/\s\s+/g, ' ').trim();
        }
    }, {
        key: 'prependIfMissing',
        value: function prependIfMissing(string, prefix, prefixes) {
            var startsWith = false;

            if (this.isEmpty(string)) {
                return string;
            }

            string = String(string);
            prefix = String(prefix);

            if (prefixes !== undefined && prefixes.length > 0) {
                startsWith = prefixes.every(function (s) {
                    return this.startsWith(string, String(s));
                }.bind(this));
            } else {
                startsWith = this.startsWith(string, prefix);
            }

            return !startsWith ? prefix + string : string;
        }
    }, {
        key: 'removeEnd',
        value: function removeEnd(string, remove) {
            var position;

            if (this.isEmpty(string)) {
                return null;
            }

            string = String(string);
            remove = String(remove);
            position = string.indexOf(remove);

            if (position === string.length - remove.length) {
                return string.substring(0, position);
            } else {
                return string;
            }
        }
    }, {
        key: 'removeEndIgnoreCase',
        value: function removeEndIgnoreCase(string, remove) {
            var position, tempString;

            if (this.isEmpty(string)) {
                return null;
            }

            string = String(string);
            tempString = string;
            remove = String(remove).toLowerCase();
            string = string.toLowerCase();
            position = string.indexOf(remove);

            if (position === string.length - remove.length) {
                return tempString.substring(0, position);
            } else {
                return tempString;
            }
        }
    }, {
        key: 'removeStart',
        value: function removeStart(string, remove) {
            if (this.isEmpty(string)) {
                return null;
            }

            string = String(string);
            remove = String(remove);

            if (string.indexOf(remove) === 0) {
                return string.substring(remove.length);
            } else {
                return string;
            }
        }
    }, {
        key: 'removeStartIgnoreCase',
        value: function removeStartIgnoreCase(string, remove) {
            var tempString;

            if (this.isEmpty(string)) {
                return null;
            }

            string = String(string);
            tempString = string;
            remove = String(remove).toLowerCase();
            string = string.toLowerCase();

            if (string.indexOf(remove) === 0) {
                return tempString.substring(remove.length);
            } else {
                return tempString;
            }
        }
    }, {
        key: 'repeat',
        value: function repeat(string, times, separator) {
            var returnString = '';

            if (string === null || string === undefined) {
                return null;
            }

            if (separator !== undefined) {
                for (var i = 0; i < times - 1; i++) {
                    returnString += String(string) + separator;
                }

                returnString += String(string);
            } else {
                for (var i = 0; i < times; i++) {
                    returnString += String(string);
                }
            }

            return returnString;
        }
    }, {
        key: 'rightPad',
        value: function rightPad(string, length, char) {
            var padString = '';

            char = char !== undefined ? String(char) : '';

            for (var i = 0; i < length; i++) {
                if (char.length > 0) {
                    padString += String(char);
                } else {
                    padString += ' ';
                }
            }

            return String(string) + padString;
        }
    }, {
        key: 'startsWith',
        value: function startsWith(string, prefix) {
            return String(string).indexOf(String(prefix)) === 0;
        }
    }, {
        key: 'startsWithIgnoreCase',
        value: function startsWithIgnoreCase(string, prefix) {
            return this.startsWith(String(string).toLowerCase(), String(prefix).toLowerCase());
        }
    }, {
        key: 'startsWithAny',
        value: function startsWithAny(string, prefixArray) {
            return prefixArray.some(function (prefix) {
                return this.startsWith(string, prefix);
            }.bind(this));
        }
    }, {
        key: 'swapCase',
        value: function swapCase(string) {
            var returnString = '';

            if (this.isEmpty(string)) {
                return null;
            }

            string.split('').forEach(function (character) {
                if (character === character.toUpperCase()) {
                    returnString += character.toLowerCase();
                } else {
                    returnString += character.toUpperCase();
                }
            });

            return returnString;
        }
    }, {
        key: 'uncapitalize',
        value: function uncapitalize(string) {
            if (this.isEmpty(string)) {
                return null;
            }

            string = String(string);

            return string.substring(0, 1).toLowerCase() + string.substring(1);
        }
    }, {
        key: 'wrap',
        value: function wrap(string, char) {
            return String(char) + String(string) + String(char);
        }
    }, {
        key: 'format',
        value: function format() {
            var formatted = arguments[0];
            for (var i = 1; i < arguments.length; i++) {
                var regexp = new RegExp('\\{' + (i - 1) + '\\}', 'gi');
                formatted = formatted.replace(regexp, arguments[i]);
            }
            return formatted;
        }
    }, {
        key: 'createStringBuilder',
        value: function createStringBuilder() {
            return new AnterosStringBuilder();
        }
    }]);

    return AnterosStringUtils;
}();

var instance = new AnterosStringUtils();
exports.AnterosStringUtils = instance;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(18);

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AnterosTimeout = function (_React$Component) {
    _inherits(AnterosTimeout, _React$Component);

    function AnterosTimeout(props) {
        _classCallCheck(this, AnterosTimeout);

        var _this = _possibleConstructorReturn(this, (AnterosTimeout.__proto__ || Object.getPrototypeOf(AnterosTimeout)).call(this, props));

        _this.callback = _this.callback.bind(_this);
        _this.start = _this.start.bind(_this);
        _this.stop = _this.stop.bind(_this);
        return _this;
    }

    _createClass(AnterosTimeout, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            if (this.props.enabled) {
                this.start();
            }
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(_ref) {
            var timeout = _ref.timeout,
                callback = _ref.callback,
                enabled = _ref.enabled;

            return this.props.timeout !== timeout || this.props.callback !== callback || this.props.enabled !== enabled;
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(_ref2) {
            var enabled = _ref2.enabled;

            if (this.props.enabled !== enabled) {
                if (this.props.enabled) {
                    this.start();
                } else {
                    this.stop();
                }
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.stop();
        }
    }, {
        key: 'callback',
        value: function callback() {
            if (this.timer) {
                this.props.callback();
                this.start();
            }
        }
    }, {
        key: 'start',
        value: function start() {
            this.stop();
            this.timer = setTimeout(this.callback, this.props.timeout);
        }
    }, {
        key: 'stop',
        value: function stop() {
            clearTimeout(this.timer);
            this.timer = null;
        }
    }, {
        key: 'render',
        value: function render() {
            return false;
        }
    }]);

    return AnterosTimeout;
}(_react2.default.Component);

exports.default = AnterosTimeout;


AnterosTimeout.defaultProps = {
    enabled: false,
    timeout: 1000
};

AnterosTimeout.propTypes = {
    callback: _propTypes2.default.func.isRequired,
    enabled: _propTypes2.default.bool,
    timeout: _propTypes2.default.number
};

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if ("function" === 'function' && _typeof(__webpack_require__(2)) === 'object' && __webpack_require__(2)) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
			return classNames;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		window.classNames = classNames;
	}
})();

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.loadScript = exports.AnterosTimeout = exports.Anteros = exports.AnterosUtils = exports.AnterosStringUtils = exports.AnterosDateUtils = exports.AnterosObjectUtils = exports.AnterosJacksonParser = exports.Default = exports.Switch = exports.Case = exports.Else = exports.Then = exports.If = exports.AnterosNotFound = exports.AnterosFade = exports.AnterosAlert = exports.AnterosError = undefined;

var _AnterosExceptions = __webpack_require__(8);

var _AnterosAlert = __webpack_require__(5);

var _AnterosAlert2 = _interopRequireDefault(_AnterosAlert);

var _AnterosFade = __webpack_require__(9);

var _AnterosFade2 = _interopRequireDefault(_AnterosFade);

var _AnterosNotFound = __webpack_require__(12);

var _AnterosNotFound2 = _interopRequireDefault(_AnterosNotFound);

var _AnterosControlStatements = __webpack_require__(6);

var _AnterosJacksonParser = __webpack_require__(10);

var _AnterosObjectUtils = __webpack_require__(13);

var _AnterosDateUtils = __webpack_require__(7);

var _AnterosStringUtils = __webpack_require__(14);

var _AnterosUtils = __webpack_require__(1);

var _Anteros = __webpack_require__(4);

var _Anteros2 = _interopRequireDefault(_Anteros);

var _AnterosTimeout = __webpack_require__(15);

var _AnterosTimeout2 = _interopRequireDefault(_AnterosTimeout);

var _AnterosLoadScript = __webpack_require__(11);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.AnterosError = _AnterosExceptions.AnterosError;
exports.AnterosAlert = _AnterosAlert2.default;
exports.AnterosFade = _AnterosFade2.default;
exports.AnterosNotFound = _AnterosNotFound2.default;
exports.If = _AnterosControlStatements.If;
exports.Then = _AnterosControlStatements.Then;
exports.Else = _AnterosControlStatements.Else;
exports.Case = _AnterosControlStatements.Case;
exports.Switch = _AnterosControlStatements.Switch;
exports.Default = _AnterosControlStatements.Default;
exports.AnterosJacksonParser = _AnterosJacksonParser.AnterosJacksonParser;
exports.AnterosObjectUtils = _AnterosObjectUtils.AnterosObjectUtils;
exports.AnterosDateUtils = _AnterosDateUtils.AnterosDateUtils;
exports.AnterosStringUtils = _AnterosStringUtils.AnterosStringUtils;
exports.AnterosUtils = _AnterosUtils.AnterosUtils;
exports.Anteros = _Anteros2.default;
exports.AnterosTimeout = _AnterosTimeout2.default;
exports.loadScript = _AnterosLoadScript.loadScript;

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = require("prop-types");

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = require("react-transition-group");

/***/ })
/******/ ]);
});
//# sourceMappingURL=anteros-react-core.js.map