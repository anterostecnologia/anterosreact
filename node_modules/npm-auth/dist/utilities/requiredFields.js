'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseRequiredProperties = parseRequiredProperties;
exports.missingRequiredFields = missingRequiredFields;
exports.parseRequiredFilePathArgument = parseRequiredFilePathArgument;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _messages = require('./messages.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @export {function}
 * @param {any} argv command line args
 * @returns {Object} returns a hash object of utility properties
 */
function parseRequiredProperties(argv) {
  var utilityProperties = {
    email: false,
    registry: false,
    secureToken: false
  };

  var hasProperty = Object.prototype.hasOwnProperty;
  var hasEmailProperty = hasProperty.call(argv, 'email');
  var hasRegistryProperty = hasProperty.call(argv, 'registry');
  var hasSecureTokenProperty = hasProperty.call(argv, 'secure-token');

  if (hasEmailProperty) {
    utilityProperties.email = true;
  }

  if (hasRegistryProperty) {
    utilityProperties.registry = true;
  }

  if (hasSecureTokenProperty) {
    utilityProperties.secureToken = true;
  }

  return utilityProperties;
}

/**
 * @export {function}
 * @param {any} requiredFields passed in fields object.
 * @returns {boolean} returns true/false based on whether or not the required fields were passed in.
 */
function missingRequiredFields(requiredFields) {
  var missingRequiredField = false;

  if (!requiredFields.apikey) {
    (0, _messages.missingApiTokenProperty)();
    missingRequiredField = true;
  }
  if (!requiredFields.authEmail) {
    (0, _messages.missingEmailProperty)();
    missingRequiredField = true;
  }
  if (!requiredFields.registry) {
    (0, _messages.missingRegistryProperty)();
    missingRequiredField = true;
  }
  return missingRequiredField;
}

/**
 * @export {function}
 * @param {any} argv command line args
 * @param {string} filePathKey file path key that is used at the command line
 * @returns {boolean} returns true/false based on whether or not the required fields were passed in.
 */
function parseRequiredFilePathArgument(argv, filePathKey) {
  var hasProperty = Object.prototype.hasOwnProperty;
  var hasFileArgument = hasProperty.call(argv, filePathKey);

  if (hasFileArgument && !argv[filePathKey]) {
    (0, _messages.filePathArgumentIsNullOrWhiteSpace)();
    return false;
  }

  var passedInPath = _path2.default.join(__dirname, argv[filePathKey]);
  if (!_fs2.default.existsSync(passedInPath)) {
    (0, _messages.filePathIsInvalid)(passedInPath);
    return false;
  }

  return true;
}