(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("anteros-react-core"), require("axios"), require("lodash"), require("react"));
	else if(typeof define === 'function' && define.amd)
		define("anteros-react-datasource", ["anteros-react-core", "axios", "lodash", "react"], factory);
	else if(typeof exports === 'object')
		exports["anteros-react-datasource"] = factory(require("anteros-react-core"), require("axios"), require("lodash"), require("react"));
	else
		root["anteros-react-datasource"] = factory(root["anteros-react-core"], root["axios"], root["lodash"], root["react"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AnterosRemoteDatasource = exports.AnterosLocalDatasource = exports.dataSourceEvents = undefined;

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _anterosReactCore = __webpack_require__(2);

var _axios = __webpack_require__(3);

var _axios2 = _interopRequireDefault(_axios);

var _lodash = __webpack_require__(4);

var _react = __webpack_require__(5);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var dataSourceEvents = exports.dataSourceEvents = {
    BEFORE_OPEN: 'beforeOpen',
    AFTER_OPEN: 'afterOpen',
    BEFORE_CLOSE: 'beforeClose',
    AFTER_CLOSE: 'afterClose',
    BEFORE_GOTO_PAGE: 'beforeGoToPage',
    AFTER_GOTO_PAGE: 'afterGoToPage',
    AFTER_SCROLL: 'afterScroll',
    BEFORE_EDIT: 'beforeEdit',
    BEFORE_DELETE: 'befeoreDelete',
    AFTER_EDIT: 'afterEdit',
    AFTER_DELETE: 'afterDelete',
    BEFORE_POST: 'beforePost',
    AFTER_POST: 'afterPost',
    BEFORE_CANCEL: 'beforeCancel',
    AFTER_CANCEL: 'afterCancel',
    BEFORE_INSERT: 'beforeInsert',
    AFTER_INSERT: 'afterInsert',
    BEFORE_VALIDATE: 'beforeValidate',
    AFTER_VALIDATE: 'afterValidate',
    DATA_FIELD_CHANGED: 'dataFieldChanged',
    ON_ERROR: 'onError'
};

var AnterosDatasource = function () {
    function AnterosDatasource() {
        _classCallCheck(this, AnterosDatasource);

        this.open = this.open.bind(this);
        this.close = this.close.bind(this);
        this.addEventListener = this.addEventListener.bind(this);
        this.removeEventListener = this.removeEventListener.bind(this);
        this.dispatchEvent = this.dispatchEvent.bind(this);
        this.getData = this.getData.bind(this);
        this.getTotalPages = this.getTotalPages.bind(this);
        this.getCurrentPage = this.getCurrentPage.bind(this);
        this.getTotalRecords = this.getTotalRecords.bind(this);
        this.getGrandTotalRecords = this.getGrandTotalRecords.bind(this);
        this.getSizeOfPage = this.getSizeOfPage.bind(this);
        this.goToPage = this.goToPage.bind(this);
        this.isEmpty = this.isEmpty.bind(this);
        this.isEOF = this.isEOF.bind(this);
        this.isBOF = this.isBOF.bind(this);
        this.getCurrentRecord = this.getCurrentRecord.bind(this);
        this.getState = this.getState.bind(this);
        this.getPrimaryKeyFields = this.getPrimaryKeyFields.bind(this);
        this.getPrimaryKey = this.getPrimaryKey.bind(this);
        this.getRecno = this.getRecno.bind(this);
        this.gotoRecordByPrimaryKey = this.gotoRecordByPrimaryKey.bind(this);
        this.gotoRecord = this.gotoRecord.bind(this);
        this.gotoRecordByData = this.gotoRecordByData.bind(this);
        this.isFirst = this.isFirst.bind(this);
        this.isLast = this.isLast.bind(this);
        this.first = this.first.bind(this);
        this.last = this.last.bind(this);
        this.next = this.next.bind(this);
        this.prior = this.prior.bind(this);
        this.previous = this.previous.bind(this);
        this.hasNext = this.hasNext.bind(this);
        this.hasPrior = this.hasPrior.bind(this);
        this.hasPrevious = this.hasPrevious.bind(this);
        this.insert = this.insert.bind(this);
        this.edit = this.edit.bind(this);
        this.delete = this.delete.bind(this);
        this.post = this.post.bind(this);
        this.cancel = this.cancel.bind(this);
        this.isOpen = this.isOpen.bind(this);
        this._validateDelete = this._validateDelete.bind(this);
        this._validateInsert = this._validateInsert.bind(this);
        this._validateEdit = this._validateEdit.bind(this);
        this._validateCancel = this._validateCancel.bind(this);
        this._validatePost = this._validatePost.bind(this);
        this.disabledAllListeners = this.disabledAllListeners.bind(this);
        this.enableAllListeners = this.enableAllListeners.bind(this);
        this.data = [];
        this.listeners = [];
        this.totalPages = 0;
        this.currentPage = 0;
        this.totalRecords = 0;
        this.grandTotalRecords = 0;
        this.sizeOfPage = 0;
        this.dsState = 'dsBrowse';
        this.currentRecord = null;
        this.currentRecno = -1;
        this.primaryKeyFields = [];
        this.oldRecordInsert = null;
        this.oldRecnoInsert = null;
        this.active = false;

        this.getTotalPages = this.getTotalPages.bind(this);
        this.contentProperty = 'content';
        this.totalPagesProperty = 'totalPages';
        this.currentPageProperty = 'number';
        this.totalRecordsProperty = 'numberOfElements';
        this.sizeOfPageProperty = 'size';
        this.grandTotalRecordsProperty = 'totalElements';

        this.setContentProperty = this.setContentProperty.bind(this);
        this.setTotalPagesProperty = this.setTotalPagesProperty.bind(this);
        this.setCurrentPageProperty = this.setCurrentPageProperty.bind(this);
        this.setTotalRecordsProperty = this.setTotalRecordsProperty.bind(this);
        this.setSizeOfPageProperty = this.setSizeOfPageProperty.bind(this);
        this.setGrandTotalRecordsProperty = this.setGrandTotalRecordsProperty.bind(this);
        this.fieldByName = this.fieldByName.bind(this);
        this.setFieldByName = this.setFieldByName.bind(this);

        this._enableListeners = true;
    }

    _createClass(AnterosDatasource, [{
        key: 'setContentProperty',
        value: function setContentProperty(name) {
            this.contentProperty = name;
        }
    }, {
        key: 'setTotalPagesProperty',
        value: function setTotalPagesProperty(name) {
            this.totalPagesProperty = name;
        }
    }, {
        key: 'setCurrentPageProperty',
        value: function setCurrentPageProperty(name) {
            this.currentPageProperty = name;
        }
    }, {
        key: 'setTotalRecordsProperty',
        value: function setTotalRecordsProperty(name) {
            this.totalRecordsProperty = name;
        }
    }, {
        key: 'setSizeOfPageProperty',
        value: function setSizeOfPageProperty(name) {
            this.sizeOfPageProperty = name;
        }
    }, {
        key: 'setGrandTotalRecordsProperty',
        value: function setGrandTotalRecordsProperty(name) {
            this.setGrandTotalRecordsProperty = name;
        }
    }, {
        key: 'open',
        value: function open() {
            this.close();
            this.data = [];
            this.active = true;
            this.dispatchEvent(dataSourceEvents.BEFORE_OPEN);
        }
    }, {
        key: 'isOpen',
        value: function isOpen() {
            return this.active;
        }
    }, {
        key: 'close',
        value: function close() {
            if (this.active) {
                this.active = false;
                this.dispatchEvent(dataSourceEvents.BEFORE_CLOSE);
            }
        }
    }, {
        key: 'getData',
        value: function getData() {
            return this.data;
        }
    }, {
        key: 'getTotalPages',
        value: function getTotalPages() {
            return this.totalPages;
        }
    }, {
        key: 'getCurrentPage',
        value: function getCurrentPage() {
            return this.currentPage;
        }
    }, {
        key: 'getTotalRecords',
        value: function getTotalRecords() {
            return this.totalRecords;
        }
    }, {
        key: 'getSizeOfPage',
        value: function getSizeOfPage() {
            return this.sizeOfPage;
        }
    }, {
        key: 'goToPage',
        value: function goToPage(page) {
            this.currentPage = page;
        }
    }, {
        key: 'getGrandTotalRecords',
        value: function getGrandTotalRecords() {
            return this.grandTotalRecords;
        }
    }, {
        key: 'isEmpty',
        value: function isEmpty() {
            return this.getTotalRecords() == 0;
        }
    }, {
        key: 'getCurrentRecord',
        value: function getCurrentRecord() {
            return this.currentRecord;
        }
    }, {
        key: 'getPrimaryKeyFields',
        value: function getPrimaryKeyFields() {
            return this.primaryKeyFields;
        }
    }, {
        key: 'getState',
        value: function getState() {
            return this.dsState;
        }
    }, {
        key: 'getRecno',
        value: function getRecno() {
            return this.currentRecno;
        }
    }, {
        key: 'gotoRecordByPrimaryKey',
        value: function gotoRecordByPrimaryKey(values) {
            if (this.getState() != 'dsBrowse') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro atual está sendo inserido ou editado.');
            }
            if (!values) {
                throw new _anterosReactCore.AnterosDatasourceError('Informe os valores da chave primária para ir para um registro.');
            }
            var arrValues = _react2.default.Children.toArray(values);
            if (arrValues.length != getPrimaryKeyFields().length) {
                throw new _anterosReactCore.AnterosDatasourceError('Número de valores da chave primária incorretos.');
            }

            if (!this.primaryKeyFields || this.primaryKeyFields.length == 0) {
                throw new _anterosReactCore.AnterosDatasourceError('Campos da chave primária do Datasource não foram definidas.');
            }

            if (this.data) {
                var _this = this;
                this.data.forEach(function (record) {
                    var _record = record;
                    var _primaryKeyFields = _this.getPrimaryKeyFields();
                    var found = 0;
                    this.arrValues.forEach(function (value, index) {
                        if (_record[_primaryKeyFields[index]] == value) {
                            found++;
                        }
                    });
                    if (found == _primaryKeyFields.length) {
                        return record;
                    }
                });
            }
        }
    }, {
        key: 'getPrimaryKey',
        value: function getPrimaryKey() {
            var result = [];
            if (!this.isEmpty()) {
                this.primaryKeyFields.forEach(function (field, index) {
                    result.push({ field: this.currentRecord[field] });
                });
            }
        }
    }, {
        key: 'gotoRecord',
        value: function gotoRecord(recno) {
            if (this.getState() != 'dsBrowse') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro atual está sendo inserido ou editado.');
            }

            if (recno == undefined || recno < 0) {
                throw new _anterosReactCore.AnterosDatasourceError('Número do registro informado inválido ' + recno);
            }
            if (this.isEmpty()) {
                throw new _anterosReactCore.AnterosDatasourceError('Não há registros para posicionar.');
            }

            if (recno > this.getTotalRecords() - 1) {
                throw new _anterosReactCore.AnterosDatasourceError('Número do registro maior que o total de registros.');
            }

            this.currentRecno = recno;
            this.currentRecord = this.data[recno];
            this.dispatchEvent(dataSourceEvents.AFTER_SCROLL);
        }
    }, {
        key: 'gotoRecordByData',
        value: function gotoRecordByData(record) {
            var _this = this;
            if (this.getState() != 'dsBrowse') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro atual está sendo inserido ou editado.');
            }

            if (this.isEmpty()) {
                throw new _anterosReactCore.AnterosDatasourceError('Não há registros para posicionar.');
            }
            if (this.currentRecord == record) {
                return;
            }

            this.data.forEach(function (r, index) {
                if (record == r) {
                    _this.currentRecno = index;
                    _this.currentRecord = r;
                    _this.dispatchEvent(dataSourceEvents.AFTER_SCROLL);
                    return;
                }
            });
        }
    }, {
        key: 'fieldByName',
        value: function fieldByName(fieldName) {
            if (!fieldName) {
                throw new _anterosReactCore.AnterosDatasourceError('Nome do campo inválido.');
            }
            if (this.isEmpty()) {
                return;
            }
            if (this.isBOF()) {
                throw new _anterosReactCore.AnterosDatasourceError('Inicio do Datasource encontrado.');
            }
            if (this.isBOF()) {
                throw new _anterosReactCore.AnterosDatasourceError('Fim do Datasource encontrado.');
            }

            var record = this.data[this.currentRecno];
            if (this.getState() == 'dsEdit') {
                record = this.currentRecord;
            }

            var value = this._fieldByName(record, fieldName);
            return value;
        }
    }, {
        key: '_fieldByName',
        value: function _fieldByName(record, fieldName) {
            var value = _anterosReactCore.AnterosObjectUtils.getNestedProperty(record, fieldName);
            if (value == undefined) {
                return;
            }
            var date = _anterosReactCore.AnterosDateUtils.parseDateWithFormat(value, _anterosReactCore.Anteros.dataSourceDatetimeFormat);
            if (date instanceof Date) {
                return date;
            }
            return value;
        }
    }, {
        key: 'setFieldByName',
        value: function setFieldByName(fieldName, value) {
            if (this.isEmpty()) {
                return;
            }
            if (this.getState() == 'dsBrowse') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro não está sendo inserido ou editado.');
            }
            var newValue = value;
            if (value instanceof Date) {
                newValue = _anterosReactCore.AnterosDateUtils.formatDate(value, _anterosReactCore.Anteros.dataSourceDatetimeFormat);
            }
            _anterosReactCore.AnterosObjectUtils.setNestedProperty(this.currentRecord, fieldName, newValue);

            this.dispatchEvent(dataSourceEvents.DATA_FIELD_CHANGED, null, fieldName);
        }
    }, {
        key: 'locate',
        value: function locate(values) {
            if (this.getState() != 'dsBrowse') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro atual está sendo inserido ou editado.');
            }

            if (this.isEmpty()) {
                return false;
            }

            var found = -1;
            var _this = this;
            var index = -1;
            this.data.forEach(function (record) {
                index++;
                for (var propertyName in values) {
                    if (_this._fieldByName(record, propertyName) == values[propertyName]) {
                        found = index;
                    }
                }
            });

            if (found >= 0) {
                this.gotoRecord(found);
            }
            return found >= 0;
        }
    }, {
        key: 'isEOF',
        value: function isEOF() {
            return this.currentRecno > this.totalRecords - 1 || this.isEmpty();
        }
    }, {
        key: 'isBOF',
        value: function isBOF() {
            return this.currentRecno == -1;
        }
    }, {
        key: 'isFirst',
        value: function isFirst() {
            return this.currentRecno == 0;
        }
    }, {
        key: 'isLast',
        value: function isLast() {
            return this.currentRecno == this.getTotalRecords - 1;
        }
    }, {
        key: 'first',
        value: function first() {
            if (this.getState() != 'dsBrowse') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro atual está sendo inserido ou editado.');
            }

            if (this.getTotalRecords() > 0) {
                this.currentRecno = 0;
                this.currentRecord = this.data[this.currentRecno];
                this.dispatchEvent(dataSourceEvents.AFTER_SCROLL);
            } else {
                this.currentRecno = -1;
                this.currentRecord = null;
            }
        }
    }, {
        key: 'last',
        value: function last() {
            if (this.getState() != 'dsBrowse') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro atual está sendo inserido ou editado.');
            }

            if (this.getTotalRecords() > 0) {
                this.currentRecno = this.getTotalRecords() - 1;
                this.currentRecord = this.data[this.currentRecno];
                this.dispatchEvent(dataSourceEvents.AFTER_SCROLL);
            } else {
                this.currentRecno = -1;
                this.currentRecord = null;
            }
        }
    }, {
        key: 'next',
        value: function next() {
            if (this.getState() != 'dsBrowse') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro atual está sendo inserido ou editado.');
            }

            if (this.isEmpty()) {
                throw new _anterosReactCore.AnterosDatasourceError('Não há registros. Impossível avançar um registro.');
            }
            if (this.isEOF()) {
                throw new _anterosReactCore.AnterosDatasourceError('Não é possível avançar pois você já está no final do DataSource.');
            }
            if (this.currentRecno + 1 > this.getTotalRecords() - 1) {
                this.currentRecno = this.currentRecno + 1;
                this.currentRecord = null;
            } else {
                this.currentRecno = this.currentRecno + 1;
                this.currentRecord = this.data[this.currentRecno];
                this.dispatchEvent(dataSourceEvents.AFTER_SCROLL);
            }
        }
    }, {
        key: 'prior',
        value: function prior() {
            if (this.getState() != 'dsBrowse') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro atual está sendo inserido ou editado.');
            }

            if (this.isEmpty()) {
                throw new _anterosReactCore.AnterosDatasourceError('Não há registros. Impossível voltar um registro.');
            }
            if (this.isBOF()) {
                throw new _anterosReactCore.AnterosDatasourceError('Não é possível retroceder pois você já está no inicio do DataSource.');
            }
            if (this.currentRecno - 1 < 0) {
                this.currentRecno = -1;
                this.currentRecord = null;
            } else {
                this.currentRecno = this.currentRecno - 1;
                this.currentRecord = this.data[this.currentRecno];
                this.dispatchEvent(dataSourceEvents.AFTER_SCROLL);
            }
        }
    }, {
        key: 'previous',
        value: function previous() {
            this.prior();
        }
    }, {
        key: 'hasNext',
        value: function hasNext() {
            if (this.isEmpty() || this.isEOF()) {
                return false;
            } else {
                return this.currentRecno + 1 <= this.getTotalRecords() - 1;
            }
        }
    }, {
        key: 'hasPrior',
        value: function hasPrior() {
            if (this.isEmpty() || this.isBOF()) {
                return false;
            } else {
                return this.currentRecno - 1 >= 0;
            }
        }
    }, {
        key: 'hasPrevious',
        value: function hasPrevious() {
            return this.hasPrior();
        }
    }, {
        key: '_validateInsert',
        value: function _validateInsert() {
            if (this.getState() == 'dsEdit') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro já está sendo editado.');
            }
            if (this.getState() == 'dsInsert') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro já está sendo inserido.');
            }
        }
    }, {
        key: 'insert',
        value: function insert() {
            this._validateInsert();
            this.dispatchEvent(dataSourceEvents.BEFORE_INSERT);
            this.oldRecordInsert = this.getCurrentRecord();
            this.oldRecnoInsert = this.getRecno();
            this.totalRecords++;
            this.grandTotalRecords++;
            var nextRecord = this.getTotalRecords();
            this.data[nextRecord - 1] = {};
            this.currentRecord = this.data[nextRecord - 1];
            this.currentRecno = nextRecord - 1;
            this.dsState = 'dsInsert';
            this.dispatchEvent(dataSourceEvents.AFTER_SCROLL);
            this.dispatchEvent(dataSourceEvents.AFTER_INSERT);
        }
    }, {
        key: '_validateDelete',
        value: function _validateDelete() {
            if (this.isEmpty()) {
                throw new _anterosReactCore.AnterosDatasourceError('Não há registros para remover.');
            }
            if (this.isBOF()) {
                throw new _anterosReactCore.AnterosDatasourceError('Inicio do Datasource encontrado.');
            }
            if (this.isBOF()) {
                throw new _anterosReactCore.AnterosDatasourceError('Fim do Datasource encontrado.');
            }
            if (this.getState() == 'dsEdit') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro já está sendo editado.');
            }
            if (this.getState() == 'dsInsert') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro já está sendo inserido.');
            }
        }
    }, {
        key: 'delete',
        value: function _delete(callback) {
            this._validateDelete();
            this.dispatchEvent(dataSourceEvents.BEFORE_DELETE);
            this.data.splice(this.currentRecno, 1);
            this.totalRecords--;
            this.grandTotalRecords--;
            if (this.data.length == 0) this.currentRecord = undefined;else this.currentRecord = this.data[this.currentRecno];
            this.dsState = 'dsBrowse';
            this.dispatchEvent(dataSourceEvents.AFTER_SCROLL);
            this.dispatchEvent(dataSourceEvents.AFTER_DELETE);

            if (callback) callback();
        }
    }, {
        key: '_validateEdit',
        value: function _validateEdit() {
            if (this.isEmpty()) {
                throw new _anterosReactCore.AnterosDatasourceError('Não há registros para editar.');
            }
            if (this.isBOF()) {
                throw new _anterosReactCore.AnterosDatasourceError('Inicio do Datasource encontrado.');
            }
            if (this.isBOF()) {
                throw new _anterosReactCore.AnterosDatasourceError('Fim do Datasource encontrado.');
            }
            if (this.getState() == 'dsEdit') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro já está sendo editado.');
            }
            if (this.getState() == 'dsInsert') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro já está sendo inserido.');
            }
        }
    }, {
        key: 'edit',
        value: function edit() {
            this._validateEdit();
            this.dispatchEvent(dataSourceEvents.BEFORE_EDIT);
            this.dsState = 'dsEdit';
            this.currentRecord = (0, _lodash.cloneDeep)(this.currentRecord);
            this.dispatchEvent(dataSourceEvents.AFTER_EDIT);
        }
    }, {
        key: '_validatePost',
        value: function _validatePost() {
            if (this.dsState == 'dsBrowse') {
                throw new _anterosReactCore.AnterosDatasourceError("Registro não está sendo inserido ou editado.");
            }
        }
    }, {
        key: 'post',
        value: function post(callback) {
            this._validatePost();
            this.dispatchEvent(dataSourceEvents.BEFORE_POST);
            if (this.dsState == 'dsEdit') {
                this.data[this.getRecno()] = this.currentRecord;
            }
            this.dsState = 'dsBrowse';
            this.dispatchEvent(dataSourceEvents.AFTER_POST);
            if (callback) callback();
        }
    }, {
        key: '_validateCancel',
        value: function _validateCancel() {
            if (this.dsState == 'dsBrowse') {
                throw new _anterosReactCore.AnterosDatasourceError("Registro não está sendo inserido ou editado.");
            }
        }
    }, {
        key: 'cancel',
        value: function cancel() {
            this._validateCancel();
            this.dispatchEvent(dataSourceEvents.BEFORE_CANCEL);
            if (this.dsState == 'dsInsert') {
                this.data.splice(this.currentRecno, 1);
                this.currentRecord = this.oldRecordInsert;
                this.currentRecno = this.oldRecnoInsert;
                this.totalRecords--;
                this.grandTotalRecords--;
                this.dsState = 'dsBrowse';
                this.dispatchEvent(dataSourceEvents.AFTER_SCROLL);
            } else {
                this.currentRecord = this.data[this.currentRecno];
            }
            this.dsState = 'dsBrowse';
            this.dispatchEvent(dataSourceEvents.AFTER_CANCEL);
        }
    }, {
        key: 'disabledAllListeners',
        value: function disabledAllListeners() {
            this._enableListeners = false;
        }
    }, {
        key: 'enableAllListeners',
        value: function enableAllListeners() {
            this._enableListeners = true;
        }
    }, {
        key: 'dispatchEvent',
        value: function dispatchEvent(event, error, fieldName) {
            if (this._enableListeners) {
                this.listeners.forEach(function (listener) {
                    if (listener.event == event) {
                        if (fieldName) {
                            if (listener.fieldName.startsWith(fieldName)) {
                                listener.dispatch(event, error, fieldName);
                            }
                        } else {
                            listener.dispatch(event, error);
                        }
                    }
                });
            }
        }
    }, {
        key: 'addEventListener',
        value: function addEventListener(event, dispatch, fieldName) {
            var _this = this;
            if (_anterosReactCore.AnterosUtils.isArray(event)) {
                event.forEach(function (ev) {
                    _this.listeners.push({ event: ev, dispatch: dispatch, fieldName: fieldName });
                });
            } else {
                this.listeners.push({ event: event, dispatch: dispatch, fieldName: fieldName });
            }
        }
    }, {
        key: 'removeEventListener',
        value: function removeEventListener(event, dispatch, fieldName) {
            var _this = this;
            if (_anterosReactCore.AnterosUtils.isArray(event)) {
                event.forEach(function (ev) {
                    _this.removeEventListener(ev, dispatch);
                });
            } else {
                this.listeners = this.listeners.filter(function (item) {
                    return item.event !== event || item.dispatch !== dispatch || item.fieldName !== fieldName;
                });
            }
        }
    }]);

    return AnterosDatasource;
}();

var AnterosLocalDatasource = function (_AnterosDatasource) {
    _inherits(AnterosLocalDatasource, _AnterosDatasource);

    function AnterosLocalDatasource(data) {
        _classCallCheck(this, AnterosLocalDatasource);

        var _this2 = _possibleConstructorReturn(this, (AnterosLocalDatasource.__proto__ || Object.getPrototypeOf(AnterosLocalDatasource)).call(this));

        _this2.data = data;
        _this2.cloneOnEdit = true;
        return _this2;
    }

    _createClass(AnterosLocalDatasource, [{
        key: 'open',
        value: function open(data, cloneOnEdit) {
            _get(AnterosLocalDatasource.prototype.__proto__ || Object.getPrototypeOf(AnterosLocalDatasource.prototype), 'open', this).call(this);
            this.data = data;
            if (!this.data) {
                this.data = [];
            }
            this.totalRecords = this.data.length;
            this.grandTotalRecords = this.data.length;
            this.dispatchEvent(dataSourceEvents.AFTER_OPEN);
            this.first();
            this.cloneOnEdit = cloneOnEdit == undefined ? false : cloneOnEdit;
        }
    }, {
        key: 'close',
        value: function close() {
            _get(AnterosLocalDatasource.prototype.__proto__ || Object.getPrototypeOf(AnterosLocalDatasource.prototype), 'close', this).call(this);
            this.data = [];
            this.totalRecords = this.data.length;
            this.grandTotalRecords = this.data.length;
            this.dispatchEvent(dataSourceEvents.AFTER_CLOSE);
        }
    }, {
        key: 'edit',
        value: function edit() {
            this._validateEdit();
            this.dispatchEvent(dataSourceEvents.BEFORE_EDIT);
            this.dsState = 'dsEdit';
            if (this.cloneOnEdit) this.currentRecord = (0, _lodash.cloneDeep)(this.currentRecord);
            this.dispatchEvent(dataSourceEvents.AFTER_EDIT);
        }
    }, {
        key: 'append',
        value: function append(record) {
            if (this.getState() == 'dsEdit') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro já está sendo editado.');
            }
            if (this.getState() == 'dsInsert') {
                throw new _anterosReactCore.AnterosDatasourceError('Registro já está sendo inserido.');
            }

            if (!this.data) {
                this.data = [];
            }

            this.data.push(record);
            this.totalRecords = this.data.length;
            this.grandTotalRecords = this.data.length;
            this.currentRecord = record;
            this.currentRecno = this.data.length - 1;
            this.dispatchEvent(dataSourceEvents.AFTER_POST);
            this.dispatchEvent(dataSourceEvents.AFTER_SCROLL);
        }
    }]);

    return AnterosLocalDatasource;
}(AnterosDatasource);

var AnterosRemoteDatasource = function (_AnterosDatasource2) {
    _inherits(AnterosRemoteDatasource, _AnterosDatasource2);

    function AnterosRemoteDatasource(ajaxConfig) {
        _classCallCheck(this, AnterosRemoteDatasource);

        var _this3 = _possibleConstructorReturn(this, (AnterosRemoteDatasource.__proto__ || Object.getPrototypeOf(AnterosRemoteDatasource)).call(this));

        _this3.ajaxConfig = ajaxConfig;
        _this3.ajaxPageConfigHandler = undefined;
        _this3.ajaxPostConfigHandler = undefined;
        _this3.ajaxDeleteConfigHandler = undefined;
        _this3.validatePostResponse = undefined;
        _this3.validateDeleteResponse = undefined;
        _this3.storePostResultToRecord = true;

        _this3.setAjaxPageConfigHandler = _this3.setAjaxPageConfigHandler.bind(_this3);
        _this3.setAjaxPostConfigHandler = _this3.setAjaxPostConfigHandler.bind(_this3);
        _this3.setAjaxDeleteConfigHandler = _this3.setAjaxDeleteConfigHandler.bind(_this3);
        _this3.setStorePostResultToRecord = _this3.setStorePostResultToRecord.bind(_this3);
        _this3.setValidatePostResponse = _this3.setValidatePostResponse.bind(_this3);
        _this3.setValidateDeleteResponse = _this3.setValidateDeleteResponse.bind(_this3);
        _this3.executeAjax = _this3.executeAjax.bind(_this3);
        _this3.executed = false;
        return _this3;
    }

    _createClass(AnterosRemoteDatasource, [{
        key: 'setValidatePostResponse',
        value: function setValidatePostResponse(value) {
            this.validatePostResponse = value;
        }
    }, {
        key: 'setValidateDeleteResponse',
        value: function setValidateDeleteResponse(value) {
            this.validateDeleteResponse = value;
        }
    }, {
        key: 'setStorePostResultToRecord',
        value: function setStorePostResultToRecord(value) {
            this.storePostResultToRecord = value;
        }
    }, {
        key: 'setAjaxPageConfigHandler',
        value: function setAjaxPageConfigHandler(handler) {
            this.ajaxPageConfigHandler = handler;
        }
    }, {
        key: 'setAjaxPostConfigHandler',
        value: function setAjaxPostConfigHandler(handler) {
            this.ajaxPostConfigHandler = handler;
        }
    }, {
        key: 'setAjaxDeleteConfigHandler',
        value: function setAjaxDeleteConfigHandler(handler) {
            this.ajaxDeleteConfigHandler = handler;
        }
    }, {
        key: 'open',
        value: function open(ajaxConfig) {
            _get(AnterosRemoteDatasource.prototype.__proto__ || Object.getPrototypeOf(AnterosRemoteDatasource.prototype), 'open', this).call(this);
            if (ajaxConfig && ajaxConfig != null) {
                var _this = this;
                this.executeAjax(ajaxConfig ? ajaxConfig : this.ajaxConfig, dataSourceEvents.AFTER_OPEN);
            } else {
                this.dispatchEvent(dataSourceEvents.AFTER_OPEN);
            }
        }
    }, {
        key: 'post',
        value: function post(callback) {
            if (!this.ajaxPostConfigHandler || !this.validatePostResponse) {
                var error = "Para salvar dados remotamente é necessário configurar 'setAjaxPostConfigHandler' e 'setValidatePostResponse' ";
                this.dispatchEvent(dataSourceEvents.ON_ERROR, error);
                throw new _anterosReactCore.AnterosDatasourceError(error);
            }
            var _this = this;
            this._validatePost();
            this.dispatchEvent(dataSourceEvents.BEFORE_POST);

            var ajaxPostConfig = this.ajaxPostConfigHandler(this.currentRecord);
            (0, _axios2.default)(ajaxPostConfig).then(function (response) {
                if (_this.validatePostResponse(response)) {
                    if (_this.dsState == 'dsEdit') {
                        _this.data[_this.getRecno()] = _this.currentRecord;
                    }
                    if (_this.storePostResultToRecord == true) {
                        var newObject = _anterosReactCore.AnterosJacksonParser.convertJsonToObject(response.data);
                        _this.data[_this.getRecno()] = newObject;
                        _this.currentRecord = newObject;
                    }
                    _this.dsState = 'dsBrowse';
                    _this.dispatchEvent(dataSourceEvents.AFTER_POST);
                    if (callback) {
                        callback();
                    }
                }
            }).catch(function (error) {
                if (callback) {
                    callback(error);
                }
                _this.dispatchEvent(dataSourceEvents.ON_ERROR, error);
            });
        }
    }, {
        key: 'delete',
        value: function _delete(callback) {
            if (!this.ajaxDeleteConfigHandler || !this.validateDeleteResponse) {
                var error = "Para remover dados remotamente é necessário configurar 'setAjaxDeleteConfigHandler' e 'setValidateDeleteResponse' ";
                this.dispatchEvent(dataSourceEvents.ON_ERROR, error);
                throw new _anterosReactCore.AnterosDatasourceError(error);
            }
            var _this = this;
            this._validateDelete();
            this.dispatchEvent(dataSourceEvents.BEFORE_DELETE);
            var ajaxDeleteConfig = this.ajaxDeleteConfigHandler(this.currentRecord);
            (0, _axios2.default)(ajaxDeleteConfig).then(function (response) {
                if (_this.validateDeleteResponse(response)) {
                    _this.data.splice(_this.currentRecno, 1);
                    if (_this.data.length == 0) _this.currentRecord = undefined;else _this.currentRecord = _this.data[_this.currentRecno];
                    _this.totalRecords--;
                    _this.grandTotalRecords--;
                    _this.dsState = 'dsBrowse';
                    _this.dispatchEvent(dataSourceEvents.AFTER_SCROLL);
                    _this.dispatchEvent(dataSourceEvents.AFTER_DELETE);
                }
                if (callback) {
                    callback();
                }
            }).catch(function (error) {
                if (callback) {
                    callback(error);
                }
                _this.dispatchEvent(dataSourceEvents.ON_ERROR, error);
            });
        }
    }, {
        key: 'goToPage',
        value: function goToPage(page) {
            if (!this.ajaxPageConfigHandler) {
                var error = "Para buscar dados paginados remotamente é necessário configurar 'setAjaxPageConfigHandler'";
                this.dispatchEvent(dataSourceEvents.ON_ERROR, error);
                throw new _anterosReactCore.AnterosDatasourceError(error);
            }
            this.dispatchEvent(dataSourceEvents.BEFORE_GOTO_PAGE);
            var ajaxPageConfig = this.ajaxPageConfigHandler(page);
            this.executeAjax(ajaxPageConfig, dataSourceEvents.AFTER_GOTO_PAGE);
        }
    }, {
        key: 'executeAjax',
        value: function executeAjax(ajaxConfig, event) {
            var _this = this;
            this.executed = false;
            (0, _axios2.default)(ajaxConfig ? ajaxConfig : this.ajaxConfig).then(function (response) {
                if (response.data.hasOwnProperty(_this.totalPagesProperty)) {
                    _this.totalPages = response.data[_this.totalPagesProperty];
                }

                if (response.data.hasOwnProperty(_this.currentPageProperty)) {
                    _this.currentPage = response.data[_this.currentPageProperty];
                }

                if (response.data.hasOwnProperty(_this.sizeOfPageProperty)) {
                    _this.sizeOfPage = response.data[_this.sizeOfPageProperty];
                }

                if (response.data.hasOwnProperty(_this.totalRecordsProperty)) {
                    _this.totalRecords = response.data[_this.totalRecordsProperty];
                }

                if (response.data.hasOwnProperty(_this.grandTotalRecordsProperty)) {
                    _this.grandTotalRecords = response.data[_this.grandTotalRecordsProperty];
                }

                if (response.data.hasOwnProperty(_this.contentProperty)) {
                    var temp = _anterosReactCore.AnterosJacksonParser.convertJsonToObject(response.data[_this.contentProperty]);
                    if (_anterosReactCore.AnterosUtils.isArray(temp)) _this.data = temp;else {
                        _this.data = [];
                        _this.data.push(temp);
                    }
                } else {
                    var _temp = _anterosReactCore.AnterosJacksonParser.convertJsonToObject(response.data);
                    if (_anterosReactCore.AnterosUtils.isArray(_temp)) _this.data = _temp;else {
                        _this.data = [];
                        _this.data.push(_temp);
                    }
                    _this.totalRecords = _this.data.length;
                    _this.grandTotalRecords = _this.data.length;
                }
                _this.executed = true;
                _this.first();
                _this.dispatchEvent(event);
            }).catch(function (error) {
                if (_this.executed) {
                    throw new Error(error);
                } else {
                    _this.dispatchEvent(dataSourceEvents.ON_ERROR, error);
                }
            });
        }
    }, {
        key: 'close',
        value: function close() {
            _get(AnterosRemoteDatasource.prototype.__proto__ || Object.getPrototypeOf(AnterosRemoteDatasource.prototype), 'close', this).call(this);
            this.data = [];
            this.dispatchEvent(dataSourceEvents.AFTER_CLOSE);
        }
    }]);

    return AnterosRemoteDatasource;
}(AnterosDatasource);

exports.AnterosLocalDatasource = AnterosLocalDatasource;
exports.AnterosRemoteDatasource = AnterosRemoteDatasource;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
   value: true
});
exports.dataSourceEvents = exports.AnterosRemoteDatasource = exports.AnterosLocalDatasource = exports.AnterosDatasource = undefined;

var _AnterosDatasource = __webpack_require__(0);

exports.AnterosDatasource = _AnterosDatasource.AnterosDatasource;
exports.AnterosLocalDatasource = _AnterosDatasource.AnterosLocalDatasource;
exports.AnterosRemoteDatasource = _AnterosDatasource.AnterosRemoteDatasource;
exports.dataSourceEvents = _AnterosDatasource.dataSourceEvents;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("anteros-react-core");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("axios");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ })
/******/ ]);
});
//# sourceMappingURL=anteros-react-datasource.js.map