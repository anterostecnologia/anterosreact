{"version":3,"file":"index.cjs.js","sources":["../src/constants.ts","../src/utils/createBlock.ts","../src/blocks/standard/Wrapper/index.tsx","../src/blocks/standard/Page/index.tsx","../src/blocks/standard/Section/index.tsx","../src/blocks/standard/Column/index.tsx","../src/blocks/standard/Text/index.tsx","../src/blocks/standard/Image/index.tsx","../src/blocks/standard/Group/index.tsx","../src/blocks/standard/Button/index.tsx","../src/blocks/standard/Divider/index.tsx","../src/blocks/standard/Spacer/index.tsx","../src/utils/ImageManager.ts","../src/utils/getImg.ts","../src/utils/mergeBlock.ts","../src/blocks/standard/Carousel/index.tsx","../src/blocks/standard/Hero/index.tsx","../src/blocks/standard/Navbar/index.tsx","../src/blocks/standard/Social/index.tsx","../src/blocks/standard/Raw/index.tsx","../src/blocks/standard/Template/index.tsx","../src/blocks/standard/AccordionElement/index.tsx","../src/blocks/standard/AccordionTitle/index.tsx","../src/blocks/standard/AccordionText/index.tsx","../src/blocks/standard/Accordion/index.tsx","../src/blocks/standard/Table/index.tsx","../src/blocks/standard/index.tsx","../src/utils/parseReactBlockToBlockData.ts","../src/components/MjmlBlock.tsx","../src/components/Page.tsx","../src/components/Section.tsx","../src/components/Column.tsx","../src/components/Text.tsx","../src/components/Image.tsx","../src/components/Group.tsx","../src/components/Button.tsx","../src/components/Divider.tsx","../src/components/Wrapper.tsx","../src/components/Spacer.tsx","../src/components/Raw.tsx","../src/components/Accordion.tsx","../src/components/AccordionElement.tsx","../src/components/AccordionTitle.tsx","../src/components/AccordionText.tsx","../src/components/Carousel.tsx","../src/components/Hero.tsx","../src/components/Navbar.tsx","../src/components/Social.tsx","../src/components/Table.tsx","../src/components/Template.tsx","../src/utils/createCustomBlock.ts","../src/blocks/advanced/generateAdvancedBlock.tsx","../src/utils/classnames.ts","../src/utils/ancestorOf.ts","../src/utils/block.ts","../src/utils/getPreviewClassName.ts","../src/blocks/advanced/generateAdvancedContentBlock.tsx","../src/blocks/advanced/generateAdvancedLayoutBlock.tsx","../src/blocks/advanced/blocks/index.ts","../src/blocks/advanced/index.ts","../src/utils/BlockManager.ts","../src/utils/isValidBlockData.ts","../src/utils/JsonToMjml.ts","../src/utils/parseXMLtoBlock.ts","../src/utils/MjmlToJson.ts","../src/utils/createBlockDataByType.ts","../node_modules/nanoid/index.browser.js","../src/utils/TemplateEngineManager.tsx","../src/utils/isAdvancedBlock.ts"],"sourcesContent":["export type BlockType = BasicType;\n\n// Componentes básicos\nexport enum BasicType {\n  PAGE = 'page',\n  SECTION = 'section',\n  COLUMN = 'column',\n  GROUP = 'group',\n  TEXT = 'text',\n  IMAGE = 'image',\n  DIVIDER = 'divider',\n  SPACER = 'spacer',\n  BUTTON = 'button',\n  WRAPPER = 'wrapper',\n  RAW = 'raw',\n  ACCORDION = 'accordion',\n  ACCORDION_ELEMENT = 'accordion-element',\n  ACCORDION_TITLE = 'accordion-title',\n  ACCORDION_TEXT = 'accordion-text',\n  HERO = 'hero',\n  CAROUSEL = 'carousel',\n  NAVBAR = 'navbar',\n  SOCIAL = 'social',\n  // TODO\n  TABLE = 'table',\n\n  TEMPLATE = 'template',\n}\n\n// Componentes avançados\nexport enum AdvancedType {\n  TEXT = 'advanced_text',\n  IMAGE = 'advanced_image',\n  DIVIDER = 'advanced_divider',\n  SPACER = 'advanced_spacer',\n  BUTTON = 'advanced_button',\n  NAVBAR = 'advanced_navbar',\n  SOCIAL = 'advanced_social',\n  ACCORDION = 'advanced_accordion',\n  CAROUSEL = 'advanced_carousel',\n\n  WRAPPER = 'advanced_wrapper',\n  SECTION = 'advanced_section',\n  COLUMN = 'advanced_column',\n  GROUP = 'advanced_group',\n  HERO = 'advanced_hero',\n}\n\nexport const MERGE_TAG_CLASS_NAME = 'anteros-email-merge-tag-container';\nexport const EMAIL_BLOCK_CLASS_NAME = 'email-block';\n","import { IBlock, IBlockData } from '@core/typings';\n\ninterface CreateBlockOption<T extends IBlockData>\n  extends Omit<IBlock<T>, 'transform'> {}\n\nexport function createBlock<T extends IBlockData>(\n  block: CreateBlockOption<T>\n): IBlock<T> {\n  return block;\n}\n","import { IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { CSSProperties } from 'react';\nimport { createBlock } from '@core/utils/createBlock';\nimport { merge } from 'lodash';\nexport type IWrapper = IBlockData<\n  {\n    'background-color'?: string;\n    border?: string;\n    'border-radius'?: string;\n    'full-width'?: string;\n    direction?: 'ltr' | 'rtl';\n    padding?: string;\n    'text-align'?: CSSProperties['textAlign'];\n  },\n  {}\n>;\n\nexport const Wrapper = createBlock<IWrapper>({\n  name: 'Envólucro',\n  type: BasicType.WRAPPER,\n  create: (payload) => {\n    const defaultData: IWrapper = {\n      type: BasicType.WRAPPER,\n      data: {\n        value: {},\n      },\n      attributes: {\n        padding: '20px 0px 20px 0px',\n        border: 'none',\n        direction: 'ltr',\n        'text-align': 'center',\n      },\n      children: [],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [BasicType.PAGE],\n});\n","import { IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { createBlock } from '@core/utils/createBlock';\nimport { Wrapper } from '../Wrapper';\nimport { merge } from 'lodash';\n\nexport type IPage = IBlockData<\n  {\n    'background-color'?: string;\n    width: string;\n  },\n  {\n    breakpoint?: string;\n    headAttributes: string;\n    fonts?: { name: string; href: string; }[];\n    headStyles?: {\n      content?: string;\n      inline?: 'inline';\n    }[];\n    extraHeadContent?: string;\n    responsive?: boolean;\n    'font-family': string;\n    'font-size': string;\n    'font-weight': string;\n    'line-height': string;\n    'text-color': string;\n    'user-style'?: {\n      content?: string;\n      inline?: 'inline';\n    };\n    'content-background-color'?: string;\n  }\n>;\n\nexport const Page = createBlock<IPage>({\n  name: 'Página',\n  type: BasicType.PAGE,\n  create: (payload) => {\n    const defaultData: IPage = {\n      type: BasicType.PAGE,\n      data: {\n        value: {\n          breakpoint: '480px',\n          headAttributes: '',\n          'font-size': '14px',\n          'font-weight': '400',\n          'line-height': '1.7',\n          headStyles: [],\n          fonts: [],\n          responsive: true,\n          'font-family': '-apple-system, BlinkMacSystemFont, \\'Segoe UI\\', \\'Roboto\\', \\'Oxygen\\', \\'Ubuntu\\', \\'Cantarell\\', \\'Fira Sans\\', \\'Droid Sans\\',\\'Helvetica Neue\\', sans-serif',\n          'text-color': '#000000',\n        },\n      },\n      attributes: {\n        'background-color': '#efeeea',\n        width: '600px',\n      },\n      children: [Wrapper.create()],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [],\n});\n","import { IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { CSSProperties } from 'react';\nimport { createBlock } from '@core/utils/createBlock';\nimport { merge } from 'lodash';\n\nexport type ISection = IBlockData<\n  {\n    'background-color'?: string;\n    'background-position'?: string;\n    'background-position-x'?: string;\n    'background-position-y'?: string;\n    'background-repeat'?: 'repeat' | 'no-repeat';\n    'background-size'?: string;\n    'background-url'?: string;\n    border?: string;\n    'border-radius'?: string;\n    direction?: 'ltr' | 'rtl';\n    'full-width'?: 'ltr' | 'rtl';\n    padding?: string;\n    'text-align'?: CSSProperties['textAlign'];\n    'max-width'?: string;\n  },\n  {}\n>;\n\nexport const Section = createBlock<ISection>({\n  name: 'Seção',\n  type: BasicType.SECTION,\n  create: (payload) => {\n    const defaultData: ISection = {\n      type: BasicType.SECTION,\n      data: {\n        value: {\n          noWrap: false,\n        },\n      },\n      attributes: {\n        padding: '20px 0px 20px 0px',\n        'background-repeat': 'repeat',\n        'background-size': 'auto',\n        'background-position': 'top center',\n        border: 'none',\n        direction: 'ltr',\n        'text-align': 'center',\n      },\n      children: [],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [BasicType.PAGE, BasicType.WRAPPER],\n});\n","import { IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { CSSProperties } from 'react';\nimport { createBlock } from '@core/utils/createBlock';\nimport { merge } from 'lodash';\n\nexport type IColumn = IBlockData<\n  {\n    'background-color'?: string;\n    border?: string;\n    'border-radius'?: string;\n    'inner-border'?: string;\n    'inner-border-radius'?: string;\n    padding?: string;\n    'text-align'?: CSSProperties['textAlign'];\n    'vertical-align'?: CSSProperties['verticalAlign'];\n    width?: string;\n  },\n  {}\n>;\n\nexport const Column = createBlock<IColumn>({\n  name: 'Coluna',\n  type: BasicType.COLUMN,\n  create: (payload) => {\n    const defaultData: IColumn = {\n      type: BasicType.COLUMN,\n      data: {\n        value: {},\n      },\n      attributes: {\n        padding: '0px 0px 0px 0px',\n        border: 'none',\n        'vertical-align': 'top',\n      },\n      children: [],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [BasicType.SECTION, BasicType.GROUP],\n});\n","import { IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { CSSProperties } from 'react';\nimport { createBlock } from '@core/utils/createBlock';\nimport { merge } from 'lodash';\nexport type IText = IBlockData<\n  {\n    color?: string;\n    'font-family'?: string;\n    'font-size'?: string;\n    'font-style'?: string;\n    'font-weight'?: CSSProperties['fontWeight'];\n    'line-height'?: string | number;\n    'letter-spacing'?: string;\n    height?: string;\n    'text-decoration'?: string;\n    'text-transform'?: CSSProperties['textTransform'];\n    align?: CSSProperties['textAlign'];\n    'container-background-color'?: string;\n    width?: string;\n    padding?: string;\n  },\n  {\n    content: string;\n  }\n>;\n\nexport const Text = createBlock<IText>({\n  name: 'Texto',\n  type: BasicType.TEXT,\n  create: (payload) => {\n    const defaultData: IText = {\n      type: BasicType.TEXT,\n      data: {\n        value: {\n          content: 'Facilite para todos escreverem e-mails!',\n        },\n      },\n      attributes: {\n        padding: '10px 25px 10px 25px',\n        align: 'left',\n      },\n      children: [],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [BasicType.COLUMN, BasicType.HERO],\n});\n","import { IBlock, IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { CSSProperties } from 'react';\nimport { createBlock } from '@core/utils/createBlock';\nimport { merge } from 'lodash';\nimport { getImg } from '@core/utils/getImg';\n\nexport type IImage = IBlockData<{\n  alt?: string;\n  src?: string;\n  title?: string;\n  href?: string;\n  target?: string;\n  border?: string;\n  height?: string;\n  'text-decoration'?: string;\n  'text-transform'?: CSSProperties['textTransform'];\n  align?: CSSProperties['textAlign'];\n  'container-background-color'?: string;\n  width?: string;\n  padding?: string;\n}>;\n\nexport const Image: IBlock<IImage> = createBlock({\n  name: 'Imagem',\n  type: BasicType.IMAGE,\n  create: (payload) => {\n    const defaultData: IImage = {\n      type: BasicType.IMAGE,\n      data: {\n        value: {},\n      },\n      attributes: {\n        align: 'center',\n        height: 'auto',\n        padding: '10px 25px 10px 25px',\n        src: '',\n      },\n      children: [],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [BasicType.COLUMN, BasicType.HERO],\n});\n","import { IBlock, IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { createBlock } from '@core/utils/createBlock';\nimport { merge } from 'lodash';\n\nexport type IGroup = IBlockData<{\n  width?: string;\n  'vertical-align'?: 'middle' | 'top' | 'bottom';\n  'background-color'?: string;\n  direction?: 'ltr' | 'rtl';\n}>;\n\nexport const Group: IBlock<IGroup> = createBlock({\n  name: 'Grupo',\n  type: BasicType.GROUP,\n  create: (payload) => {\n    const defaultData: IGroup = {\n      type: BasicType.GROUP,\n      data: {\n        value: {},\n      },\n      attributes: {\n        'vertical-align': 'top',\n        direction: 'ltr',\n      },\n      children: [],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [BasicType.SECTION],\n});\n","import { IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { CSSProperties } from 'react';\nimport { createBlock } from '@core/utils/createBlock';\nimport { merge } from 'lodash';\nexport type IButton = IBlockData<\n  {\n    align?: string;\n    color?: string;\n    'background-color'?: string;\n    'container-background-color'?: string;\n    border?: string;\n    'border-radius'?: string;\n    href?: string;\n    rel?: string;\n    target?: string;\n    title?: string;\n    padding?: string;\n    'inner-padding'?: string;\n    'text-align'?: CSSProperties['textAlign'];\n    'vertical-align'?: 'middle' | 'top' | 'bottom';\n    width?: string;\n    'font-family'?: string;\n    'font-size'?: string;\n    'font-style'?: string;\n    'font-weight'?: CSSProperties['fontWeight'];\n    'line-height'?: string | number;\n    'letter-spacing'?: string;\n    height?: string;\n    'text-decoration'?: string;\n    'text-transform'?: CSSProperties['textTransform'];\n  },\n  { content: string }\n>;\n\nexport const Button = createBlock<IButton>({\n  name: 'Botão',\n  type: BasicType.BUTTON,\n  create: (payload) => {\n    const defaultData: IButton = {\n      type: BasicType.BUTTON,\n      data: {\n        value: {\n          content: 'Button',\n        },\n      },\n      attributes: {\n        align: 'center',\n        'background-color': '#414141',\n        color: '#ffffff',\n        'font-weight': 'normal',\n        'border-radius': '3px',\n        padding: '10px 25px 10px 25px',\n        'inner-padding': '10px 25px 10px 25px',\n        'line-height': '120%',\n        target: '_blank',\n        'vertical-align': 'middle',\n        border: 'none',\n        'text-align': 'center',\n        href: '#',\n      },\n      children: [],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [BasicType.COLUMN, BasicType.HERO],\n});\n","import { IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { createBlock } from '@core/utils/createBlock';\nimport { merge } from 'lodash';\nexport type IDivider = IBlockData<\n  {\n    'border-color'?: string;\n    'border-style'?: string;\n    'border-width'?: string;\n    'container-background-color'?: string;\n    width?: string;\n    align?: 'left' | 'center' | 'right';\n    padding?: string;\n  },\n  {}\n>;\n\nexport const Divider = createBlock<IDivider>({\n  name: 'Divisor',\n  type: BasicType.DIVIDER,\n  create: (payload) => {\n    const defaultData: IDivider = {\n      type: BasicType.DIVIDER,\n      data: {\n        value: {},\n      },\n      attributes: {\n        align: 'center',\n        'border-width': '1px',\n        'border-style': 'solid',\n        'border-color': '#C9CCCF',\n        padding: '10px 0px 10px 0px',\n      },\n      children: [],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [BasicType.COLUMN, BasicType.HERO],\n});\n","import { IBlock, IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { createBlock } from '@core/utils/createBlock';\nimport { merge } from 'lodash';\n\nexport type ISpacer = IBlockData<{\n  'container-background-color'?: string;\n  height?: string;\n  padding?: string;\n}>;\n\nexport const Spacer: IBlock<ISpacer> = createBlock({\n  name: 'Espaçamento',\n  type: BasicType.SPACER,\n  create: (payload) => {\n    const defaultData: ISpacer = {\n      type: BasicType.SPACER,\n      data: {\n        value: {},\n      },\n      attributes: {\n        height: '20px',\n      },\n      children: [],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [BasicType.COLUMN, BasicType.HERO],\n});\n","\ntype ObjectString = { [key: string]: string; };\n\nexport class ImageManager {\n  private static map: ObjectString = {};\n  private static overrideMap: { [key: string]: boolean; } = {};\n\n  public static add(imgMap: ObjectString) {\n    Object.keys(imgMap).forEach(name => {\n      if (this.map[name]) {\n        this.overrideMap[name] = true;\n      }\n      this.map[name] = imgMap[name];\n    });\n  }\n\n  public static get<T extends ObjectString>(name: keyof T): string {\n    return (this.map as any)[name];\n  }\n\n  public static getOverrideMap() {\n    return this.overrideMap;\n  }\n\n}\n\n","import { ImageManager } from './ImageManager';\n\nconst defaultImagesMap = {\n  IMAGE_01:\n    'https://infra.relevantsolutions.com.br/nextcloud/index.php/s/JQNT2Dsr6ntExXA/download',\n  IMAGE_02:\n    'https://infra.relevantsolutions.com.br/nextcloud/index.php/s/AZ6CNtPYTHdCm4D/download',\n  IMAGE_03:\n    'https://infra.relevantsolutions.com.br/nextcloud/index.php/s/LteDFT6PSogDDPG/download',\n  IMAGE_04:\n    'https://infra.relevantsolutions.com.br/nextcloud/index.php/s/TBioobJk4cWgpYm/download',\n  IMAGE_59:\n    'https://infra.relevantsolutions.com.br/nextcloud/index.php/s/MZPr8r9RXxScSoL/download',\n  IMAGE_09:\n    'https://infra.relevantsolutions.com.br/nextcloud/index.php/s/cbdGkRFDmgskgqg/download',\n  IMAGE_10:\n    'https://infra.relevantsolutions.com.br/nextcloud/index.php/s/wTe9YXwdP2dwBjb/download',\n  IMAGE_15:\n    'https://infra.relevantsolutions.com.br/nextcloud/index.php/s/S2mAMxsYSzHmma8/download',\n  IMAGE_16:\n    'https://infra.relevantsolutions.com.br/nextcloud/index.php/s/XH3tQ3Jk4fjakYN/download',\n  IMAGE_17:\n    'https://infra.relevantsolutions.com.br/nextcloud/index.php/s/7FJWro6BZFrJAqT/download',\n  IMAGE_31:\n    'https://infra.relevantsolutions.com.br/nextcloud/index.php/s/wi2WeA5Kwy2xwD9/download',\n};\n\nImageManager.add(defaultImagesMap);\nexport function getImg(name: keyof typeof defaultImagesMap) {\n  return ImageManager.get(name);\n}\n","import { IBlockData, RecursivePartial } from '@core/typings';\nimport { isArray, mergeWith } from 'lodash';\n\nexport function mergeBlock<T extends IBlockData>(a: T, b?: RecursivePartial<T>): T {\n  return mergeWith(a, b, (a, b) => isArray(b) ? b : undefined);\n}","import { IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { createBlock } from '@core/utils/createBlock';\nimport { getImg } from '@core/utils/getImg';\nimport { mergeBlock } from '@core/utils/mergeBlock';\nexport type ICarousel = IBlockData<\n  {\n    align?: string;\n    'background-color'?: string;\n    'border-radius'?: string;\n    'icon-width'?: string;\n    'left-icon'?: string;\n    'right-icon'?: string;\n    'tb-border'?: string;\n    'tb-border-radius'?: string;\n    'tb-hover-border-color'?: string;\n    'tb-selected-border-color'?: string;\n    'tb-width'?: string;\n    thumbnails?: string;\n  },\n  {\n    images: Array<{\n      src: string;\n      target: string;\n      href?: string;\n      'thumbnails-src'?: string;\n      title?: string;\n      rel?: string;\n      alt?: string;\n    }>;\n  }\n>;\n\nexport const Carousel = createBlock<ICarousel>({\n  name: 'Carrossel',\n  type: BasicType.CAROUSEL,\n  create: (payload) => {\n    const defaultData: ICarousel = {\n      type: BasicType.CAROUSEL,\n      data: {\n        value: {\n          images: [\n            {\n              src: getImg('IMAGE_15'),\n              target: '_blank',\n            },\n            {\n              src: getImg('IMAGE_16'),\n              target: '_blank',\n            },\n            {\n              src: getImg('IMAGE_17'),\n              target: '_blank',\n            },\n          ],\n        },\n      },\n      attributes: {\n        align: 'center',\n        'left-icon': 'https://i.imgur.com/xTh3hln.png',\n        'right-icon': 'https://i.imgur.com/os7o9kz.png',\n        'icon-width': '44px',\n        thumbnails: 'visible',\n      },\n      children: [],\n    };\n    return mergeBlock(defaultData, payload);\n  },\n  validParentType: [BasicType.COLUMN],\n});\n","import { IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { createBlock } from '@core/utils/createBlock';\nimport { getImg } from '@core/utils/getImg';\nimport { mergeBlock } from '@core/utils/mergeBlock';\nexport type IHero = IBlockData<\n  {\n    'background-color'?: string;\n    'background-height'?: string;\n    'background-position'?: string;\n    'background-url'?: string;\n    'background-width'?: string;\n    'vertical-align'?: string;\n    'border-radius'?: string;\n    width?: string;\n    height?: string;\n    mode: 'fluid-height' | 'fixed-height';\n    padding?: string;\n  },\n  {}\n>;\n\nexport const Hero = createBlock<IHero>({\n  name: 'Herói',\n  type: BasicType.HERO,\n  create: (payload) => {\n    const defaultData: IHero = {\n      type: BasicType.HERO,\n      data: {\n        value: {},\n      },\n      attributes: {\n        'background-color': '#ffffff',\n        'background-position': 'center center',\n        mode: 'fluid-height',\n        padding: '100px 0px 100px 0px',\n        'vertical-align': 'top',\n        'background-url': getImg('IMAGE_31'),\n      },\n      children: [\n        {\n          type: 'text',\n          data: {\n            value: {\n              content: 'Servimos Alimentos Saudáveis ​​e Deliciosos',\n            },\n          },\n          attributes: {\n            padding: '10px 25px 10px 25px',\n            align: 'center',\n            color: '#ffffff',\n            'font-size': '45px',\n            'line-height': '45px',\n          },\n          children: [],\n        },\n        {\n          type: 'text',\n          data: {\n            value: {\n              content:\n                'Um pequeno rio chamado Duden corre por seu lugar e fornece a regelialia necessária. É um país paradisíaco, em que partes de frases voam para a boca.<br>',\n            },\n          },\n          attributes: {\n            align: 'center',\n            'background-color': '#414141',\n            color: '#ffffff',\n            'font-weight': 'normal',\n            'border-radius': '3px',\n            padding: '10px 25px 10px 25px',\n            'inner-padding': '10px 25px 10px 25px',\n            'line-height': '1.5',\n            target: '_blank',\n            'vertical-align': 'middle',\n            border: 'none',\n            'text-align': 'center',\n            href: '#',\n            'font-size': '14px',\n          },\n          children: [],\n        },\n        {\n          type: 'button',\n          data: {\n            value: {\n              content: 'Faça seu pedido aqui!',\n            },\n          },\n          attributes: {\n            align: 'center',\n            'background-color': '#f3a333',\n            color: '#ffffff',\n            'font-size': '13px',\n            'font-weight': 'normal',\n            'border-radius': '30px',\n            padding: '10px 25px 10px 25px',\n            'inner-padding': '10px 25px 10px 25px',\n            'line-height': '120%',\n            target: '_blank',\n            'vertical-align': 'middle',\n            border: 'none',\n            'text-align': 'center',\n            href: '#',\n          },\n          children: [],\n        },\n      ],\n    };\n    return mergeBlock(defaultData, payload);\n  },\n  validParentType: [BasicType.PAGE, BasicType.WRAPPER],\n});\n","import { IBlock, IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { createBlock } from '@core/utils/createBlock';\nimport { mergeBlock } from '@core/utils/mergeBlock';\n\nexport type INavbar = IBlockData<\n  {\n    align?: string;\n    hamburger?: string;\n    'ico-align'?: string;\n    'ico-color'?: string;\n    'ico-font-size'?: string;\n    'ico-line-height'?: string;\n    'ico-padding'?: string;\n    'ico-text-decoration'?: string;\n    'ico-text-transform'?: string;\n  },\n  {\n    links: Array<{\n      content: string;\n      color?: string;\n      href?: string;\n      'font-family'?: string;\n      'font-size'?: string;\n      'font-style'?: string;\n      'font-weight'?: string;\n      'line-height'?: string;\n      'text-decoration'?: string;\n      target?: string;\n      padding?: string;\n    }>;\n  }\n>;\n\nexport const Navbar: IBlock<INavbar> = createBlock({\n  name: 'Barra navegação',\n  type: BasicType.NAVBAR,\n  create: (payload) => {\n    const defaultData: INavbar = {\n      type: BasicType.NAVBAR,\n      data: {\n        value: {\n          links: [\n            {\n              href: '/gettings-started-onboard',\n              content: 'Começando',\n              color: '#1890ff',\n              'font-size': '13px',\n              target: '_blank',\n              padding: '15px 10px',\n            },\n            {\n              href: '/try-it-live',\n              content: 'Experimente ao vivo',\n              color: '#1890ff',\n              'font-size': '13px',\n              target: '_blank',\n              padding: '15px 10px',\n            },\n            {\n              href: '/templates',\n              content: 'Modelos',\n              color: '#1890ff',\n              'font-size': '13px',\n              target: '_blank',\n              padding: '15px 10px',\n            },\n            {\n              href: '/components',\n              content: 'Componentes',\n              color: '#1890ff',\n              'font-size': '13px',\n              target: '_blank',\n              padding: '15px 10px',\n            },\n          ],\n        },\n      },\n      attributes: {\n        align: 'center',\n      },\n      children: [],\n    };\n    return mergeBlock(defaultData, payload);\n  },\n  validParentType: [BasicType.COLUMN, BasicType.HERO],\n});\n","import { IBlock, IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { CSSProperties } from 'react';\nimport { createBlock } from '@core/utils/createBlock';\nimport { getImg } from '@core/utils/getImg';\nimport { mergeBlock } from '@core/utils/mergeBlock';\n\nexport type ISocial = IBlockData<\n  {\n    align?: string;\n    color?: string;\n    'container-background-color'?: string;\n    'border-radius'?: string;\n    'icon-height'?: string;\n    'icon-size'?: string;\n    mode?: 'vertical' | 'horizontal';\n    'icon-padding': string;\n    'text-padding': string;\n    'text-decoration'?: string;\n    padding?: string;\n    'inner-padding'?: string;\n    'font-family'?: string;\n    'font-size'?: string;\n    'font-style'?: string;\n    'font-weight'?: CSSProperties['fontWeight'];\n    'line-height'?: string | number;\n  },\n  {\n    elements: Array<{\n      content: string;\n      src: string;\n      align?: string;\n      alt?: string;\n      'background-color'?: string;\n      'border-radius'?: string;\n      color?: string;\n      'font-family'?: string;\n      'font-size'?: string;\n      'font-style'?: string;\n      'font-weight'?: string;\n      href?: string;\n      'icon-height'?: string;\n      'icon-size'?: string;\n      'line-height'?: string;\n      name?: string;\n      padding?: string;\n      'icon-padding'?: string;\n      'text-padding'?: string;\n      target?: string;\n      title?: string;\n      'text-decoration'?: string;\n      'vertical-align'?: string;\n    }>;\n  }\n>;\n\nexport const Social: IBlock<ISocial> = createBlock({\n  name: 'Rede Social',\n  type: BasicType.SOCIAL,\n  create: (payload) => {\n    const defaultData: ISocial = {\n      type: BasicType.SOCIAL,\n      data: {\n        value: {\n          elements: [\n            {\n              href: '#',\n              target: '_blank',\n              src: getImg('IMAGE_02'),\n              content: 'Facebook',\n            },\n            {\n              href: '#',\n              target: '_blank',\n              src: getImg('IMAGE_03'),\n              content: 'Google',\n            },\n            {\n              href: '',\n              target: '_blank',\n              src: getImg('IMAGE_04'),\n              content: 'Twitter',\n            },\n          ],\n        },\n      },\n      attributes: {\n        align: 'center',\n        color: '#333333',\n        mode: 'horizontal',\n        'font-size': '13px',\n        'font-weight': 'normal',\n        'border-radius': '3px',\n        padding: '10px 25px 10px 25px',\n        'inner-padding': '4px 4px 4px 4px',\n        'line-height': '22px',\n        'text-padding': '4px 4px 4px 0px',\n        'icon-padding': '0px',\n        'icon-size': '20px',\n      },\n      children: [],\n    };\n    return mergeBlock(defaultData, payload);\n  },\n  validParentType: [BasicType.COLUMN],\n});\n","import { IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { createBlock } from '@core/utils/createBlock';\nimport { merge } from 'lodash';\n\nexport type IRaw = IBlockData<{}>;\n\nexport const Raw = createBlock<IRaw>({\n  name: 'Raw',\n  type: BasicType.RAW,\n  create: (payload) => {\n    const defaultData: IRaw = {\n      type: BasicType.RAW,\n      data: {\n        value: {\n          content: '<% if (user) { %>',\n        },\n      },\n      attributes: {},\n      children: [],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [\n    BasicType.PAGE,\n    BasicType.WRAPPER,\n    BasicType.SECTION,\n    BasicType.GROUP,\n    BasicType.COLUMN,\n    BasicType.HERO,\n  ],\n});\n","import { IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { createBlock } from '@core/utils/createBlock';\nimport { merge } from 'lodash';\n\nexport type ITemplate = IBlockData<\n  {},\n  {\n    idx?: string | null;\n  }\n>;\n\nexport const Template = createBlock<ITemplate>({\n  name: 'Modelo',\n  type: BasicType.TEMPLATE,\n  create: (payload) => {\n    const defaultData: ITemplate = {\n      type: BasicType.TEMPLATE,\n      data: {\n        value: {\n          idx: '',\n        },\n      },\n      attributes: {},\n      children: [],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [],\n});\n","import { IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { createBlock } from '@core/utils/createBlock';\nimport { merge } from 'lodash';\nexport type IAccordionElement = IBlockData<\n  {\n    'icon-width': string;\n    'icon-height': string;\n    'container-background-color'?: string;\n    border?: string;\n    padding: string;\n    'inner-padding'?: string;\n    'font-family'?: string;\n    'icon-align'?: 'middle' | 'top' | 'bottom';\n    'icon-position': 'left' | 'right';\n    'icon-unwrapped-alt'?: string;\n    'icon-unwrapped-url'?: string;\n    'icon-wrapped-alt'?: string;\n    'icon-wrapped-url'?: string;\n  },\n  {}\n>;\n\nexport const AccordionElement = createBlock<IAccordionElement>({\n  name: 'Item acordeão',\n  type: BasicType.ACCORDION_ELEMENT,\n  create: (payload) => {\n    const defaultData: IAccordionElement = {\n      type: BasicType.ACCORDION_ELEMENT,\n      data: {\n        value: {},\n      },\n      attributes: {\n        'icon-align': 'middle',\n        'icon-height': '32px',\n        'icon-width': '32px',\n\n        'icon-position': 'right',\n        padding: '10px 25px 10px 25px',\n      },\n      children: [],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [BasicType.ACCORDION],\n});\n","import { IBlock, IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { createBlock } from '@core/utils/createBlock';\nimport { merge } from 'lodash';\n\nexport type IAccordionTitle = IBlockData<\n  {\n    color?: string;\n    'background-color'?: string;\n    'font-size'?: string;\n    'font-family'?: string;\n    padding?: string;\n  },\n  {}\n>;\n\nexport const AccordionTitle: IBlock = createBlock({\n  name: 'Título acordeão',\n  type: BasicType.ACCORDION_TITLE,\n  create: (payload) => {\n    const defaultData: IAccordionTitle = {\n      type: BasicType.ACCORDION_TITLE,\n      data: {\n        value: {\n          content: 'Por que usar um acordeão?',\n        },\n      },\n      attributes: {\n        'font-size': '13px',\n        padding: '16px 16px 16px 16px',\n      },\n      children: [],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [BasicType.ACCORDION],\n});\n","import { IBlock, IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { createBlock } from '@core/utils/createBlock';\nimport { merge } from 'lodash';\n\nexport type IAccordionText = IBlockData<\n  {\n    color?: string;\n    'background-color'?: string;\n    'font-size'?: string;\n    'font-family'?: string;\n    padding?: string;\n    'font-weight'?: string;\n    'line-height'?: string;\n    'letter-spacing'?: string;\n  },\n  {}\n>;\n\nexport const AccordionText: IBlock = createBlock({\n  name: 'Texto acordeão',\n  type: BasicType.ACCORDION_TEXT,\n  create: (payload) => {\n    const defaultData: IAccordionText = {\n      type: BasicType.ACCORDION_TEXT,\n      data: {\n        value: {\n          content:\n            'Como e-mails com muito conteúdo são na maioria das vezes uma experiência muito ruim no celular, o mj-accordion é útil quando você deseja fornecer muitas informações de maneira concisa',\n        },\n      },\n      attributes: {\n        'font-size': '13px',\n        padding: '16px 16px 16px 16px',\n        'line-height': '1',\n      },\n      children: [],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [BasicType.ACCORDION],\n});\n","import { IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { createBlock } from '@core/utils/createBlock';\nimport { AccordionElement } from '../AccordionElement';\nimport { AccordionTitle } from '../AccordionTitle';\nimport { AccordionText } from '../AccordionText';\nimport { getImg } from '@core/utils/getImg';\nimport { mergeBlock } from '@core/utils/mergeBlock';\n\nexport type IAccordion = IBlockData<\n  {\n    'icon-width': string;\n    'icon-height': string;\n    'container-background-color'?: string;\n    border?: string;\n    padding: string;\n    'inner-padding'?: string;\n    'font-family'?: string;\n    'icon-align'?: 'middle' | 'top' | 'bottom';\n    'icon-position': 'left' | 'right';\n    'icon-unwrapped-alt'?: string;\n    'icon-unwrapped-url'?: string;\n    'icon-wrapped-alt'?: string;\n    'icon-wrapped-url'?: string;\n  },\n  {}\n>;\n\nexport const Accordion = createBlock<IAccordion>({\n  name: 'Acordeão',\n  type: BasicType.ACCORDION,\n  validParentType: [BasicType.COLUMN],\n  create: (payload) => {\n    const defaultData: IAccordion = {\n      type: BasicType.ACCORDION,\n      data: {\n        value: {},\n      },\n      attributes: {\n        'icon-height': '32px',\n        'icon-width': '32px',\n        'icon-align': 'middle',\n        'icon-position': 'right',\n        'icon-unwrapped-url': getImg('IMAGE_09'),\n        'icon-wrapped-url': getImg('IMAGE_10'),\n        padding: '10px 25px 10px 25px',\n        border: '1px solid #d9d9d9',\n      },\n      children: [\n        AccordionElement.create({\n          children: [\n            AccordionTitle.create({\n              data: {\n                value: {\n                  content: 'Por que usar um acordeão?',\n                },\n              },\n            }),\n            AccordionText.create({\n              data: {\n                value: {\n                  content:\n                    'Como e-mails com muito conteúdo são na maioria das vezes uma experiência muito ruim no celular, o mj-accordion é útil quando você deseja fornecer muitas informações de maneira concisa.',\n                },\n              },\n            }),\n          ],\n        }),\n        AccordionElement.create({\n          children: [\n            AccordionTitle.create({\n              data: {\n                value: {\n                  content: 'como funciona',\n                },\n              },\n            }),\n            AccordionText.create({\n              data: {\n                value: {\n                  content:\n                    'O conteúdo é empilhado em guias e os usuários podem expandi-los à vontade. Se estilos responsivos não forem suportados (principalmente em clientes de desktop), as guias serão expandidas e seu conteúdo poderá ser lido imediatamente.',\n                },\n              },\n            }),\n          ],\n        }),\n      ],\n    };\n    return mergeBlock(defaultData, payload);\n  },\n});\n","import { IBlockData } from '@core/typings';\nimport { BasicType } from '@core/constants';\nimport { createBlock } from '@core/utils/createBlock';\nimport { merge } from 'lodash';\n\nexport type ITable = IBlockData<{}, { content: string }>;\n\nexport const Table = createBlock<ITable>({\n  name: 'Tabela',\n  type: BasicType.TABLE,\n  create: (payload) => {\n    const defaultData: ITable = {\n      type: BasicType.TABLE,\n      data: {\n        value: {\n          content: '',\n        },\n      },\n      attributes: {},\n      children: [],\n    };\n    return merge(defaultData, payload);\n  },\n  validParentType: [BasicType.COLUMN],\n});\n","import { IPage, Page } from './Page';\nimport { ISection, Section } from './Section';\nimport { Column, IColumn } from './Column';\nimport { IText, Text } from './Text';\nimport { IImage, Image } from './Image';\nimport { Group, IGroup } from './Group';\nimport { Button, IButton } from './Button';\nimport { Divider, IDivider } from './Divider';\nimport { IWrapper, Wrapper } from './Wrapper';\nimport { ISpacer, Spacer } from './Spacer';\nimport { Carousel, ICarousel } from './Carousel';\nimport { Hero, IHero } from './Hero';\nimport { Navbar, INavbar } from './Navbar';\nimport { ISocial, Social } from './Social';\nimport { Raw, IRaw } from './Raw';\nimport { Template, ITemplate } from './Template';\n\nimport { Accordion, IAccordion } from './Accordion';\nimport { AccordionElement, IAccordionElement } from './AccordionElement';\nimport { AccordionTitle, IAccordionTitle } from './AccordionTitle';\nimport { AccordionText, IAccordionText } from './AccordionText';\nimport { Table, ITable } from './Table';\n\nexport const standardBlocks = {\n  Page,\n  Section,\n  Column,\n  Text,\n  Image,\n  Group,\n  Button,\n  Divider,\n  Wrapper,\n  Spacer,\n  Raw,\n  Carousel,\n  Hero,\n  Navbar,\n  Social,\n\n  // spacial block, render string\n  Template,\n\n  // TODO:\n\n  Accordion,\n  AccordionElement,\n  AccordionTitle,\n  AccordionText,\n\n  Table,\n};\n\nexport type {\n  IPage,\n  ISection,\n  IWrapper,\n  IColumn,\n  IGroup,\n  IText,\n  ITable,\n  IImage,\n  IButton,\n  IDivider,\n  ISpacer,\n  ICarousel,\n  IHero,\n  ISocial,\n  INavbar,\n  IRaw,\n  IAccordion,\n  IAccordionElement,\n  IAccordionTitle,\n  IAccordionText,\n  ITemplate,\n};\n","import { IBlockData } from '@core/typings';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { unescape } from 'lodash';\n\nexport function parseReactBlockToBlockData<T extends IBlockData = IBlockData>(\n  node: React.ReactElement\n) {\n  return JSON.parse(unescape(renderToStaticMarkup(node))) as T;\n}\n","import React, { isValidElement, useMemo } from 'react';\nimport { BlockManager, isValidBlockData } from '@core/utils';\nimport { IBlockData, RecursivePartial } from '@core/typings';\nimport { parseReactBlockToBlockData } from '@core/utils/parseReactBlockToBlockData';\nimport { set } from 'lodash';\n\nexport type MjmlBlockChild = JSX.Element | IBlockData | string | null | false;\n\nexport interface MjmlBlockProps<T extends IBlockData> {\n  type: T['type'];\n  value?: RecursivePartial<T['data']['value']>;\n  attributes?: RecursivePartial<T['attributes']>;\n  children?: MjmlBlockChild | Array<MjmlBlockChild>;\n}\n\nexport default function MjmlBlock<T extends IBlockData>({\n  value,\n  type,\n  attributes,\n  children,\n}: MjmlBlockProps<T>) {\n  const block = BlockManager.getBlockByType(type);\n  if (!block) {\n    throw new Error(`Can no find ${type}`);\n  }\n\n  const mergeValue = useMemo((): undefined | {} => {\n    if (typeof children === 'string') {\n      if (!value) {\n        return {\n          content: children,\n        };\n      } else {\n        set(value, 'content', children);\n        return value;\n      }\n    }\n\n    return value;\n  }, [children, value]);\n\n  const getChild = (child: any) => {\n    if (!child) return null;\n    if (isValidBlockData(child)) return child;\n    if (isValidElement(child)) return parseReactBlockToBlockData(child);\n    return child;\n  };\n\n  const getChildren = () => {\n    if (Array.isArray(children)) {\n      return children.map(getChild).filter(Boolean);\n    }\n\n    if (isValidBlockData(children)) {\n      return [children];\n    }\n\n    if (typeof children === 'string') return [];\n    return React.Children.map(children, getChild);\n  };\n\n  const instance = block.create({\n    data: {\n      value: mergeValue,\n    },\n    attributes,\n    children: getChildren() || [],\n  });\n\n  return <>{JSON.stringify(instance)}</>;\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { IPage } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type PageProps = RecursivePartial<IPage['data']> &\n  RecursivePartial<IPage['attributes']> & {\n    children?: MjmlBlockProps<IPage>['children'];\n  };\n\nexport function Page(props: PageProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.PAGE}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { ISection } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type SectionProps = RecursivePartial<ISection['data']> &\n  RecursivePartial<ISection['attributes']> & {\n    children?: MjmlBlockProps<ISection>['children'];\n  };\n\nexport function Section(props: SectionProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.SECTION}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { IColumn } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type ColumnProps = RecursivePartial<IColumn['data']> &\n  RecursivePartial<IColumn['attributes']> & {\n    children?: MjmlBlockProps<IColumn>['children'];\n  };\n\nexport function Column(props: ColumnProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.COLUMN}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { IText } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type TextProps = RecursivePartial<IText['data']> &\n  RecursivePartial<IText['attributes']> & {\n    children?: MjmlBlockProps<IText>['children'];\n  };\n\nexport function Text(props: TextProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.TEXT}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { IImage } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type ImageProps = RecursivePartial<IImage['data']> &\n  RecursivePartial<IImage['attributes']> & {\n    children?: MjmlBlockProps<IImage>['children'];\n  };\n\nexport function Image(props: ImageProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.IMAGE}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { IGroup } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type GroupProps = RecursivePartial<IGroup['data']> &\n  RecursivePartial<IGroup['attributes']> & {\n    children?: MjmlBlockProps<IGroup>['children'];\n  };\n\nexport function Group(props: GroupProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.GROUP}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { IButton } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type ButtonProps = RecursivePartial<IButton['data']> &\n  RecursivePartial<IButton['attributes']> & {\n    children?: MjmlBlockProps<IButton>['children'];\n  };\n\nexport function Button(props: ButtonProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.BUTTON}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { IDivider } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type DividerProps = RecursivePartial<IDivider['data']> &\n  RecursivePartial<IDivider['attributes']> & {\n    children?: MjmlBlockProps<IDivider>['children'];\n  };\n\nexport function Divider(props: DividerProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.DIVIDER}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { IWrapper } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type WrapperProps = RecursivePartial<IWrapper['data']> &\n  RecursivePartial<IWrapper['attributes']> & {\n    children?: MjmlBlockProps<IWrapper>['children'];\n  };\n\nexport function Wrapper(props: WrapperProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.WRAPPER}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { ISpacer } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type SpacerProps = RecursivePartial<ISpacer['data']> &\n  RecursivePartial<ISpacer['attributes']> & {\n    children?: MjmlBlockProps<ISpacer>['children'];\n  };\n\nexport function Spacer(props: SpacerProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.SPACER}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { IRaw } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type RawProps = RecursivePartial<IRaw['data']> &\n  RecursivePartial<IRaw['attributes']> & {\n    children?: MjmlBlockProps<IRaw>['children'];\n  };\n\nexport function Raw(props: RawProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.RAW}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { IAccordion } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type AccordionProps = RecursivePartial<IAccordion['data']> &\n  RecursivePartial<IAccordion['attributes']> & {\n    children?: MjmlBlockProps<IAccordion>['children'];\n  };\n\nexport function Accordion(props: AccordionProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.ACCORDION}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { IAccordionElement } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type AccordionElementProps = RecursivePartial<IAccordionElement['data']> &\n  RecursivePartial<IAccordionElement['attributes']> & {\n    children?: MjmlBlockProps<IAccordionElement>['children'];\n  };\n\nexport function AccordionElement(props: AccordionElementProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.ACCORDION_ELEMENT}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { IAccordionTitle } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type AccordionTitleProps = RecursivePartial<IAccordionTitle['data']> &\n  RecursivePartial<IAccordionTitle['attributes']> & {\n    children?: MjmlBlockProps<IAccordionTitle>['children'];\n  };\n\nexport function AccordionTitle(props: AccordionTitleProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.ACCORDION_TITLE}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { IAccordionText } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type AccordionTextProps = RecursivePartial<IAccordionText['data']> &\n  RecursivePartial<IAccordionText['attributes']> & {\n    children?: MjmlBlockProps<IAccordionText>['children'];\n  };\n\nexport function AccordionText(props: AccordionTextProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.ACCORDION_TEXT}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { ICarousel } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type CarouselProps = RecursivePartial<ICarousel['data']> &\n  RecursivePartial<ICarousel['attributes']> & {\n    children?: MjmlBlockProps<ICarousel>['children'];\n  };\n\nexport function Carousel(props: CarouselProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.CAROUSEL}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { IHero } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type HeroProps = RecursivePartial<IHero['data']> &\n  RecursivePartial<IHero['attributes']> & {\n    children?: MjmlBlockProps<IHero>['children'];\n  };\n\nexport function Hero(props: HeroProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.HERO}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { INavbar } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type NavbarProps = RecursivePartial<INavbar['data']> &\n  RecursivePartial<INavbar['attributes']> & {\n    children?: MjmlBlockProps<INavbar>['children'];\n  };\n\nexport function Navbar(props: NavbarProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.NAVBAR}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { ISocial } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type SocialProps = RecursivePartial<ISocial['data']> &\n  RecursivePartial<ISocial['attributes']> & {\n    children?: MjmlBlockProps<ISocial>['children'];\n  };\n\nexport function Social(props: SocialProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.SOCIAL}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","\nimport { omit } from 'lodash';\nimport { BasicType } from '@core/constants';\nimport { RecursivePartial } from '@core/typings';\nimport React from 'react';\nimport { ITable } from '@core/blocks';\nimport MjmlBlock, { MjmlBlockProps } from '@core/components/MjmlBlock';\n\nexport type TableProps = RecursivePartial<ITable['data']> &\n  RecursivePartial<ITable['attributes']> & {\n    children?: MjmlBlockProps<ITable>['children'];\n  };\n\nexport function Table(props: TableProps) {\n  return (\n    <MjmlBlock\n      attributes={omit(props, ['data', 'children', 'value'])}\n      value={props.value}\n      type={BasicType.TABLE}\n    >\n      {props.children}\n    </MjmlBlock>\n  );\n}\n","import { flatMap, isArray, omit } from 'lodash';\r\nimport { BasicType } from '@core/constants';\r\nimport { IBlockData, RecursivePartial } from '@core/typings';\r\nimport React from 'react';\r\nimport { ITemplate } from '@core/blocks';\r\nimport MjmlBlock from '@core/components/MjmlBlock';\r\n\r\nexport type TemplateProps = RecursivePartial<ITemplate['data']> &\r\n  RecursivePartial<ITemplate['attributes']> & {\r\n    children:\r\n    | string\r\n    | React.ReactElement\r\n    | React.ReactElement[]\r\n    | IBlockData\r\n    | IBlockData[];\r\n    idx?: string | null;\r\n  };\r\n\r\nexport function Template(props: TemplateProps) {\r\n  let formatChildren = props.children;\r\n\r\n  if (Array.isArray(formatChildren)) {\r\n    formatChildren = flatMap(formatChildren);\r\n  }\r\n\r\n  return (\r\n    <MjmlBlock\r\n      attributes={omit(props, ['data', 'children', 'value'])}\r\n      type={BasicType.TEMPLATE}\r\n      value={{ idx: props.idx }}\r\n    >\r\n      {formatChildren}\r\n    </MjmlBlock>\r\n  );\r\n}\r\n","import { IPage } from '@core/blocks';\r\nimport { IBlock, IBlockData } from '@core/typings';\r\nimport { ReactElement } from 'react';\r\n\r\ninterface CreateBlockOption<T extends IBlockData>\r\n  extends Omit<IBlock<T>, 'transform'> {}\r\n\r\nexport function createCustomBlock<T extends IBlockData>(\r\n  block: CreateBlockOption<T> & {\r\n    render: (\r\n      data: T,\r\n      idx: string | null,\r\n      mode: 'testing' | 'production',\r\n      context?: IPage,\r\n      dataSource?: { [key: string]: any }\r\n    ) => IBlockData | ReactElement | null;\r\n  }\r\n): IBlock<T> {\r\n  return {\r\n    ...block,\r\n  };\r\n}\r\n","import { Template } from '@core/components';\nimport { BasicType } from '@core/constants';\nimport { IBlock, IBlockData } from '@core/typings';\nimport { createCustomBlock } from '@core/utils/createCustomBlock';\nimport { TemplateEngineManager } from '@core/utils';\nimport { merge } from 'lodash';\nimport React from 'react';\nimport { IPage, standardBlocks } from '../standard';\n\nexport function generateAdvancedBlock<T extends AdvancedBlock>(option: {\n  type: string;\n  baseType: BasicType;\n  getContent: (params: {\n    index: number;\n    data: T;\n    idx: string | null;\n    mode: 'testing' | 'production';\n    context?: IPage;\n    dataSource?: { [key: string]: any; };\n  }) => ReturnType<NonNullable<IBlock['render']>>;\n  validParentType: string[];\n}) {\n  const baseBlock = Object.values(standardBlocks).find(\n    (b) => b.type === (option.baseType as any as keyof typeof standardBlocks)\n  );\n  if (!baseBlock) {\n    throw new Error(`Can not find ${option.baseType}`);\n  }\n\n  return createCustomBlock<T>({\n    name: baseBlock.name,\n    type: option.type,\n    validParentType: option.validParentType,\n    create: (payload) => {\n      const defaultData = {\n        ...baseBlock.create(),\n        type: option.type,\n      } as any;\n      return merge(defaultData, payload);\n    },\n    render: (data, idx, mode, context, dataSource) => {\n      const { iteration, condition } = data.data.value;\n\n      const getBaseContent = (bIdx: string | null, index: number) =>\n        option.getContent({\n          index,\n          data,\n          idx: bIdx,\n          mode,\n          context,\n          dataSource,\n        }) as any;\n\n      let children = getBaseContent(idx, 0);\n\n      if (mode === 'testing') {\n        return (\n          <Template>\n            {children}\n            <Template>\n              {new Array((iteration?.mockQuantity || 1) - 1)\n                .fill(true)\n                .map((_, index) => (\n                  <Template key={index}>\n                    <Template>{getBaseContent(idx, index + 1)}</Template>\n                  </Template>\n                ))}\n            </Template>\n          </Template>\n        );\n      }\n\n      if (condition && condition.enabled) {\n        children = TemplateEngineManager.generateTagTemplate('condition')(\n          condition,\n          children\n        );\n      }\n\n      if (iteration && iteration.enabled) {\n        children = TemplateEngineManager.generateTagTemplate('iteration')(\n          iteration,\n          <Template>{children}</Template>\n        );\n      }\n\n      return children;\n    },\n  });\n}\n\n// {% for product in collection.products %}\n//   {{ product.title }}\n// {% endfor %}\n\nexport interface AdvancedBlock extends IBlockData {\n  data: {\n    value: {\n      condition?: ICondition;\n      iteration?: {\n        enabled: boolean;\n        dataSource: string; // -> collection.products\n        itemName: string; // -> product\n        limit: number;\n        mockQuantity: number;\n      };\n    };\n  };\n}\n\nexport interface ICondition {\n  groups: Array<IConditionGroup>;\n  symbol: OperatorSymbol;\n  enabled: boolean;\n}\n\nexport interface IConditionGroup {\n  symbol: OperatorSymbol;\n  groups: Array<IConditionGroupItem>;\n}\n\nexport interface IConditionGroupItem {\n  left: string;\n  operator: Operator;\n  right: string | number;\n}\n\nexport enum Operator {\n  TRUTHY = 'truthy',\n  FALSY = 'falsy',\n  EQUAL = '==',\n  NOT_EQUAL = '!=',\n  GREATER = '>',\n  GREATER_OR_EQUAL = '>=',\n  LESS = '<',\n  LESS_OR_EQUAL = '<=',\n}\n\nexport enum OperatorSymbol {\n  AND = 'and',\n  OR = 'or',\n}\n","\nexport function classnames(...rest: any[]) {\n  return rest.filter(item => typeof item === 'string').join(' ');\n}","import { BlockManager } from '@core/utils';\n\n// 桥接： 例如 drag text to wrapper , 可以通过 text=> column => section => wrapper, 隔了三代\nexport function ancestorOf(type: string, targetType: string): number {\n  let level = -1;\n  const paths = BlockManager.getAutoCompletePath(type, targetType);\n\n  if (paths) {\n    return paths.length + 1;\n  }\n  return level;\n}\n","import { BlockType } from './../constants';\nimport { IBlock, IBlockData } from '@core/typings';\nimport { get, isString } from 'lodash';\nimport { ancestorOf } from './ancestorOf';\nimport { BlockManager } from './BlockManager';\n\nexport function getPageIdx() {\n  return 'content';\n}\n\nexport function getChildIdx(idx: string, index: number) {\n  return `${idx}.children.[${index}]`;\n}\n\nexport function getNodeIdxClassName(idx: string) {\n  return `node-idx-${idx}`;\n}\n\nexport function getNodeTypeClassName(type: string) {\n  return `node-type-${type}`;\n}\n\nexport function getNodeIdxFromClassName(classList: DOMTokenList) {\n  return Array.from(classList)\n    .find((item) => item.includes('node-idx-'))\n    ?.replace('node-idx-', '');\n}\n\nexport function getNodeTypeFromClassName(\n  classList: DOMTokenList | string\n): BlockType | null {\n  return Array.from(isString(classList) ? classList.split(' ') : classList)\n    .find((item) => item.includes('node-type-'))\n    ?.replace('node-type-', '') as BlockType;\n}\n\nexport const getIndexByIdx = (idx: string) => {\n  return Number(/\\.\\[(\\d+)\\]$/.exec(idx)?.[1]) || 0;\n};\n\nexport const getParentIdx = (idx: string) => {\n  if (idx === getPageIdx()) return undefined;\n  return /(.*)\\.children\\.\\[\\d+\\]$/.exec(idx)?.[1];\n};\n\nexport const getValueByIdx = <T extends IBlockData>(\n  values: { content: IBlockData },\n  idx: string\n): T | null => {\n  return get(values, idx);\n};\n\nexport const getParentByIdx = <T extends IBlockData = IBlockData>(\n  values: { content: IBlockData },\n  idx: string\n): T | null => {\n  return get(values, getParentIdx(idx) || '');\n};\n\nexport const getSiblingIdx = (sourceIndex: string, num: number) => {\n  return sourceIndex.replace(/\\[(\\d+)\\]$/, (_, index) => {\n    if (Number(index) + num < 0) return '[0]';\n    return `[${Number(index) + num}]`;\n  });\n};\n\nexport const getParentByType = <T extends IBlockData>(\n  context: { content: IBlockData },\n  idx: string,\n  type: BlockType\n): T | null => {\n  if (!idx) return null;\n  let parentIdx = getParentIdx(idx);\n  while (parentIdx) {\n    const parent = get(context, parentIdx) as T;\n    if (parent && parent.type === type) return parent;\n    parentIdx = getParentIdx(idx);\n  }\n\n  return null;\n};\n\nexport const getSameParent = (\n  values: { content: IBlockData },\n  idx: string,\n  dragType: string\n): {\n  parent: IBlockData;\n  parentIdx: string;\n} | null => {\n  let parentIdx: string | undefined | null = idx;\n  const block = BlockManager.getBlockByType(dragType);\n  if (!block) return null;\n\n  while (parentIdx) {\n    const parent = get(values, parentIdx) as IBlockData;\n\n    if (ancestorOf(block.type, parent.type) > 0) {\n      return {\n        parent,\n        parentIdx,\n      };\n    }\n    parentIdx = getParentIdx(parentIdx);\n  }\n  return null;\n};\n\n// 找到插入的位置，例如 一个 2 column section，第二个 column/image，image占满column, 拖拽 一个column到 image的边缘，我们认为他是要插入一个column，获取这个插入的位置，我们这里是 第二个，所以 是 1\nexport const getParenRelativeByType = <T extends IBlockData>(\n  context: { content: IBlockData },\n  idx: string,\n  type: BlockType\n): { parentIdx: string; insertIndex: number; parent: IBlockData } | null => {\n  let prevIdx = '';\n  let parentIdx: string | undefined = idx;\n  while (parentIdx) {\n    const parent = get(context, parentIdx) as T;\n    if (parent && parent.type === type) {\n      return {\n        insertIndex: prevIdx\n          ? getIndexByIdx(prevIdx)\n          : parent.children.length - 1,\n        parentIdx,\n        parent,\n      };\n    } else {\n      prevIdx = parentIdx;\n      parentIdx = getParentIdx(parentIdx);\n    }\n  }\n  return null;\n};\n\nexport const getValidChildBlocks = (type: BlockType): IBlock[] => {\n  return BlockManager.getBlocks().filter((item) =>\n    item.validParentType.includes(type)\n  );\n};\n","import { getNodeIdxClassName, getNodeTypeClassName } from './block';\nimport { classnames } from './classnames';\n\nexport function getPreviewClassName(idx: string | null, type: string) {\n  return classnames('email-block',\n    idx && getNodeIdxClassName(idx),\n    getNodeTypeClassName(type));\n}","import { Column, Section, Template } from '@core/components';\nimport { BasicType, AdvancedType } from '@core/constants';\nimport { getParentByIdx } from '@core/utils';\nimport { classnames } from '@core/utils/classnames';\nimport { MERGE_TAG_CLASS_NAME } from '@core/constants';\nimport React from 'react';\nimport { generateAdvancedBlock } from './generateAdvancedBlock';\nimport { getPreviewClassName } from '@core/utils/getPreviewClassName';\nimport { IBlockData } from '@core';\n\nexport function generateAdvancedContentBlock<T extends IBlockData>(option: {\n  type: string;\n  baseType: BasicType;\n}) {\n  return generateAdvancedBlock<T>({\n    ...option,\n\n    validParentType: [\n      BasicType.PAGE,\n      BasicType.WRAPPER,\n      BasicType.COLUMN,\n      BasicType.GROUP,\n      BasicType.HERO,\n\n      AdvancedType.WRAPPER,\n      AdvancedType.COLUMN,\n      AdvancedType.GROUP,\n      AdvancedType.HERO\n    ],\n    getContent: (params) => {\n      const { data, idx, mode, context, dataSource, index } = params;\n\n      const previewClassName =\n        mode === 'testing'\n          ? classnames(\n            index === 0 && idx && getPreviewClassName(idx, data.type)\n          )\n          : '';\n\n      const blockData = {\n        ...data,\n        type: option.baseType,\n        attributes: {\n          ...data.attributes,\n          'css-class': classnames(\n            data.attributes['css-class'],\n            previewClassName\n          ),\n        },\n      };\n      const parentBlockData = getParentByIdx({ content: context! }, idx!);\n      if (!parentBlockData) {\n        return <Template>{blockData}</Template>;\n      }\n\n      if (\n        parentBlockData.type === BasicType.PAGE ||\n        parentBlockData.type === BasicType.WRAPPER ||\n        parentBlockData.type === AdvancedType.WRAPPER\n      ) {\n        return (\n          <Section padding='0px'>\n            <Column>{blockData}</Column>\n          </Section>\n        );\n      }\n\n      return blockData;\n    },\n  });\n}\n","import { AdvancedType, BasicType } from '@core/constants';\nimport React from 'react';\nimport { Template } from '@core/components';\nimport MjmlBlock from '@core/components/MjmlBlock';\n\nimport { AdvancedBlock, generateAdvancedBlock } from './generateAdvancedBlock';\nimport { getPreviewClassName } from '@core/utils/getPreviewClassName';\nimport { classnames } from '@core/utils/classnames';\n\nexport function generateAdvancedLayoutBlock<T extends AdvancedBlock>(option: {\n  type: string;\n  baseType: BasicType;\n  validParentType: string[];\n}) {\n  return generateAdvancedBlock<T>({\n    ...option,\n    getContent: (params) => {\n      const { data, idx, mode, context, dataSource, index } = params;\n      const { iteration } = data.data.value;\n\n      const blockData = {\n        ...data,\n        type: option.baseType,\n      };\n\n      // Column 必须设置宽度\n      if (data.type === AdvancedType.COLUMN && iteration?.enabled) {\n        data.attributes.width = data.attributes.width || '100%';\n      }\n\n      const previewClassName =\n        mode === 'testing'\n          ? classnames(index === 0 && getPreviewClassName(idx, data.type))\n          : '';\n\n      return (\n        <MjmlBlock\n          type={blockData.type}\n          attributes={{\n            ...blockData.attributes,\n            'css-class': classnames(\n              data.attributes['css-class'],\n              previewClassName\n            ),\n          }}\n          value={blockData.data.value}\n        >\n          <Template idx={index === 0 ? idx : null}>{data.children}</Template>\n        </MjmlBlock>\n      );\n    },\n  });\n}\n","import {\n  IButton,\n  ICarousel,\n  IDivider,\n  IImage,\n  INavbar,\n  ISpacer,\n  IText,\n  IAccordion,\n  ISocial,\n  IWrapper,\n  ISection,\n  IGroup,\n  IColumn,\n  IHero,\n} from '../../standard';\nimport { AdvancedType, BasicType } from '@core/constants';\nimport { generateAdvancedContentBlock } from '../generateAdvancedContentBlock';\nimport { generateAdvancedLayoutBlock } from '../generateAdvancedLayoutBlock';\n\nexport const AdvancedText = generateAdvancedContentBlock<IText>({\n  type: AdvancedType.TEXT,\n  baseType: BasicType.TEXT,\n});\n\nexport const AdvancedButton = generateAdvancedContentBlock<IButton>({\n  type: AdvancedType.BUTTON,\n  baseType: BasicType.BUTTON,\n});\n\nexport const AdvancedImage = generateAdvancedContentBlock<IImage>({\n  type: AdvancedType.IMAGE,\n  baseType: BasicType.IMAGE,\n});\n\nexport const AdvancedDivider = generateAdvancedContentBlock<IDivider>({\n  type: AdvancedType.DIVIDER,\n  baseType: BasicType.DIVIDER,\n});\n\nexport const AdvancedSpacer = generateAdvancedContentBlock<ISpacer>({\n  type: AdvancedType.SPACER,\n  baseType: BasicType.SPACER,\n});\n\nexport const AdvancedNavbar = generateAdvancedContentBlock<INavbar>({\n  type: AdvancedType.NAVBAR,\n  baseType: BasicType.NAVBAR,\n});\n\nexport const AdvancedAccordion = generateAdvancedContentBlock<IAccordion>({\n  type: AdvancedType.ACCORDION,\n  baseType: BasicType.ACCORDION,\n});\n\nexport const AdvancedCarousel = generateAdvancedContentBlock<ICarousel>({\n  type: AdvancedType.CAROUSEL,\n  baseType: BasicType.CAROUSEL,\n});\n\nexport const AdvancedSocial = generateAdvancedContentBlock<ISocial>({\n  type: AdvancedType.SOCIAL,\n  baseType: BasicType.SOCIAL,\n});\n\n//\n\nexport const AdvancedWrapper = generateAdvancedLayoutBlock<IWrapper>({\n  type: AdvancedType.WRAPPER,\n  baseType: BasicType.WRAPPER,\n  validParentType: [BasicType.PAGE],\n});\n\nexport const AdvancedSection = generateAdvancedLayoutBlock<ISection>({\n  type: AdvancedType.SECTION,\n  baseType: BasicType.SECTION,\n  validParentType: [BasicType.PAGE, BasicType.WRAPPER, AdvancedType.WRAPPER],\n});\n\nexport const AdvancedGroup = generateAdvancedLayoutBlock<IGroup>({\n  type: AdvancedType.GROUP,\n  baseType: BasicType.GROUP,\n  validParentType: [BasicType.SECTION, AdvancedType.SECTION],\n});\n\nexport const AdvancedColumn = generateAdvancedLayoutBlock<IColumn>({\n  type: AdvancedType.COLUMN,\n  baseType: BasicType.COLUMN,\n  validParentType: [\n    BasicType.SECTION,\n    AdvancedType.SECTION,\n    BasicType.GROUP,\n    AdvancedType.GROUP,\n  ],\n});\n\nexport const AdvancedHero = generateAdvancedLayoutBlock<IHero>({\n  type: AdvancedType.HERO,\n  baseType: BasicType.HERO,\n  validParentType: [\n    BasicType.WRAPPER,\n    AdvancedType.WRAPPER,\n    BasicType.PAGE,\n  ],\n});\n","import {\n  AdvancedBlock,\n  ICondition,\n  IConditionGroup,\n  IConditionGroupItem,\n  Operator,\n  OperatorSymbol,\n} from './generateAdvancedBlock';\nimport { AdvancedType } from '@core/constants';\nimport {\n  AdvancedText,\n  AdvancedButton,\n  AdvancedImage,\n  AdvancedDivider,\n  AdvancedSpacer,\n  AdvancedNavbar,\n  AdvancedAccordion,\n  AdvancedCarousel,\n  AdvancedSocial,\n  AdvancedWrapper,\n  AdvancedSection,\n  AdvancedGroup,\n  AdvancedColumn,\n  AdvancedHero\n} from './blocks';\n\nexport const advancedBlocks = {\n  [AdvancedType.TEXT]: AdvancedText,\n  [AdvancedType.BUTTON]: AdvancedButton,\n  [AdvancedType.IMAGE]: AdvancedImage,\n  [AdvancedType.DIVIDER]: AdvancedDivider,\n  [AdvancedType.SPACER]: AdvancedSpacer,\n  [AdvancedType.NAVBAR]: AdvancedNavbar,\n  [AdvancedType.ACCORDION]: AdvancedAccordion,\n  [AdvancedType.CAROUSEL]: AdvancedCarousel,\n  [AdvancedType.SOCIAL]: AdvancedSocial,\n\n  [AdvancedType.WRAPPER]: AdvancedWrapper,\n  [AdvancedType.SECTION]: AdvancedSection,\n  [AdvancedType.GROUP]: AdvancedGroup,\n  [AdvancedType.COLUMN]: AdvancedColumn,\n  [AdvancedType.HERO]: AdvancedHero,\n};\n\nexport { Operator, OperatorSymbol };\nexport type { AdvancedBlock, ICondition, IConditionGroup, IConditionGroupItem };\n","import { IBlock, IBlockData } from '@core/typings';\nimport { standardBlocks, advancedBlocks } from '@core/blocks';\n\nexport class BlockManager {\n  private static blocksMap = { ...standardBlocks, ...advancedBlocks };\n  private static autoCompletePath: { [key: string]: Array<string[]>; } = {};\n\n  private static setAutoCompletePath() {\n    const paths: { [key: string]: Array<string[]>; } = {};\n\n    const renderFullPath = (\n      type: string,\n      pathObj: Array<string[]>,\n      prevPaths: string[]\n    ): any => {\n      const block = this.getBlockByType(type);\n      if (!block) {\n        throw new Error(`Can you register ${type} block`);\n      }\n      const currentPaths = [...prevPaths, type];\n      if (block.validParentType.length === 0) {\n        pathObj.push(currentPaths);\n      }\n      return block.validParentType.map((item) => {\n        return renderFullPath(item, pathObj, currentPaths);\n      });\n    };\n\n    Object.values(this.blocksMap).forEach((item) => {\n      paths[item.type] = [];\n      renderFullPath(item.type, paths[item.type], []);\n    });\n    return paths;\n  }\n\n  public static getBlocks(): Array<IBlock> {\n    return Object.values(this.blocksMap);\n  }\n\n  public static registerBlocks(blocksMap: { [key: string]: IBlock; }) {\n    this.blocksMap = {\n      ...this.blocksMap,\n      ...blocksMap,\n    };\n    this.autoCompletePath = this.setAutoCompletePath();\n  }\n\n  public static getBlockByType<T extends IBlockData>(\n    type: string\n  ): IBlock<T> | undefined {\n    const map = this.getBlocksByType([type]);\n    return map[0] as any;\n  }\n\n  public static getBlocksByType(\n    types: Array<string>\n  ): Array<IBlock | undefined> {\n    return types.map((item) => {\n      const block = Object.values(this.blocksMap).find((child) => {\n        return child.type === item;\n      });\n\n      return block;\n    });\n  }\n\n  public static getAutoCompleteFullPath() {\n    if (Object.keys(this.autoCompletePath).length === 0) {\n      this.autoCompletePath = this.setAutoCompletePath();\n    }\n    return this.autoCompletePath;\n  }\n\n  static getAutoCompletePath(\n    type: string,\n    targetType: string\n  ): Array<string> | null {\n    const block = this.getBlockByType(type);\n    if (!block) {\n      throw new Error(`Can you register ${type} block`);\n    }\n    if (block.validParentType.includes(targetType)) {\n      return [];\n    }\n    const paths = this.getAutoCompleteFullPath()[type as any].find((item) =>\n      item.filter((_, index) => index !== 0).includes(targetType)\n    );\n\n    if (!paths) return null;\n    const findIndex = paths.findIndex((item) => item === targetType);\n    return paths.slice(1, findIndex);\n  }\n}\n","import { BlockManager } from './BlockManager';\r\nimport { IBlockData } from '../typings';\r\n\r\nexport function isValidBlockData<T>(data: any): data is IBlockData {\r\n  try {\r\n    if (\r\n      data.attributes &&\r\n      data.children &&\r\n      data.data &&\r\n      data.type &&\r\n      BlockManager.getBlockByType(data.type)\r\n    ) {\r\n      return true;\r\n    }\r\n  } catch (error) {}\r\n  return false;\r\n}\r\n","import { parseReactBlockToBlockData } from '@core/utils/parseReactBlockToBlockData';\nimport { isValidElement } from 'react';\n\nimport { BasicType, AdvancedType, MERGE_TAG_CLASS_NAME } from '@core/constants';\nimport { IBlockData } from '@core/typings';\nimport { pickBy, identity, isObject, isBoolean, isString } from 'lodash';\nimport {\n  getChildIdx,\n  getNodeIdxClassName,\n  getNodeTypeClassName,\n} from './block';\nimport { classnames } from './classnames';\nimport { BlockManager } from '@core/utils';\nimport { ICarousel, INavbar, ISocial, IPage } from '@core/blocks';\nimport { getPreviewClassName } from './getPreviewClassName';\nimport { getImg } from './getImg';\n\nexport interface JsonToMjmlOptionProduction {\n  idx?: string | null; // current idx, default page idx\n  data: IBlockData;\n  context?: IBlockData;\n  mode: 'production';\n  keepClassName?: boolean;\n  dataSource?: { [key: string]: any; };\n}\n\nexport interface JsonToMjmlOptionDev {\n  data: IBlockData;\n  idx: string | null; // current idx\n  context?: IBlockData;\n  dataSource?: { [key: string]: any; };\n  mode: 'testing';\n}\n\nexport type JsonToMjmlOption =\n  | JsonToMjmlOptionDev\n  | JsonToMjmlOptionProduction;\n\nconst isProductionMode = (option: JsonToMjmlOption): option is JsonToMjmlOptionProduction => option.mode === 'production';\n\nexport function JsonToMjml(options: JsonToMjmlOption): string {\n  const {\n    data,\n    idx = 'content',\n    context = data,\n    mode = 'production',\n    dataSource = {},\n  } = options;\n  if (\n    (isBoolean(data?.data?.hidden) && data?.data?.hidden) ||\n    data?.data?.hidden === 'true'\n  ) {\n    return '';\n  }\n\n  const att = pickBy(\n    {\n      ...data.attributes,\n    },\n    identity\n  );\n\n  const isTest = mode === 'testing';\n  const keepClassName = isProductionMode(options) ? options.keepClassName : false;\n  const placeholder = isTest ? renderPlaceholder(data.type) : '';\n\n  if (isTest && idx) {\n    att['css-class'] = classnames(\n      att['css-class'],\n      'email-block',\n      getNodeIdxClassName(idx),\n      getNodeTypeClassName(data.type)\n    );\n  }\n\n  if (keepClassName) {\n    att['css-class'] = classnames(att['css-class'], getNodeTypeClassName(data.type));\n  }\n\n  if (isTest && data.type === BasicType.TEXT) {\n    att['css-class'] = classnames(att['css-class'], MERGE_TAG_CLASS_NAME);\n  }\n\n  if (data.type === BasicType.PAGE) {\n    att['css-class'] = classnames(att['css-class'], 'mjml-body');\n  }\n\n  const attributeStr = Object.keys(att)\n    .filter((key) => att[key] !== '') // filter att=\"\"\n    .map((key) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      const val = isString(att[key]) ? att[key].replace(/\"/gm, '') : att[key];\n      return `${key}=\"${val}\"`;\n    })\n    .join(' ');\n\n  const block = BlockManager.getBlockByType(data.type);\n\n  if (!block) {\n    throw new Error(\n      `Não consigo encontrar ${data.type} bloco!!! Você registrou este bloco ?`\n    );\n  }\n\n  if (block.render) {\n    const transformBlockData = block.render(\n      data,\n      idx,\n      mode,\n      context,\n      dataSource\n    );\n\n    if (!transformBlockData) return '';\n\n    const transformData = isValidElement(transformBlockData)\n      ? parseReactBlockToBlockData(transformBlockData)\n      : transformBlockData;\n\n    att['css-class'] = [\n      ...new Set(\n        classnames(\n          isTest && getPreviewClassName(idx, data.type),\n          transformData?.['attributes']?.['css-class']\n        ).split(' ')\n      ),\n    ].join(' ');\n    return JsonToMjml({\n      data: {\n        ...transformData,\n        attributes: {\n          ...transformData.attributes,\n          'css-class': att['css-class'],\n        },\n      },\n      idx: null,\n      context: context,\n      dataSource,\n      mode,\n      keepClassName\n    });\n  }\n\n  const children = data.children\n    .map((child, index) => {\n      let childIdx = idx ? getChildIdx(idx, index) : null;\n      if (data.type === BasicType.TEMPLATE) {\n        childIdx = getChildIdx(data.data.value.idx, index);\n        if (!data.data.value.idx) {\n          childIdx = null;\n        }\n      }\n      return JsonToMjml({\n        data: child,\n        idx: childIdx,\n        dataSource,\n        context,\n        mode,\n        keepClassName\n      });\n    })\n    .join('\\n');\n\n  switch (data.type) {\n    case BasicType.TEMPLATE:\n      return children || data.data.value.content;\n    case BasicType.PAGE:\n      const metaData = generaMjmlMetaData(data);\n      const value: IPage['data']['value'] = data.data.value;\n\n      const breakpoint = value.breakpoint\n        ? `<mj-breakpoint width=\"${data.data.value.breakpoint}\" />`\n        : '';\n\n      const nonResponsive = !value.responsive\n        ? `<mj-raw>\n            <meta name=\"viewport\" />\n           </mj-raw>\n           <mj-style inline=\"inline\">.mjml-body { width: ${data.attributes.width || '600px'\n        }; margin: 0px auto; }</mj-style>`\n        : '';\n      const styles =\n        value.headStyles\n          ?.map(\n            (style) =>\n              `<mj-style ${style.inline ? 'inline=\"inline\"' : ''}>${style.content\n              }</mj-style>`\n          )\n          .join('\\n') || '';\n\n      const userStyle = value['user-style']\n        ? `<mj-style ${value['user-style'].inline ? 'inline=\"inline\"' : ''}>${value['user-style'].content\n        }</mj-style>`\n        : '';\n\n      const extraHeadContent = value.extraHeadContent ? `<mj-raw>${value.extraHeadContent}</mj-raw>` : '';\n\n      return `\n        <mjml>\n          <mj-head>\n              ${metaData}\n              ${nonResponsive}\n              ${styles}\n              ${userStyle}\n              ${breakpoint}\n              ${extraHeadContent}\n              ${value.fonts\n          ?.filter(Boolean)\n          .map(\n            (item) =>\n              `<mj-font name=\"${item.name}\" href=\"${item.href}\" />`\n          )}\n            <mj-attributes>\n              ${value.headAttributes}\n              ${value['font-family']\n          ? `<mj-all font-family=\"${value['font-family'].replace(/\"/gm, '')}\" />`\n          : ''\n        }\n              ${value['font-size']\n          ? `<mj-text font-size=\"${value['font-size']}\" />`\n          : ''\n        }\n              ${value['text-color']\n          ? `<mj-text color=\"${value['text-color']}\" />`\n          : ''\n        }\n        ${value['line-height']\n          ? `<mj-text line-height=\"${value['line-height']}\" />`\n          : ''\n        }\n        ${value['font-weight']\n          ? `<mj-text font-weight=\"${value['font-weight']}\" />`\n          : ''\n        }\n              ${value['content-background-color']\n          ? `<mj-wrapper background-color=\"${value['content-background-color']}\" />\n                     <mj-section background-color=\"${value['content-background-color']}\" />\n                    `\n          : ''\n        }\n\n            </mj-attributes>\n          </mj-head>\n          <mj-body ${attributeStr}>\n            ${children}\n          </mj-body>\n        </mjml>\n        `;\n    case BasicType.COLUMN:\n      return `\n              <mj-column ${attributeStr}>\n               ${children || placeholder}\n              </mj-column>\n            `;\n    case BasicType.SECTION:\n      return `\n              <mj-section ${attributeStr}>\n               ${children || `<mj-column>${placeholder}</mj-column>`}\n              </mj-section>\n            `;\n    case BasicType.GROUP:\n      return `\n              <mj-group ${attributeStr}>\n               ${children || `<mj-column>${placeholder}</mj-column>`}\n              </mj-group>\n            `;\n    case BasicType.WRAPPER:\n      return `\n              <mj-wrapper ${attributeStr}>\n               ${children ||\n        `<mj-section><mj-column>${placeholder}</mj-column></mj-section>`\n        }\n              </mj-wrapper>\n            `;\n    case BasicType.CAROUSEL:\n      const carouselImages = (data as ICarousel).data.value.images\n        .map((image, index) => {\n          const imageAttributeStr = Object.keys(image)\n            .filter((key) => key !== 'content' && att[key] !== '') // filter att=\"\"\n            .map((key) => `${key}=\"${image[key as keyof typeof image]}\"`)\n            .join(' ');\n          return `\n          <mj-carousel-image ${imageAttributeStr} />\n          `;\n        })\n        .join('\\n');\n\n      return `\n        <mj-carousel ${attributeStr}>\n         ${carouselImages}\n        </mj-carousel>\n      `;\n    case BasicType.NAVBAR:\n      const links = (data as INavbar).data.value.links\n        .map((link, index) => {\n          const linkAttributeStr = Object.keys(link)\n            .filter((key) => key !== 'content' && att[key] !== '') // filter att=\"\"\n            .map((key) => `${key}=\"${link[key as keyof typeof link]}\"`)\n            .join(' ');\n          return `\n          <mj-navbar-link ${linkAttributeStr}>${link.content}</mj-navbar-link>\n          `;\n        })\n        .join('\\n');\n      return `\n              <mj-navbar ${attributeStr}>\n               ${links}\n              </mj-navbar>\n            `;\n    case BasicType.SOCIAL:\n      const elements = (data as ISocial).data.value.elements\n        .map((element, index) => {\n          const elementAttributeStr = Object.keys(element)\n            .filter((key) => key !== 'content' && att[key] !== '') // filter att=\"\"\n            .map((key) => `${key}=\"${element[key as keyof typeof element]}\"`)\n            .join(' ');\n          return `\n          <mj-social-element ${elementAttributeStr}>${element.content}</mj-social-element>\n          `;\n        })\n        .join('\\n');\n      return `\n              <mj-social ${attributeStr}>\n               ${elements}\n              </mj-social>\n            `;\n    case BasicType.RAW:\n      return `\n              <mj-raw ${attributeStr}>\n                ${data.data.value?.content}\n              </mj-raw>\n            `;\n    case BasicType.IMAGE:\n      if (mode === 'testing') {\n        const url = data.attributes.src;\n        if (\n          url === '' ||\n          /{{([\\s\\S]+?)}}/g.test(url) ||\n          /\\*\\|([^\\|\\*]+)\\|\\*/g.test(url)\n        ) {\n          return `<mj-image src=\"${getImg(\n            'IMAGE_59'\n          )}\"  ${attributeStr}></mj-image>`;\n        }\n      }\n      return `<mj-image ${attributeStr}></mj-image>`;\n    default:\n      return `\n          <mj-${data.type} ${attributeStr}>\n           ${children || data.data.value?.content || ''}\n          </mj-${data.type}>\n        `;\n  }\n}\n\nexport function renderPlaceholder(type: string) {\n  let text = '';\n  if (type === BasicType.PAGE) {\n    text = 'Arraste um bloco envólucro aqui';\n  } else if (type === BasicType.WRAPPER || type === AdvancedType.WRAPPER) {\n    text = 'Arraste um bloco sessão aqui';\n  } else if (\n    type === BasicType.SECTION ||\n    type === BasicType.GROUP ||\n    type === AdvancedType.SECTION ||\n    type === AdvancedType.GROUP\n  ) {\n    text = 'Arraste um bloco sessão aqui';\n  } else if (type === BasicType.COLUMN || type === AdvancedType.COLUMN) {\n    text = 'Arraste um bloco conteúdo aqui';\n  }\n\n  return `\n   <mj-text color=\"#666\">\n    <div style=\"text-align: center\">\n      <div>\n        <svg width=\"300\" fill=\"currentColor\" style=\"max-width: 100%;\" viewBox=\"-20 -5 80 60\">\n          <g>\n            <path d=\"M23.713 23.475h5.907c.21 0 .38.17.38.38v.073c0 .21-.17.38-.38.38h-5.907a.38.38 0 0 1-.38-.38v-.073c0-.21.17-.38.38-.38zm.037-2.917h9.167a.417.417 0 0 1 0 .834H23.75a.417.417 0 0 1 0-.834zm0-2.5h9.167a.417.417 0 0 1 0 .834H23.75a.417.417 0 0 1 0-.834zm-.037-3.333h5.907c.21 0 .38.17.38.38v.073c0 .21-.17.38-.38.38h-5.907a.38.38 0 0 1-.38-.38v-.073c0-.21.17-.38.38-.38zm.037-2.917h9.167a.417.417 0 0 1 0 .834H23.75a.417.417 0 0 1 0-.834zm0-2.916h9.167a.417.417 0 0 1 0 .833H23.75a.417.417 0 0 1 0-.833zm-3.592 8.75a.675.675 0 0 1 .675.691v6.142c0 .374-.3.679-.675.683h-6.15a.683.683 0 0 1-.675-.683v-6.142a.675.675 0 0 1 .675-.691h6.15zM20 24.308v-5.833h-5.833v5.833H20zm.158-15.833a.675.675 0 0 1 .675.692v6.141c0 .374-.3.68-.675.684h-6.15a.683.683 0 0 1-.675-.684V9.167a.675.675 0 0 1 .675-.692h6.15zM20 15.142V9.308h-5.833v5.834H20zM37.167 0A2.809 2.809 0 0 1 40 2.833V30.5a2.809 2.809 0 0 1-2.833 2.833h-3.834v3H32.5v-3h-23A2.808 2.808 0 0 1 6.667 30.5v-23H3.583v-.833h3.084V2.833A2.808 2.808 0 0 1 9.5 0h27.667zm2 30.5V2.833a2.025 2.025 0 0 0-2-2H9.5a2.025 2.025 0 0 0-2 2V30.5a2.025 2.025 0 0 0 2 2h27.667a2.025 2.025 0 0 0 2-2zM0 27.75h.833V31H0v-3.25zm0-13h.833V18H0v-3.25zm0 22.833V34.25h.833v3.25L0 37.583zM0 21.25h.833v3.25H0v-3.25zM2.583 40l.084-.833h3.166V40h-3.25zm27.917-.833c.376.006.748-.08 1.083-.25l.417.666a2.875 2.875 0 0 1-1.5.417h-1.833v-.833H30.5zm-8.333 0h3.25V40h-3.25v-.833zm-6.584 0h3.25V40h-3.25v-.833zm-6.5 0h3.25V40h-3.25v-.833zM0 9.5c.01-.5.154-.99.417-1.417l.666.417c-.17.305-.256.65-.25 1v2H0v-2z\"></path>\n          </g>\n          <text x=\"-16\" y=\"50\" font-size=\"4px\">${text}</text>\n        </svg>\n      </div>\n    </div>\n   </mj-text>\n  `;\n}\n\nexport function generaMjmlMetaData(data: IPage) {\n  const values = data.data.value;\n  const attributes = [\n    'content-background-color',\n    'text-color',\n    'font-family',\n    'font-size',\n    'line-height',\n    'font-weight',\n    'user-style',\n    'responsive',\n  ];\n\n  return `\n    <mj-html-attributes>\n      ${attributes\n      .filter((key) => values[key as keyof typeof values] !== undefined)\n      .map((key) => {\n        const attKey = key as keyof typeof values;\n        const isMultipleAttributes = isObject(values[attKey]);\n        const value = isMultipleAttributes\n          ? Object.keys(values[attKey]!)\n            .map(\n              (childKey) => {\n                const childValue = (values[attKey] as any)[childKey];\n\n                return `${childKey}=\"${isString(childValue) ? childValue.replace(/\"/gm, '') : childValue}\"`;\n              }\n\n            )\n            .join(' ')\n          : `${key}=\"${values[attKey]}\"`;\n        return `<mj-html-attribute class=\"anteros-email\" multiple-attributes=\"${isMultipleAttributes}\" attribute-name=\"${key}\" ${value}></mj-html-attribute>`;\n      })\n      .join('\\n')}\n\n    </mj-html-attributes>\n  `;\n}\n","import mjml from 'mjml-browser';\nimport { IBlockData } from '@core/typings';\nimport { BlockType, BasicType } from './../constants';\nimport { MjmlToJson } from './MjmlToJson';\nimport { BlockManager } from '@core/utils';\n\nconst domParser = new DOMParser();\nexport function parseXMLtoBlock(text: string) {\n  const dom = domParser.parseFromString(text, 'text/xml');\n  const root = dom.firstChild as Element;\n  if (!(dom.firstChild instanceof Element)) {\n    throw new Error('Invalid content');\n  }\n  if (root.tagName === 'mjml') {\n    const { json } = mjml(text, {\n      validationLevel: 'soft',\n    });\n    const parseValue = MjmlToJson(json);\n    return parseValue;\n  }\n\n  const transform = (node: Element): IBlockData => {\n    if (node.tagName === 'parsererror') {\n      throw new Error('Invalid content');\n    }\n    const attributes: IBlockData['attributes'] = {};\n    node.getAttributeNames().forEach((name) => {\n      attributes[name] = node.getAttribute(name);\n    });\n    const type = node.tagName.replace('mj-', '');\n\n    if (!BlockManager.getBlockByType(type)) {\n      if (!node.parentElement || node.parentElement.tagName !== 'mj-text')\n        throw new Error('Invalid content');\n    }\n\n    const block: IBlockData = {\n      type: type as BlockType,\n      attributes: attributes,\n      data: {\n        value: {\n          content: node.textContent?.trim(),\n        },\n      },\n      children: [...node.children]\n        .filter((item) => item instanceof Element)\n        .map(transform as any),\n    };\n\n    switch (type) {\n      case BasicType.TEXT:\n        block.data.value.content = node.innerHTML;\n        block.children = [];\n    }\n\n    return block;\n  };\n\n  return transform(root);\n}\n","import { BlockManager } from '@core/utils';\nimport { IPage } from '@core/blocks';\nimport { BasicType } from '@core/constants';\nimport { IBlockData } from '@core/typings';\nimport { identity, isString, pickBy } from 'lodash';\nimport { parseXMLtoBlock } from './parseXMLtoBlock';\n\nexport function MjmlToJson(data: MjmlBlockItem | string): IPage {\n  if (isString(data)) return parseXMLtoBlock(data);\n\n  const transform = (item: IChildrenItem): IBlockData => {\n    const attributes = item.attributes as any;\n\n    switch (item.tagName) {\n      case 'mjml':\n        const body = item.children?.find((item) => item.tagName === 'mj-body')!;\n        const head = item.children?.find((item) => item.tagName === 'mj-head');\n        const metaData = getMetaDataFromMjml(head);\n\n        const fonts =\n          head?.children\n            ?.filter((child) => child.tagName === 'mj-font')\n            .map((child) => ({\n              name: child.attributes.name,\n              href: child.attributes.href,\n            })) || [];\n\n        const mjAttributes =\n          head?.children?.find((item) => item.tagName === 'mj-attributes')\n            ?.children || [];\n\n        const headStyles = head?.children\n          ?.filter((item) => item.tagName === 'mj-style')\n          .map((item) => ({ content: item.content, inline: item.inline }));\n\n        const headAttributes = [\n          ...new Set(\n            mjAttributes\n              .filter((item) => {\n                const isFontFamily =\n                  item.tagName === 'mj-all' &&\n                  item.attributes['font-family'] === metaData['font-family'];\n                const isTextColor =\n                  item.tagName === 'mj-text' &&\n                  item.attributes['color'] === metaData['text-color'];\n                const isContentColor =\n                  ['mj-wrapper', 'mj-section'].includes(item.tagName) &&\n                  item.attributes['background-color'] ===\n                  metaData['content-background-color'];\n                return !isFontFamily && !isTextColor && !isContentColor;\n              })\n              .map(\n                (item) =>\n                  `<${item.tagName} ${Object.keys(item.attributes)\n                    .map((key) => `${key}=\"${item.attributes[key]}\"`)\n                    .join(' ')} />`\n              )\n          ),\n        ].join('\\n');\n\n        const breakpoint = head?.children?.find(\n          (item) => item.tagName === 'mj-breakpoint'\n        );\n\n        return BlockManager.getBlockByType<IPage>(BasicType.PAGE)!.create({\n          attributes: body.attributes,\n          children: body.children?.map(transform),\n          data: {\n            value: {\n              headAttributes: headAttributes,\n              headStyles: headStyles,\n              fonts,\n              breakpoint: breakpoint?.attributes.breakpoint,\n              ...metaData,\n            },\n          },\n        });\n\n      default:\n        const tag = item.tagName.replace('mj-', '').toLowerCase();\n\n        const block = BlockManager.getBlockByType(tag as any);\n        if (!block) {\n          throw new Error(`${tag} block no found `);\n        }\n        const payload: IBlockData<any> = {\n          type: block.type,\n          attributes: attributes,\n          data: {\n            value: {},\n          },\n          children: [],\n        };\n\n        if (item.content) {\n          payload.data.value.content = item.content;\n        }\n\n        if (block.type === BasicType.CAROUSEL) {\n          payload.data.value.images =\n            item.children?.map((child) => {\n              return child.attributes;\n            }) || [];\n          payload.children = [];\n        } else if (block.type === BasicType.NAVBAR) {\n          payload.data.value.links =\n            item.children?.map((child) => {\n              const navbarLinkData = {\n                // default config\n                color: '#1890ff',\n                'font-size': '13px',\n                target: '_blank',\n                padding: '15px 10px',\n\n                ...child.attributes,\n                content: child.content,\n              };\n              formatPadding(navbarLinkData, 'padding');\n              return navbarLinkData;\n            }) || [];\n          payload.children = [];\n        } else if (block.type === BasicType.SOCIAL) {\n          payload.data.value.elements =\n            item.children?.map((child) => {\n              return {\n                ...child.attributes,\n                content: child.content,\n              };\n            }) || [];\n          payload.children = [];\n        } else if (item.children) {\n          payload.children = item.children.map(transform);\n        }\n\n        const blockData = block.create(payload);\n\n        // format padding\n        formatPadding(blockData.attributes, 'padding');\n        formatPadding(blockData.attributes, 'inner-padding');\n        return blockData;\n    }\n  };\n\n  return transform(data);\n}\n\nexport function getMetaDataFromMjml(data?: IChildrenItem): {\n  [key: string]: any;\n} {\n  const mjmlHtmlAttributes = data?.children\n    ?.filter((item) => item.tagName === 'mj-html-attributes')\n    .map((item) => item.children)\n    .flat()\n    .filter((item) => item && item.attributes.class === 'anteros-email')\n    .reduce((obj: { [key: string]: any; }, item) => {\n      if (!item) return obj;\n      const name = item.attributes['attribute-name'];\n      const isMultipleAttributes = Boolean(\n        item.attributes['multiple-attributes']\n      );\n      obj[name] = isMultipleAttributes\n        ? pickBy(\n          {\n            ...item.attributes,\n            'attribute-name': undefined,\n            'multiple-attributes': undefined,\n            class: undefined,\n          },\n          identity\n        )\n        : item.attributes[name];\n      return obj;\n    }, {});\n\n  return pickBy(mjmlHtmlAttributes, identity);\n}\n\nfunction formatPadding(\n  attributes: IBlockData['attributes'],\n  attributeName: 'padding' | 'inner-padding'\n) {\n  const ele = document.createElement('div');\n  Object.keys(attributes).forEach((key: string) => {\n    if (new RegExp(`^${attributeName}`).test(key)) {\n      const formatKey = new RegExp(`^${attributeName}(.*)`).exec(key)?.[0];\n\n      if (formatKey) {\n        ele.style[formatKey as any] = attributes[key];\n        delete attributes[key];\n      }\n    }\n  });\n  const newPadding = [\n    ele.style.paddingTop,\n    ele.style.paddingRight,\n    ele.style.paddingBottom,\n    ele.style.paddingLeft,\n  ]\n    .filter(Boolean)\n    .join(' ');\n\n  if (newPadding) {\n    attributes[attributeName] = newPadding;\n  }\n}\n","import { IBlockData, RecursivePartial } from '@core/typings';\nimport { BlockManager } from './BlockManager';\n\nexport function createBlockDataByType<T extends IBlockData>(\n  type: string,\n  payload?: RecursivePartial<T>\n): IBlockData {\n  const component = BlockManager.getBlockByType(type);\n  if (component) {\n    return component.create(payload as any);\n  }\n  throw new Error(`No match \\`${type}\\` block`);\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import {\r\n  AdvancedBlock,\r\n  Operator,\r\n} from '@core/blocks/advanced/generateAdvancedBlock';\r\nimport { Template, Raw } from '@core/components';\r\nimport { isNumber } from 'lodash';\r\nimport React from 'react';\r\nimport { nanoid } from 'nanoid';\r\n\r\nfunction generateIterationTemplate(\r\n  option: NonNullable<AdvancedBlock['data']['value']['iteration']>,\r\n  content: React.ReactElement\r\n) {\r\n  return (\r\n    <Template>\r\n      <Raw>\r\n        {`\r\n        <!-- htmlmin:ignore -->\r\n        {% for ${option.itemName} in ${option.dataSource} ${option.limit ? `limit:${option.limit}` : ''\r\n          } %}\r\n        <!-- htmlmin:ignore -->\r\n        `}\r\n      </Raw>\r\n      {content}\r\n      <Raw>\r\n        {' <!-- htmlmin:ignore -->{% endfor %}  <!-- htmlmin:ignore -->'}\r\n      </Raw>\r\n    </Template>\r\n  );\r\n}\r\n\r\nfunction generateConditionTemplate(\r\n  option: NonNullable<AdvancedBlock['data']['value']['condition']>,\r\n  content: React.ReactElement\r\n) {\r\n  const { symbol, groups } = option;\r\n\r\n  const generateExpression = (condition: {\r\n    left: string | number;\r\n    operator: Operator;\r\n    right: string | number;\r\n  }) => {\r\n    if (condition.operator === Operator.TRUTHY) {\r\n      return condition.left;\r\n    }\r\n    if (condition.operator === Operator.FALSY) {\r\n      return condition.left + ' == nil';\r\n    }\r\n    return (\r\n      condition.left +\r\n      ' ' +\r\n      condition.operator +\r\n      ' ' +\r\n      (isNumber(condition.right) ? condition.right : `\"${condition.right}\"`)\r\n    );\r\n  };\r\n  const uuid = nanoid(5);\r\n  const variables = groups.map((_, index) => `con_${index}_${uuid}`);\r\n\r\n  const assignExpression = groups\r\n    .map((item, index) => {\r\n      return `{% assign ${variables[index]} = ${item.groups\r\n        .map(generateExpression)\r\n        .join(` ${item.symbol} `)} %}`;\r\n    })\r\n    .join('\\n');\r\n  const conditionExpression = variables.join(` ${symbol} `);\r\n\r\n  return (\r\n    <Template>\r\n      <Raw>\r\n        {`\r\n        <!-- htmlmin:ignore -->\r\n        ${assignExpression}\r\n        {% if ${conditionExpression} %}\r\n        <!-- htmlmin:ignore -->\r\n        `}\r\n      </Raw>\r\n      {content}\r\n      <Raw>\r\n        {`\r\n        <!-- htmlmin:ignore -->\r\n        {% endif %}\r\n        <!-- htmlmin:ignore -->\r\n        `}\r\n      </Raw>\r\n    </Template>\r\n  );\r\n}\r\n\r\ninterface IterationTemplate {\r\n  name: 'iteration';\r\n  templateGenerateFn: typeof generateIterationTemplate;\r\n}\r\n\r\ninterface ConditionTemplate {\r\n  name: 'condition';\r\n  templateGenerateFn: typeof generateConditionTemplate;\r\n}\r\n\r\nexport class TemplateEngineManager {\r\n  private static tags = {\r\n    iteration: generateIterationTemplate,\r\n    condition: generateConditionTemplate,\r\n  };\r\n\r\n  public static setTag(option: IterationTemplate | ConditionTemplate) {\r\n    this.tags[option.name] = option.templateGenerateFn as any;\r\n  }\r\n\r\n  public static generateTagTemplate<\r\n    T extends keyof typeof TemplateEngineManager['tags']\r\n  >(name: T): typeof TemplateEngineManager['tags'][T] {\r\n    return this.tags[name];\r\n  }\r\n}\r\n","import { AdvancedType } from '@core/constants';\r\n\r\nexport function isAdvancedBlock(type: any) {\r\n  return Object.values(AdvancedType).includes(type);\r\n}\r\n"],"names":["BasicType","AdvancedType","Wrapper","merge","Page","Section","Column","Text","Image","Group","Button","Divider","Spacer","mergeWith","isArray","Carousel","Hero","Navbar","Social","Raw","Template","AccordionElement","AccordionTitle","AccordionText","Accordion","Table","unescape","renderToStaticMarkup","useMemo","isValidElement","React","omit","flatMap","Operator","OperatorSymbol","isString","get","isBoolean","pickBy","identity","isObject","mjml"],"mappings":"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"}